title,body,username,date,date_ago,comment_1,comment_2,comment_3,comment_4,comment_5,comment_6,comment_7,comment_8,comment_9,comment_10
"I wrote a syllabus for learning Python and Django. Four people have gone through it, two are interviewing and one got a job. It's based on using a somewhat even mix of coding challenges, personal projects and books.","Syllabus
Edit July 2021:
It’s been almost a year since I wrote this post. I’ve learned a lot more about learning Python in that time. I up-leveled my own coding skills to prepare for interviews, which I just completed. I also mentored more people. I really want to make a new version of this syllabus but I don’t have the time (I’m starting a new job!). To not let perfect win over good, here are some changes I have in mind.
Start off with some
edabit
problems. edabit has the easiest problem of all the different code challenge sites I know of so it’s a great place to start and build confidence.
See if I can swap HackerRank mediums for leetcode Easies. The leetcode discussions are great.
Maybe swap out How to Think Like a Computer Scientist for Python Crash Course.
Drop Problem Solving with Data Structures and Algorithms. I generally like the explanations. I really dislike a lot of the code. If you’re doing the syllabus, you should probably just skip it. There is no book I know of that teaches algorithms in Python at the level I want, to the audience I want, in the code style I want. Maybe I’ll have to write it some day. Closest might be Grokking Algorithms. Check it out.
Maybe add How to Solve It. Maybe the best book for getting better at coding that isn’t about coding.
Make a “further reading” section with Fluent Python and Python Algorithms: Mastering Basic Algorithms in the Python Language.
If you have questions about these changes, feel free to message me on reddit. You can also email me at my last name at gmail. Now, on to the original post.
I've helped a few people become software engineers. The ones that learned the fastest used a mix of studying, coding challenges and personal projects. When you do all three of these things, they amplify each other. It also keeps you out of
tutorial hell
.
Studying (tutorials/videos/books) are how you learn about new topics and get exposed to good code. Coding challenges give you small problems to implement what you've learned and compare your solutions to other people's. Projects let you put it all together and give you something to show off when you're done.
I put together my favorite resources and then iterated on it by mentoring a few people through it. It seems to be working well. The syllabus is free and all of the books together would total up to a few hundred dollars (money very well spent IMO).
It's set up in Notion as a non-linear path. You can copy the syllabus and then mark your progress as you go. You should have 2 or 3 things that are available to work on most of the time.
It's based on my own experience of learning to code. I've taken my favorite study materials and put them in somewhat logical order. By the end of it, you will be able to make basic web applications in Django.
You won't have just created one web app following a tutorial. That can be done from no experience in a weekend. You will have built up enough knowledge to do it on your own. There is hundreds of hours of work in this syllabus.
The beginning is probably a bit fast-paced if you are absolutely new to programming. Give yourself some more time to practice. If you want a
really
good foundation, check out Harvard's free online course, CS50.
Focus
The first focus is on Python. Python is one of the most popular languages. It's used across many different fields (scripting, web apps, ML, data). It's also one of the easiest languages for beginners. This combination makes it a great first language.
The second focus is on making web apps in Django. Django is a web framework written in Python. Django isn't introduced until more than halfway through the tutorial.
If the goal was just to display web pages, that could be done much sooner. But the goal here is to make real programs and let people interact with them over the internet. A strong foundation in Python is essential for that.
Then what?
This syllabus is light on frontend work. If you want to focus on that, you could switch over to JavaScript when you're done. Your time with Python won't have been wasted.
If you want to stay on backend development, you can just keep making more projects. You could also learn how to make web APIs, maybe with Django Rest Framework.
You could stop on web apps all together and go to some other domain. Python is probably used there. If you already know that's what you want do, this may not be the syllabus for you. You could at least work until Django shows up and then stop.
How to use the Syllabus
Go to the
Syllabus page
.
Duplicate it (there's a link in the top right).
Pick an assignment with a green check mark next to it.
Click on the assignment to see the notes and URL.
Do the assignment.
Check off the ""Finished"" box.
Pick a new assignment with a green check mark and repeat.
Refer back to the original Syllabus to see any changes
When you get stuck, unstick yourself.
When you don't know how to do something
Read the documentation
Search
Google
Stack Overflow
Post
Stack Overflow
Subreddits
FAQ
Do you have this for X?
Check out
The Odin Project
for a version of JavaScript, optionally with Ruby. I don't know any others well enough to recommend.
How long will it take?
Two people going full time finished it in a little over three months.
Syllabus
Duplicate it
on Notion
if you want tracking.
How to Think Like a Computer Scientist
Skip sections 14 and 15.
CODE: The Hidden Language of Computer Hardware And Software
HackerRank: 30 Easy
Never spend more than 10 minutes stuck on a problem! Do even less if you're sure you can't get anywhere.
If you're stuck, just look up the answer in the comments section or online.
Prerequisites: How to Think Like a Computer Scientist
The Hitchhiker's Guide to Python: Getting Started With Python
Prerequisites: How to Think Like a Computer Scientist
The Hitchhiker's Guide to Python: Python Development Environments
Prerequisites: The Hitchhiker's Guide to Python: Getting Started With Python
Mastering PyCharm: Why PyCharm and IDEs
Prerequisites: The Hitchhiker's Guide to Python: Python Development Environments
Mastering PyCharm: Course setup
Prerequisites: Mastering PyCharm: Why PyCharm and IDEs
Mastering PyCharm: PyCharm Projects
Prerequisites: Mastering PyCharm: Course setup
Mastering PyCharm: The Editor
Prerequisites: Mastering PyCharm: PyCharm Projects
First Python Project
If you can't think of something useful, just make something fun. This should be a project that takes about 2 days.
Prerequisites: Mastering PyCharm: The Editor, HackerRank: 30 Easy
HackerRank: 60 Easy
Prerequisites: HackerRank: 30 Easy
Mastering PyCharm: Debugging Python applications
Prerequisites: First Python Project
Git Tutorials
https://rogerdudler.github.io/git-guide/
https://guides.github.com/introduction/git-handbook/
https://github.github.com/training-kit/downloads/github-git-cheat-sheet/
Just the intro and 5 minute summary:
https://trunkbaseddevelopment.com/
This is a pretty high level overview. Just enough to get started.
Prerequisites: First Python Project
Mastering PyCharm: Source control
Prerequisites: Git Tutorials
Second Python Project
Prerequisites: First Python Project, HackerRank: 60 Easy
HackerRank: 90 Easy
Prerequisites: First Python Project, HackerRank: 60 Easy
The Hitchhiker's Guide to Python: Writing Great Python Code
Prerequisites: First Python Project, HackerRank: 60 Easy
Mastering PyCharm: Refactoring
Prerequisites: Second Python Project
Mastering PyCharm: Tool windows
Prerequisites: Second Python Project
Third Python Project
Prerequisites: Second Python Project, Mastering PyCharm: Source control, HackerRank: 90 Easy, The Hitchhiker's Guide to Python: Writing Great Python Code
Effective Python
Skip chapters 7 and 9
Prerequisites: Second Python Project, HackerRank: 90 Easy, The Hitchhiker's Guide to Python: Writing Great Python Code
HackerRank: 120 Easy
Link
and
link
Prerequisites: Second Python Project, HackerRank: 90 Easy, The Hitchhiker's Guide to Python: Writing Great Python Code
Fourth Python Project
Prerequisites: Third Python Project, HackerRank: 120 Easy, Effective Python
Python Cookbook
Skip 7.10, 7.11, 8.10, 8.11
Skip chapters 9, 11, 12, 15
Prerequisites: Third Python Project, HackerRank: 120 Easy, Effective Python
SQL Course
Skip chapters 16, 17 and 18.
Check for coupons! You should be able get it for like $15.
Prerequisites: Second Python Project
Mastering PyCharm: Databases
Prerequisites: Second Python Project
Django for Beginners
Prerequisites: SQL Course, HackerRank 120 Easy, Fourth Python Project
Mastering PyCharm: Server-side Python web apps
Prerequisites: Django For Beginners
Django Tutorial
Step 0: Set up the Django project in PyCharm. Call it ""mysite"" to match the tutorial.
https://www.jetbrains.com/help/pycharm/creating-django-project.html
Prerequisites: Django For Beginners
First Django Project
Use
https://github.com/travisjungroth/django-base
Prerequisites: Django Tutorial
Heroku Django Deployment Tutorial
Prerequisites: Git Tutorials, Django Tutorial
Test-Driven Development with Python
Prerequisites: Django Tutorial
Mastering PyCharm: Unit testing
Prerequisites: Django Tutorial
Second Django Project
Prerequisites: First Django Project, Test-Driven Development with Python
Django For Professionals
Prerequisites: First Django Project, Test-Driven Development with Python
Third Django Project
Prerequisites: Second Django Project, Django For Professionals
HackerRank: 20 Medium
Prerequisites: Second Django Project, HackerRank 120 Easy
Problem Solving with Algorithms and Data Structures using Python
Prerequisites: CODE: The Hidden Language of Computer Hardware and Software, HackerRank 120 Easy
HackerRank: 40 Medium
Prerequisites: HackerRank: 20 Medium, Problem Solving with Algorithms and Data Structures using Python
Fourth Django Project
Prerequisites: Third Django Project, HackerRank: 40 Medium",u/TravisJungroth,"Saturday, August 15, 2020 at 4:01:06 AM GMT+5:30",3 yr. ago,Ah yes another wonderful post I will bookmark to never look at again,This sub is the best. You are the best. Thank you sir.,Comment removed by moderator,I'm stuck in tutorial hell and need to GTFO,Have you checked in on the 4th person? They doing ok?,,"How long, roughly, did it take for each of the four people you mentioned to work through this?",Comment deleted by user,Wow this looks complete as fuck,What framework/libraries are you working with? I set the localStorage debug mode true and it is really cool how the UI is clickable and explorable from a debugging standpoint.
"I highly recommend Harvard's free, online 2016 CS50 ""Intro to CS"" course for anyone new to programming","Basically, it will blow your socks off.
It is a pretty famous as well the largest(aka most popular?) 101 course at Harvard. The class routinely has 800 students. Mark Zuckerberg and Steve Ballmer have given guest lectures.
For some crazy reason they let us mere mortals sit in on the class.
The professor is incredibly charismatic and extremely good at making the complicated easy to understand.
Here is the
syllabus
.
Here is the
Intro Video
Be warned, there are 10-20 hours of challenging homework a week(remember, this is Harvard), BUT....
If you do not have a CS degree
, taking this class and putting it on your resume is a great way to show future employers that you have what it takes.
Just watch the
video
. You won't regret it.
edit: just realized I forget to put a link to the course homepage:
https://courses.edx.org/courses/course-v1:HarvardX+CS50+X/info",,"Tuesday, June 28, 2016 at 6:42:39 AM GMT+5:30",8 yr. ago,"I cannot recommend CS50 enough. It's a fantastic course. It's tough, but it's probably the best intro course I have ever taken.
Plus, DJ Malan is in da house.",Comment deleted by user,Something I don't understand - do you have to do it at a certain time? Or can you do it all any time? Do we have to 'attend' lectures as they are given? Is it all within a given timeframe?,Mom! I'm going to Harvard!,"How would one put this on a resume?  ""Sat in on CS50?""",Comment deleted by user,"I'm actually a teaching fellow for this course, so I'd anyone has questions about it I'd be happy to answer!","I was just about to start prepping for a bootcamp by learning the basics of JavaScript and Ruby (the bootcamp focuses on Ruby on Rails, JS, React, Flux, SQL, etc) and I was wondering if it might be a bad idea to try and take CS50 while learning JS and Ruby for the first time? Would it be confusing to try and do it all right now? I have a little programming experience from a few years back taking a C++ class at UCLA but really haven't touched it since the class.","You can officially register for the course on edX. They have a certificate program for $90 or you can enroll without the certificate for free. Here is the
link","I started this course.
My relationship with all its bullshit, fights, arguments, stress and demands from my girlfriend fucked it up for me.
What's sad is I actually managed to get approved for the certificate free of cost because I qualified for one of their scholarships.
I'm going to start it now and if she tries to get back into my life, I'm going to tell her about how much it meant to me that I finish this course before I hang up on her.
Take this course seriously. If you have some bullshit going on in your life, you need to cut it out or you will drown."
Please do not downvote someone who is asking for help in solving a code that looks stupid.,"I don't know if some people here just like to troll beginner programmers by downvoting them or are just feeling salty towards beginner programmers and ugly code. Just don't downvote a post because of that and say nothing about the problem with the bignner's code. I've asked for help maybe twice before in this sub, and while I got some suggestions and advice from those who helped me, I get confused why there are a few who downvote me asking for help to fix a code even though I follow the rules. This is just discouraging for beginner programmers. Do not do that if they're being genuine about asking for help.
Edit: Since this post has been locked, I'd like to say thank you to everyone who replied, whether it was a friendly or tough advice. I learned a lot! Programming, like any other technical or practical field, tends to have egoistic people or people with superiority complex, but don't give up!",u/Miu_K,"Friday, September 4, 2020 at 3:05:45 PM GMT+5:30",3 yr. ago,"I have been on this sub long enough to know that people don’t come here to help other people, people come here to make themselves feel superior.","I agree
There is a lot of snobbery in anything that takes a lot of time and effort to achieve skill at, but along my way I've also found a lot of helpful and supportive individuals
So it's best to keep the best in mind or you'll associate your passions with negativity","When I posted likely stupid questions on StackOverflow, providing the info you already dig up, queries and assumptions helped a lot in getting an actual answer instead of bunch of downvotes and shut down by moderators.","I've posted here, stack overflow, and other places before, and most of the times you feel like quiting programing from some of the responses. They make you feel stupid.
I try my best to always help people when I can and when someone responds and helps me I make sure they know I appreciate it. I'm actually a bit ashamed of the community and some of its members.",,"Just keep an open mind about it. Not everyone is going to be helpful because there are some who are just arrogant(the majority). But also do know that there are people who are truly willing to help without putting you down(the minority)
It's just a matter of identifying who those people are. Let's be real here, it's the Internet. There will always be arrogant/snobbish people behind a screen.
Edit: I remember when I first got this reddit account; I asked a question and I was met with some arrogant/rude/toxic people who just didn't help me at all. But then I asked a question at another forum and gosh they were helpful. Not going to lie but I was so surprised to know that ""hey, there are actually people who are willing to help"".
Best of wishes.","Unfortunately, not everyone is always nice about helping out. They do it to show off and prove that they're better than you. However, I like to think that there are still quite a few people (myself included) who are always willing to help out. Don't let other people's egos get in the way of you doing what you love. Keep going, and you will enjoy it even more.
Have a great day! :)","to be fair a lot of people ask senseless questions and as we all know, coding requires (a lot of) searching on the internet.
With some of the questions asked, it's as if some of them put in 0 effort and just want others to do their work for them","In my fairly limited experience, most of the posts getting downvoted have one or more of these: unclear or no question, no code formatting, asking for the whole solution, not even close to enough information or simply didn’t read the FAQ.
While I’m often too lazy to either up or downvote, I will much rather answer the other post that took the time to properly post a question than the one who didn’t.","I stopped asking for help here because of one user who is always a bit of a dick.
Edit: Wow. I just realized he's a mod."
How would people like a series of cartoons of ELI5s for important software engineering concepts?,"Things like API vs Library vs Framework, Architecture patterns (MVC, MVVM, VIPER), REST, NoSQL vs SQL databases, etc. I haven't yet found a great, singular resource on easy to understand explanations of all of this stuff so wondering if everyone else would want this.
EDIT: wow, this got a lot of likes. I'm actually thinking of maybe making a tiny book of this to publish. It would cover basic Data Structures and Algorithms, the SWE concepts I listed above, and maybe common problems developers face during their process
EDIT 2: got one of my friends on board to help :)
EDIT 3: The more I think about it, the more I think that this should be a pseudo-open source project in the spirit of programming. I'm going to make a collaborative list of topics that everyone wants covered, and consult a few trusted sources to reconfirm my final analogies/definitions. It will be posted on Github as a .md file and I'll update.
UPDATE: If anybody would like to contribute to the list, submit a pull request to this repo:
https://github.com/sudotoons/collab-content
It's currently a little disorganized but I just started listing things I would have wanted to be explained.
UPDATE 2: My partner and I are going to upload 4 different styles of cartoon for our first piece, which is explaining the important distinction of ""print"" vs ""return"" for beginners. We'll appreciate the feedback!",u/tangerto,"Sunday, June 11, 2017 at 7:32:58 PM GMT+5:30",7 yr. ago,"This would be awesome, I would print them out and have them in my office.","I tried to do something like this for a while with
short youtube videos
.","Boy, as someone studying to be a software developer, I've noticed there is a massive lack of visuals for some of the core concepts. This is really annoying if you're someone who learns by seeing. Plus, why not add some humor to learning? For me, when it's funny it sticks more quickly in my brain.
Also, younger students are getting into programming (think elementary school) , and you could reach a large demographic by creating a series that's fun and informative.",,"The Grokking Algorithms Book
is good for beginners or for those who want a fun refresher. Obviously not too much depth but teaches it in a nice illustrated way. Code is also available on github.","Even if I think I understand these concepts, having something like this would still be nice to review for interviews and to bookmark for when I need to explain a concept to someone.","That reminds me of this
http://jvns.ca/zines/",I would subscribe if you made these available on youtube.,Would've helped a lot before j changed my major.,Yes! Where do we follow!?
The Massachusetts Institute of Technology has a class called ’The missing semester of your computer science education’ It is a collection of things that most developers and data scientists typically teach themselves on the job.,"The content is available for free.
Course:
https://missing.csail.mit.edu",u/ai-lover,"Friday, March 13, 2020 at 12:15:25 PM GMT+5:30",4 yr. ago,"Here's the more
detailed post
from last month by the actual creators of the course.",Are there any prerequisites for this course?,"Negotiating your way into the good desk location
Swapping conference room chair with your desk chair
Bypassing the VPN
How to set game launchers to invisibile while working from home
Never talking to the cute intern
Choosing the right IDE font
Finding easiest to own business casual clothes
Finding the ""private"" bathroom
Not committing suicide after your second 3% raise
Making fun of front end developers OR making fun of back end developers","Version control, debugging, and security in a single class? Where tf was this 4 years ago?!",what about something similar to this but for people who don't have academic education about computer science? something to bridge the gap for a self-taught programmer?,Holy shit. I started an internship and I needed learn git a bunch of this stuff that ISN’T TAUGHT AT UNIVERSITY! Thank you for this post! I missed the original one.,I admire MIT immensely for their continued support of providing free access to education to the masses.,After graduating I have washed out of two software engineering jobs so far due to not having this knowledge and the impostor syndrome that lack of knowledge engendered.  This should be up there with data structures and algorithms in terms of pedagogical priority in my opinion.,"1/15: Editors (Vim)
NOT. BIASED. AT. ALL.
Please note that I am a vim die-hard but this is kind of crazy. I'm one of the very few developers that knows Vim. Most developers don't use vim (crazy, I know right!)",50% of MIT curriculum is self taught. That's why it graduates some of the best engineers.
"The online course for ""Automate the Boring Stuff with Python"" is free to sign up this week.","School's out, but that doesn't mean you have to stop learning. The online video course from the author of ""Automate the Boring Stuff with Python"" (that's me) is free to sign up for this week. This sign up will give you life time access to the course. Just use the following link:
https://www.udemy.com/automate/?couponCode=SCHOOLS_OUT2
This course is made for complete beginners who have no experience programming. It's ""programming for office workers"" because it skips computer science and teaches you how to do practical tasks: web scraping, updating Excel spreadsheets, parsing PDFs and Word documents, sending out automated email and text notifications, controlling the mouse and keyboard, and more. If you're an experienced programming, you can skip the first half (which covers basic programming concepts) and directly learn about several useful modules for Python.
(This code expires on June14th. Previously I'd give out codes to folks who asked me after the expiration, but it turns into a logistical headache to keep making coupons each time someone asked, so the deadline is firm.)
If you'd like to support me by using an affiliate code (or encourage yourself to finish the course since you put money down on it), you can also use one of these links to pay what you like: (MODS: if this is too spammy, I can take these links down)
https://www.udemy.com/automate/?couponCode=PAY_10_DOLLARS
https://www.udemy.com/automate/?couponCode=PAY_20_DOLLARS
https://www.udemy.com/automate/?couponCode=PAY_30_DOLLARS
https://www.udemy.com/automate/?couponCode=PAY_40_DOLLARS
This online course covers most, but not quite everything, in the Automate the Boring Stuff with Python book, which is freely available online under a Creative Commons license. You can read it at:
https://automatetheboringstuff.com/
(The book has a few more examples, and also covers programmatically creating/editing image files, for example).
If you like the course (or don't like it), please remember to rate it.
Good luck on your programming journey!",u/AlSweigart,"Tuesday, June 11, 2019 at 3:14:58 AM GMT+5:30",5 yr. ago,"Good Guy Al: Writes an awesome introductory book on applied programming / python.
Gives it away and even spoon feeds it to you for free.",,would this be useful to someone who never programmed in their life?,"May I just be off topic one moment?
Thank you SO much for what you've done for this community!  Your book, and your dedication to Python and teaching Python are so inspirational.  I really appreciate you!
Get this guys book!  Learn Python!  It will save you so much time!  It almost doesn't matter what your job or your hobby is, if you interface with a computer to do it, learning a little bit of Python can help you do it better!",Comment deleted by user,You the MVP,That's very generous of you Sir! Thank you! Appreciate it greatly!,"Al I'm a big fan. About halfway through the course currently.
Quick question:
What resources would you use after the course is completed to take my python knowledge further? Any certain types of OOP projects you would recommend or courses? My main goal is to use python for technical interviews, so any input to further my knowledge to get there is really appreciated!",What a treat! Thank you Al!,Enrolled. Thank you for your generosity.
"TIL that a software engineer filed a Freedom of Information Act request to get access to NSA's training material for teaching Python, the popular programming language. The material is now available for free online for anyone who wants to learn Python using it.","""Software engineer Christopher Swenson filed a Freedom of Information Act (FOIA) request with the NSA for access to its Python training materials and received a lightly redacted 400-page printout of the agency's COMP 3321 Python training course.
Swenson
has since scanned the documents
, ran OCR on the text to make it searchable, and hosted it on Digital Oceans Spaces. The material has also been
uploaded to the Internet Archive
.""
https://www.zdnet.com/article/python-programming-language-now-you-can-take-nsas-free-course-for-beginners/",u/liquid_light_,"Monday, March 7, 2022 at 7:04:32 PM GMT+5:30",2 yr. ago,"As someone who has sat through countless government trainings, I’m gonna pass on this one.","I dunno, some military training programs, maybe I'm thinking of A-School materials, that are ridiculously good.
I had a Navy vet as a physics professor and the textbook was his own, which was based off how he was taught math, calc and trig, in the Navy and it was amazing.","My uni gave me Coursera membership and it has ""Programming for Everybody"" by Michigan Uni and Charles Severance is good from the few initial classes I am watching.","When the opening line is:
""So you're teaching the Python class. What have you gotten yourself into? You should probably take a few moments (or possibly a few days) to reconsider the life choices that have put you in this position""
, you're sweetly reminded that some people in the NSA still have a grasp of humanity.","I'm curious -- what made him think that the NSA had its own Python training material, and wasn't just utilizing any of the other Python courses and guides? Maybe he saw it referenced somewhere and wanted to see what was inside, and figured it probably wasn't highly classified so it might be available via FOIA.","Among other things, he's a crypto-analyst who's worked for the DoD.","Govt departments maintain a lot of documentation, of everything, even if it duplicates other sources. It’s useful if those other sources disappear, say like cobol documentation, which is still in use in a lot of financial systems including many used by government.",Comment deleted by user,"Man, it would be really funny if there was a section on RNG and hashing libraries that had something like ""note: do not use; we are aware of multiple undisclosed vulnerabilities in these libraries"" or whatever","Is the course material good to learn from? Its not exactly the most readable version (cause its not pdf or whatever), but i'm interested to know if its actually good despite the format"
Cornell's entire Machine Learning class (CS 4780) is now entirely on You Tube. Taught by one of the funniest and best professors I have ever had.,"You Tube Playlist:
https://www.youtube.com/playlist?list=PLl8OlHZGYOQ7bkVbuRthEsaLr7bONzbXS
First Lecture Notes:
http://www.cs.cornell.edu/courses/cs4780/2018fa/syllabus/index.html",u/delta777er,"Wednesday, May 29, 2019 at 3:28:50 AM GMT+5:30",5 yr. ago,that's fucking amazing. are the course materials and any sample code available?,What kind of math do I need to know to keep up?,Comment deleted by user,,My coworker Andy went to Cornell and wont shut up about it. Says he was drunk the whole time...,"Thanks for sharing! Studied Bio at Cornell with a focus on Neurobio and left before I fell in love with ML. Prepping for grad school in ML at the moment. This series is just the right mix of nostalgia, humor, and info! This series is much appreciated","4780
? So , this is a 4th year college level class ?
Could a middle aged , educated person learn this ?",Comment deleted by user,Started off good but then he said to put your laptops away so now I'm posting this from my phone and I haven't learned a thing.,"Wow, that's an incredibly positive review of a professor. Sounds like someone I wish I had in college! I will definitely be checking this course out.
Thanks!"
Just turned 34 and I'm interested in trying a career in computer programming. How much of an uphill battle do I face?,"Here's a little background about me: My current job (mailman) has nothing to do with programming. I have a bachelor's degree, but it's in Liberal Arts. I have taken some math (precalc, statistics, algebra with trig) and enjoy math, but admittedly I don't know much about programming. I've been practicing Java on Khan Academy and I like it so far. I was wondering how should I go about it? Should I just keep practicing on sites like Khan Academy? Should I take courses online or at a community college? Is it unrealistic of me to think I can become a programmer at 34 with no real background in programming? I have to head back to work, but if you need any additional information I will answer when I get back. Thanks.
Edit: Wow! I just got home can't believe all the responses I got. Thank you all so much for taking the time out to respond. I really appreciate it.",u/flipadelphia22,"Wednesday, October 10, 2018 at 10:49:58 PM GMT+5:30",5 yr. ago,Comment deleted by user,"I was a mailman for a a couple of years, until at 34 I changed tracks to software development, and things are going pretty well for me. You can do it OP!","I'm 40+
Did a bootcamp... now have job.
My previous career was technical (networking) but had no programming involved in it.","Is it unrealistic of me to think I can become a programmer at 34 with no real background in programming?
No. Don't ever think in those terms, met devs online who got into the fields at their 40. 2 years later, lead of android development team in the place he is working at.","You can definitely do it! I started taking a few community college progrmaming classes at 31 with a previous degree in French and a shitty data entry job.
Fast forward to age 34 I have a job as a software dev. I'm still going to school at night and probably won't have my degree before I'm 38, but hey.. I was going to be 38 anyway so I might as well have the degree.","I'm 32 and just got accepted to software engineering, I start in January.","I got my CS degree when I was 39, and there were others that were older so age isn't an issue.  There's people on here that say they didn't have to go to school and they got jobs as front end developers.  I'm assuming you'd work and go to school?  That's fine, don't quit your job if you don't absolutely have to.  My advice, go through Khan, find what you like, java, backend, front end, etc and see what options are out there in your area and what they require.  If you have to go back to school, you'll have to do some high end math, but once you get into the job, you probably won't need it.  I originally went for a two year at a community college, but the town I was in had almost no IT jobs, so I had to look elsewhere.  All the big cities though had four year schools that were putting out people with bachelors so I couldn't compete.  So went back for a four year degree and got a job about eight hours away.","Got a job after 2 years self study and that includes a boot camp. Dude, you got another 30+ years until retirement, I would definitely rather put a lot of effort in and do a career I love than not put effort in and be what most people call “comfortable”.
You can do it man, patience and persistence are key!","I think it has to do with lifestyle more so than background. Are you married with kids? Have an active social life? Do you have hours to spare every day? Are you able to resist the temptation to consume media like movies, TV shows and games in lieu of much less immediately (but ultimately far more) gratifying things?
Anything can work if you're willing to treat it like work, but most people this age are properly chained into position and have very little free time or leeway.","20+ year software developer here. I've also been a hiring manager at one of the big, Seattle-based tech giants and a number of other companies.
You are definitely not too old to start. I once hired a woman in her 50's who started going to school after her kids were grown. You can do it.
It's hard work to get there. You'll need determination and to be ready for the effort. (But no more than getting a college degree in any challenging subject.)
The best way is to get a college degree, but even that's not really required. What's required is understanding how to develop software.
A Master's degree is better, but not required either. You may be able to enroll directly in a Master's Degree program if you already have an undergraduate degree and are willing to take 'required classes' that give you a baseline.
If you don't want to get a college degree, you can self-teach. Some of the best engineers I've known didn't go to college. They were self-taught and made tons of cash.
To self-teach the key is not just to do on-line coursework, it's to actually begin developing programs. More on this below.
In the end, you'll need to go into interviews and demonstrate knowledge of 'Algorithms' and 'Data Structures'.
Here's the book you need to learn.
I'm literally serious when I say that simply learning to write Python or Java code to solve all the homework problems in this book is step one to get you a $100K/year job.
Step two is getting some practical experience, There are a couple ways to do this. One of the best ways is to get involved with a popular open source project and beginning to contribute code to the project. Like for example,
this one
, or
this one
, or
this one
. Working in open source is a volunteer effort that gets you learning how to be part of a 'development team' and how to use source control and github. Open Source projects are best considered 'communities of developers' (small or large) that work together to solve a common problem. They'll critique your code and make you better. Other developers can be tough (not unlike subreddit communities on Reddit), but generally are supportive, Don't let trolls get you down when you find them (and you likely will).
The knowledge of algorithms from the book is key to give you the knowledge needed to pass 'coding interviews' in today's job market. And the open source experience will help you develop the practical knowledge and give you 'street creds' that will get you in the door.
I've hired over 100 engineers and managed teams large and small. I'm 100% confident that this approach - if you work at it - will get you into a solid, well-paying job."
Would anyone be interested in a website that teaches c++ from complete beginner to more advance concepts?,"I am thinking about making a website that is used to teach people programming. C++ first probably, other stuff later after that.
Would anyone be interested in this? The only thing that im considering, is that there are already hundreds of resources that do this same thing.
However, I feel like a lot of online resources just teach you the basics over and over again, and very few of them actually move on to more advanced concepts or help the readers understand where to go from there. Would anyone be interested in this, or would i just be making something that hundreds of other people are already doing? Let me know!",u/InsaneTeemo,"Tuesday, October 9, 2018 at 8:57:42 PM GMT+5:30",5 yr. ago,"There are 1000's of them already AND I would be 100% interested. Every site has a different teaching style, and I learn new and different things every time I visit a new place. It's entirely possible that your unique teaching style may resonate with a niche group of learners who have been struggling elsewhere.","or would i just be making something that hundreds of other people are already doing?
It would, but that's shouldn't be a reason to avoid doing this. We re-invent the wheel a lot as we learn. I'd say if you want to do this, do it for your own edification. Maybe you will have a teaching method that's truly different and changes things. Probably not; everyone thinks that their idea is different. But you should still try if you want. Just don't be disappointed if you're the only visitor to your site.",I 100% would be interested,I think you should. C++ isn't really taught by these modern online courses and I feel that is a big mistake. C++ should be the standard IMO.,"Yes 100%. I'm a CS student and feel like my main resources are the textbook, lecture notes, and stack overflow which is just depressing to go on.",Comment deleted by user,"Yes, a focus on advanced concepts would be nice.","I would be interested if it will also teach tooling, ecosystem, and other stuff that would get one to a production-ready app/library.","I’m picking up cpp right now, I’d love to check it out!",Comment deleted by user
"""Automate the Boring Stuff with Python"" Udemy course is free to sign up for with code NOV2019FREE","https://www.udemy.com/course/automate/?couponCode=NOV2019FREE
Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. I'll no longer be able to make free coupon codes with arbitrary restrictions. Instead I can:
Make free codes that are only good for 3 days for an unlimited number of people (NOV2019FREE lasts until November 7, 2019 11:05 AM PST)
Make codes that make the course cheap (but not cheaper than what Udemy offers, allowing them to undercut me) for unlimited people that lasts for 30 days. (I've made a code NOV2019 for this.)
There's two other options, but they're less than ideal: free but only 10 people can use it, or lowest price but it's only good for a few days instead of a month. I can only make 3 codes a month, so I can't just generate new codes every few days.
If you're reading this post after the NOV2019FREE code, you can use the NOV2019 code to get the course for about $14. I plan on making new free codes for the first three days of each month. You can probably guess what next month's free code will be.
To head off any questions:
If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
This Udemy course covers the same content as the book, which you can read for free online at
https://inventwithpython.com
The 2nd edition of Automate the Boring Stuff with Python will be posted on the website in mid-November. It gets released on the 12th, and I'll need a couple days to format it to HTML and make it look nice.
I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
I wrote a blog post to cover
what's new in the second edition
I used to do free codes once or twice a year. The last time I did, I had an amazing 80,000 people sign up (so a dozen of them might have actually finished the course, if people are as good as I am about finishing the online courses I sign up for). Udemy's new policies mean I can't do this anymore. I find this to be a less than ideal situation. So I'm rolling out new codes each month. NOV2019FREE is the free code, and NOV2019 is the cheap code. I'll come out with new ones at the start of each month. (And yes, I'll probably write a script to automate this.)
EDIT: Hey, if anyone has ideas for how to motivate people to stick to and finish the course, I'd be all ears. Most people who sign up for gym memberships on New Year's stop going come February, and there's a similar dynamic with online courses. Anything that could up that rate would be good.",u/AlSweigart,"Tuesday, November 5, 2019 at 12:50:14 AM GMT+5:30",4 yr. ago,Thanks man! I really appreciate your effort to give a whole course out for free and a reduced price. I'm definitely going to use this,"The effort alone you go through to give back to the community and find ways to open your content is fantastic.
I wish more curators, in this space specifically, came with this mentality and energy!
Thanks Al.",Great thanks so will there be a new course on second edition or same course will be updated with second edition content? super thanks for this.,"""You purchased this course on Sept. 22, 2015""
OH YEA",,"This is fantastic! I just started this course this week and was lamenting my timing because I had seen it as free before, I put off buying the course until I was caught up to where I was and I just sat down to start the next chapter. Sorry to hear about the udemy rigamaroll but thank you so much for your work :)",,,"Awesome, thanks for the course. Will definitely try to finish it.
I think people do not finish courses because:
Starting something new gives a hit of dopamine (which is a neurotransmitter released inside the brain in ANTICIPATION of a reward, here the reward might be learning something new). But as soon as there is nothing new to that, people lose motivation and suddenly the course which for which you signed up willingly requires you to spend your will power. ( I might be wrong about dopamine here but this is what I currently understand about it, if someone can recommend a good book, I'd try to increase my understanding)
Then comes the phase where we need to use our will to start that new video in the course which will teach the all important loops. But the catch about willpower is, it is limited and we can exhaust it on things that don't matter if we don't use it carefully. One can think of it as a muscle which can be trained slowly and steadily by lifting just enough weights that it won't tear apart but challenge it at the same time. The Willpower Instinct by Kelly McGonigal is a good book to read more about it.
Things people can do to tackle these problems:
Reserve things tha give you a dopamine hit for the time only after you finish one or two videos from the course (or perhaps even a section). For instance, I'll get coffee only after I finish this much. This way your brain will associate this activity of learning to getting a reward and you would love doing it. (Here one thing can go wrong though, we expect too much from ourselves but in reality we cannot do much, so its important to set short goals but the rewards should also be small. Not like feasting yourself with a 7 course meal after just one video :P).
Tackling willpower can be tricky and easy at the same time. The best thing that works is building systems like saying ""I watch one video first thing in the morning and one video before going to bed"". This way doing the course becomes part of our daily routine and we don't have to go out of the way to type Udemy on the browser, then go to My Courses, then by the time we reach this course our phone beeps and the cycle repeats. Going out of the way requires will power. The tricky part here is that most people (including me :P) cannot (or will not) take out 5-10 minutes to just watch one video, but can scroll through YouTube all day. (I developed a habit of reading by reading just before going to bed)
All this information is mixed from these books:
Atomic Habits by James Clear
The Willpower Instinct by Kelly McGonigal
Deep Work by Cal Newport And YouTube Fill me in if you got more. :D
There is one more thing, which is, while starting due to enormous expectations from ourselves, we fail to accomplish our goals which leads to deterioration of motivation and thus we stop. The important thing here is to start extremely small and build upon only if we can. Otherwise just take baby steps to the finish.
After writing all this, I might complete the course after all. Lets see, I'll just put the date here and update this post when I complete it.
5 Nov 2019","been teaching myself python for free with sololearn and codecademy and love it.  thanks for your contributions, just enrolled.  so much gratitude!!!"
I made 47 free C++ tutorials on YouTube and wanted to share them with you guys,"Dear
r/learnprogramming
,
I made a free C++ course for beginners and it seems relevant to share it with all of you here. It's a full introductory course made up of 47 lessons that start with ""Hello World,"" assuming one has absolutely no programming experience, and goes on to cover loops, functions, vectors, and more. All the lessons all hosted on YouTube and organized into a course on my website. Hope you like it!
http://www.engineer4free.com/cplusplus
EDIT: Wow thanks for the gold, upvotes, and all the feedback!!! This is a much bigger response than I was expecting, I'll hopefully get around to answering questions later today!",u/engineer4free,"Monday, December 21, 2015 at 11:23:10 AM GMT+5:30",8 yr. ago,"Your 47th link is the same as your 46th, you might want to fix that.","I read that as ""I made 47 years of free c++ tutorials"" and was like T_T","I did some spot checking to evaluate the quality and didn't spot any major problems. But I did notice your
first three
second and third array videos aren't valid C++ programs. You're using a common language extension, borrowed from C, called variable length arrays (VLA). In C++, array lengths must be a constant integer expression. Your compiler accepts it because it's being nice, but if you ask it to be strict (
-pedantic
in clang++ and g++), it will reject the program with an error.","Awesome, thank you! Will have to check out the vectors tutorial soon. Had more trouble with that in my CS class than anything else
Edit: Is there a playlist link you can post? Would make it easier to follow the lessons that way","I know this is likely a completely newbie question to ask, but what do you type your code into on these videos?
Do you have any suggestions on what editor to use?","These videos are also a great resource to check out:
https://www.youtube.com/user/1kingja/playlists?view=50&sort=dd&shelf_id=6
I had this guy as my teacher for a C++ programming class, and he is phenomenal at explaining concepts. If you find yourself stuck on anything in OP's playlist, maybe one of his videos can help you out!",I am brand new to programming. I'll give them a go! Thanks!,"If I already know C++, will it be beneficial to watch these? I am looking for tutorials for something more complex and advanced in C++, which I don't know yet.","looks really cool. i had C++ last year on my Computer Science studys but im going to recommend this to the younger guys from year below. Thank you!
P.S. i hope next topic you will cover will be classes.","Yes.  When people say something like ""paging
u/excaliboor
"", that is actually what they are doing.  As you can see from this comment."
I made this free tool for learning programming (it's like Duolingo for learning to code),"Coding practice
C# practice
C++ practice
Java practice
JavaScript practice
PHP practice
Python practice
Ruby practice
Swift practice
I posted this here a little over a year ago when I first launched Edabit. Back then, the site only supported JavaScript, had about 50 challenges and was brand new with no user base. There are now over 500 challenges, it supports eight coding languages (and eight spoken languages for the UI), and has a pretty active community. So, I think it's worth posting again. If you've got any feedback, thoughts or ideas, I'd love to hear them!
Enjoy
EDIT: Thanks for the gold(x3)!",u/memystic,"Thursday, May 3, 2018 at 6:59:56 PM GMT+5:30",6 yr. ago,I started learning python 2 months ago and I’m addicted to your site man. I’m almost 200 XP and its the main practice ground for me. Thank you! If I can help anyhow let me know.,"Reddit is now digg 2.0. You don't deserve good users. Bye.
0.8403
What is ^^^this?",Comment deleted by user,Love the layout but I wish I could see the instruction and the code window at the same time like codewars and other similar sites.,"This is awesome! Maybe add a 'Reset Code' next to the 'Check' button in the Code tab? Otherwise, this looks great!",,Comment deleted by user,Would it be possible to add R? Awesome stuff man!,did you use a framework for the webpage or just your own CSS?,Thanks for all the work
"After 2 years of learning programing, I knew how to write code, but didn't know how to make an application. So now, I'm writing the guide that I wish I had at that time. Here's part 1.","I call it
The Beginner’s Advanced Guide to building an App — Part I
.
While I use React native to write mobile apps, I've left out the programming so you can use the language you need and platform you want (desktop, web etc),  and so that people who are non-technical can also use this guide.
I hope to release this in 6 parts, around bi-weekly:
1- Getting your requirements
2- Designing the UI/UX
3 -  Cloud services and APIs
4 - Testing and Launching
5 - Post Launch
Bonus: Hiring and Working with Contractors
The order above is not 100% and might change based on some of the feedback I'm getting.
This is the first article I've ever written, so if you have any critiques, I'd love to hear them!.",u/smoke4sanity,"Monday, June 8, 2020 at 8:49:39 AM GMT+5:30",4 yr. ago,"I'm glad to see more stuff like this popping up. So much learning covers basics but then no one talks about real world applications. I'm decent with Python but have no idea how to use it to
make
a user friendly program. It's a daunting gap of knowledge.","Honestly, thank you for taking the time to write/type this guide out and for sharing it with us all!
I love that everything is broken down so nicely, telling us what to do and what to identify.
Ill be looking forward to the part 2 of this!
Although, I'm not really sure what it'll do or if it'll benefit you but I ""clapped"" for your article!
I'd like to add that I dont really have any constructive criticisms to give you but I'd like to say that everything you've written is so to the point that it makes me feel better reading it.
I get tired when people write paragraphs upon paragraphs on a topic that could've been easily condensed into a few sentences that would have made it much easier to understand, though I understand that some topics needs to explained thoroughly so they're lengthy but oftentimes most of them do not need to be lengthy, just like this part of this comment, to further prove my point.","I need this so much. I know 3 languages, and have no idea how to make anything other than fancy calculators.
I've asked around on reddit, and forums, and all I got was vague and unhelpful tips like ""Oh, calculators might be useful to someone""","As a student that is juggling many projects this is a coherent guide, and easily understandable to share with my group. I LOVE this, and really broadened my understanding of how management of tasks could be achieved. Thank you !","This looks really great.
Consider publishing it somewhere in addition to Medium.
Medium is a cash grab and actually blocks your content from people in their attempt to charge users.",How do you work with the security aspect of webapps and mobile apps? Anyone building apps may or may not be aware of testing if there are security flaws. How does one deal with it and how do you deal with them?,Thanks for this! I've been learning on and off Android app development for about 2 years now and I think I have a pretty good grasp of it (still much to learn though!) But what I've struggled with most is putting the basics together to form a coherent app and user experience. So I'm really looking forward to your further installments :),"I've been struggling with this for quite some time. I would say I have some intermediate knowledge about my programming language of choice but I find it hard to plan projects... That's my biggest problem with courses and books about programming. Its sooooooooooo hard to find a course about programming that actually talks about how to plan projects and how to train your brain to think like a programmer(most of them just have a little chapter or a very little 10 minutes lecture on algorithms). I've been looking into content and talks about Computational Thinking/Algorithms lately and I found 3 books.
If anyone is interested:
Think Like a Programmer
: An Introduction to Creative Problem Solving - 2012 (this one got lots and lots of code with C++ samples; talks about a problem and asks you to develop an solution for it!
very practical
book).
Computational Thinking
: A beginner's guide to problem-solving and programming - 2017 (
very theoretical
and talks a lot about the process of planning/developing/arriving at a
solution
""
that a computer can execute""
; kinda hard to understand this book if English isn't your first language :P).
Computational Thinking
: First Algorithms, Then Code - 2018 (I haven't started this one yet but it looks like its a mix of the other 2 and a bit of commonly used algorithms).
I hope this information can help you in any way like its been helping me develop this
meta skill
:)","You’re a hero.
After two years in college I asked how to make an application but my professors didn’t know what I was talking about. I literally didn’t have the vocab to describe it",I’m a UI/UX designer if you’re looking to hire one :)
I was pissed at Comcast(Time Warner) so I wrote another python script - This one tweets poor speed test results at them.,"https://github.com/mrpappas/squeaky-wheel
A couple days ago I posted a python script that monitored / logged my modem levels and a few people had mentioned
this guy
who had set up his twitter to automatically tweet speed test results at his ISP.
I thought that was hilarious and also a cool project so I gave it a wack myself.
The script uses the same test the new Google Speed Test widget runs from
M-Lab (Measurement Lab)
and if the results are below the specified threshold it sends out at tweet to the given ISP.
Example output
Original post:
https://www.reddit.com/r/learnprogramming/comments/5hl7ao/comcasttimewarner_was_pissing_me_off_so_i_wrote_a/",u/leonardnimoyNC1701,"Wednesday, December 14, 2016 at 7:52:02 PM GMT+5:30",7 yr. ago,"I like what you're doing.
I'd make some code structure tweaks. First, in all your classes you have an odd mix of class variables and instance variables.
When you do this:
class SpeedTest(object):

    download = """"
    upload = """"
    latency = """"
    jitter = """"
You're defining class variables here. And then later accessing them as instance variables. If you're limiting things to only one instance it's still better to use instance variables here, by initializing them in an
__init__(self):
function.
class SpeedTest(object):
    def __init__(self):    
        self.download = """"
        self.upload = """"
        self.latency = """"
        self.jitter = """"
Second, in your
__main__
, you 1) make a SpeedTest instance, 2) call its init_driver function to initialize a driver, then 3) call a method of your SpeedTest instance and inject that driver back in as a parameter.
That's kind of wonky. What I'd do is have a separate class that would create and initialize a driver, then create a SpeedTest object with that driver as a parameter:
if __name__=='__main__':
    driver = DriverFactory.createFireFoxDriver(wait=5)
    speedtest = SpeedTest(driver)
then
class SpeedTest:
    def __init__(self, driver):
        self.driver = driver
It makes sense since your SpeedTest class can't do anything without a web driver, so you can constrain instantiation to require a driver. Then you could easily test other web drivers if you so needed.
Third,
Some naming schemes don't sit well with me.
speedtest.get_data()
Implies that it would return some form of data. But that's not what's happening. Also, what happens if you call
get_data()
before you call
run_test(driver)
?  It looks like you'll just log that you couldn't find the data, which is good, but there's probably a safer way to deal with the workflow here.
Anyway, it's a good script. There's a lot of room for improvement and plenty of ground to get lost in feature creep ;-p","Very cool!  If you have an interruption will it tweet them when it comes back online?  ""Just so you know, ISP, my service was disconnected last night from xxxx to xxxx.""",This is amazing.,"I
almost
wish my ISP was crappy enough to run these.
Almost.
Thanks charter! Always get my advertise speed (and often more!)",Now if only it included a test for high latency and jitter. One of my client's Comcast connection has not suffered from bandwidth drops but it has from high latency during peak hours. I have seen latency measurements approaching 100ms and jitter of about 80ms. This makes VoIP calls and video conferences difficult.,"Your title is confusing.
Time Warner and Comcast are not related. Charter absorbed TWC and Brighthouse. Comcast is off doing its own thing, completely separate from everyone else like they always have.","How do you account for other devices using bandwidth (cell phone sync'ing photos over wifi, for example) while your script runs?","How dare you! Have you not visited XfinityFACTS.com? In your arrogance and hubris, you question the benevolent service of Great Leader Comcast. Your treasonous ways shall be your undoing!
Just check out this tasty
FACT
for your brainspace! Case closed. Now swear your fealty to Great Leader Comcast and perhaps you will be allowedd to live out your days at the
labor camps
service centers, working in service to the People's Champion. Great Leader Comcast is most merciful and wise.","I can't be the only one that loves the fact Verizon replied to your cancellation tweet. That's pure gold -
https://twitter.com/A_Comcast_User/status/780951637741318145","I don't have speed issues with my Comcast, just losing internet all the time, so much so that I paid $10 just to get a program to track it.  I was working on programming my own but I was kind of on a time crunch so I could go to them with some kind of proof.  I work from home so internet is kind of a big deal, not to mention I don't have cell service at home so if I lose internet I lose my cell signal from my Microcell as well.
Here's an example of my internet loss this month:
Date
Failure Start
Length
12/1/2016
8:53:39 AM
0:02:24
12/1/2016
9:26:40 AM
0:14:56
12/1/2016
9:54:25 AM
0:00:34
12/1/2016
9:55:31 AM
0:04:55
12/1/2016
11:01:10 AM
0:01:31
12/1/2016
11:03:13 AM
0:01:01
12/1/2016
11:08:51 AM
0:00:08
12/1/2016
11:44:13 AM
0:00:09
12/1/2016
11:49:30 AM
0:07:32
12/1/2016
11:57:34 AM
0:03:08
12/1/2016
1:15:40 PM
0:00:08
12/1/2016
1:22:58 PM
0:00:27
12/1/2016
5:19:21 PM
0:00:10
12/1/2016
5:30:30 PM
0:32:22
12/1/2016
6:04:57 PM
0:00:09
12/1/2016
6:09:46 PM
0:03:30
12/1/2016
6:15:20 PM
0:00:06
12/1/2016
6:55:44 PM
0:00:11
12/1/2016
6:56:49 PM
0:01:16
12/1/2016
6:58:37 PM
0:00:17
12/2/2016
1:28:14 PM
0:04:25
12/2/2016
1:45:58 PM
0:01:53
12/4/2016
9:01:45 AM
0:00:11
12/4/2016
9:02:29 AM
0:00:24
12/4/2016
1:33:38 PM
0:20:43
12/4/2016
1:57:58 PM
0:00:06
12/4/2016
4:18:05 PM
0:02:11
12/5/2016
11:00:25 AM
0:03:29
12/5/2016
11:05:28 AM
0:02:38
12/5/2016
11:08:39 AM
0:00:15
12/5/2016
11:10:28 AM
0:01:16
12/5/2016
11:12:17 AM
0:00:09
12/6/2016
4:55:19 PM
0:00:06
12/7/2016
7:07:12 AM
0:00:07
12/7/2016
10:51:13 AM
0:00:42
12/7/2016
10:53:29 AM
0:00:05
12/7/2016
10:59:14 AM
0:00:21
12/7/2016
11:18:30 AM
0:00:10
12/7/2016
11:21:18 AM
0:01:50
12/7/2016
11:23:40 AM
0:00:42
12/7/2016
11:27:01 AM
0:00:17
12/7/2016
11:27:50 AM
0:00:22
12/7/2016
11:28:45 AM
0:06:58
12/7/2016
11:40:18 AM
0:01:00
12/7/2016
12:00:57 PM
0:00:14
12/7/2016
1:39:56 PM
0:03:54
12/7/2016
1:44:55 PM
0:00:14
12/7/2016
1:46:46 PM
0:00:05
12/7/2016
1:47:23 PM
0:00:11
12/7/2016
1:48:06 PM
0:01:25
12/7/2016
2:09:31 PM
0:00:51
12/7/2016
3:09:01 PM
0:00:56
12/12/2016
2:05:00 PM
0:00:50
12/13/2016
9:14:08 AM
0:00:34
12/13/2016
9:16:15 AM
0:02:03
12/13/2016
9:20:22 AM
0:00:17
12/13/2016
9:26:47 AM
0:01:01
12/13/2016
9:28:50 AM
0:01:29
12/13/2016
10:46:11 AM
0:03:47
12/13/2016
10:58:08 AM
0:00:18
12/13/2016
1:23:13 PM
0:00:06
12/13/2016
1:23:51 PM
0:01:48
12/13/2016
1:26:11 PM
0:00:57
It doesn't happen every day, but it happens often enough.  No real explanation, Nov 21-Dec 1 I had enough outages each day that they refunded me 10 days of service.  Not much money but it helps I guess."
"Spent the last 100 days learning to code, and told no one","Hey Reddit, this is my first post ever. Seems like a cool community so I thought I'd share my story.
I started coding January 17, 2020, I’m now 101 days in.
An interesting side note:
In the past 100 days, I have told no one what I was doing. My friends, family, girlfriend. No one knows that I'm learning to code. So you’re actually the first.
Learning To Code
I wanted to document, both quantitatively and qualitatively, what it’s like to learn coding. For anyone completely new to this, I hope it helps. To any vets,
your feedback is incredibly valuable.
To begin, I started from actual zero. I didn’t know what a <div> was, a function, loop, the difference between front-end and back-end, and honestly I think I had never used a curly brace in my entire life.
I began reading blogs, detailing people’s personal journeys with coding. The most influential, for me, outlined how she became a developer in 1 year, making several original web apps along the way. She estimated her time spent learning to code (having documented every day she actually spent learning) around 300 hours.
When I actually committed to this Project, I oscillated between “how
fast
I can learn this”, and  “how
effectively
I can learn this”, the latter was without a consideration of time (and not to be confused with how efficiently can I learn this). I created a plan, knowing well that things would change as I moved forward. In the time since starting I've more or less kept to the original concept while tweaking details along the way.
Base Level Plan
I determined with focused practice, 3 hours a day, every day for 100 days, I would reach the 300 goal in, more or less, three months. Getting to the bloggers (who I based much of this project around) proficiency. I reached that today.
I still have quite a bit of work to do.
Second I determined
FOCUS
was probably the single most important variable. It seems that many people “work” or “study” for much longer hours (I believe much of which is hyperbole), and see diminishing progress.
An analogy that I like to use is, if you give a bodybuilder and a novice the same weight to work out with, will they achieve the same results (or more specifically will they achieve equal muscular stimulation?) The answer is obviously no. Rest time between sets, movement quality, heart-rate, range of motion, time spent in eccentric vs concentric are all variables in the gym. All to say that, how you use the tool (time, in this case) is equally, if not more, important than the tool itself. Reducing all of “learning to code” down to  “time spent” simply  wasn't a helpful metric alone.
So what did this mean?
Study Sessions would be no longer than 1 hour. After which I would take between 5-15 minute break before starting the next session.
All notifications would be turned off every device I owned. None of the tools I would use would even
have the ability to
distract me.
Using a focus app (Forest for IOS) I would set a timer before I started a Session, and then leave my phone in the other room. This allowed me to track actually time “in-focus”
No other tabs would be opened. If I had a question, I would simply jot it down, and move on. (This became painful later on when trying to diagnose errors, but led to more time trying to reason through and solve problems in my own code.
i.e. a super important skill
)
Focus Stopped
If I saw that my hour was up, regardless of where I was in my lecture or in my code, I would stop.
My focus broke. I would count this as any time my mind wandered in any way.
If I started thinking about problems at work.
What I was going to have for lunch.
If I was working in a coffee shop and started eavesdropping on someone else's conversation
If I started fiddling with things on my desk, or daydreaming of any kind.
If my focus extended beyond the 60 minutes (which happened on the rare occasion I truly lost track of time. Usually deep in a project) that time would count. Thus leading to the possibility of 90/60 minutes of focus or a 150% focus for that session.
Side Note:
I used a screen time restriction on all social media to 8 minutes a day, across all devices. I can’t attribute this to better focus (since I didn’t also conduct this independently while having a limit of, say, 2 hours) but I think it definitely helped, at least my mental health.
The Three Phases
I split my learning into three distinct Phases.
Each Phase is 50 days long. Split into five, 10 days Sections.
Phase 1- Learn
The learning Phase was all about figuring out “The right questions” to ask.
There was so much (and still is so much) about this world that I don’t know or understand. Learning the fundamental concepts was the first goal.
With that understanding I could begin to create a mental map of the road ahead, and more importantly find better tools to help me along my way.
There were some hiccups here, with direction.
For example, I started with CSS, then HTML, then moved to JS, then React. Realized I didn’t know enough JS to learn React so went back to JS. Learned some Node and Express, then back to React.
Phase 2- Practice (Where I am now)
The goal of this Phase is to create as much as possible.
To make things, either through code alongs, prompted projects, and even personal projects and experiments.
One of the best tools for this was learning a new method, and then the next day (leaving a little time to forget) test myself by trying to build a small, invariably ugly little application using it.
Many of my apps are beyond hideous. Inelegant code, little to no styling, but every once and a while I’ll write something and just look at it thinking “Wow, that’s actually pretty badass”
Phase 3- Build
This is all about building big, fully functional apps.
Working only projects that take weeks or even months to fully see realized. This is about trying to simulate, as close as possible what it’s like to
actually
be a developer.
Tracking
When I started, I didn’t even know what would be important to track. So things have grown, quite a bit, since day one. I spend about 3-5 minutes updating my spreadsheets before and after my hour-long Sessions. As well as 15 minutes at night writing a summary of everything I learned that day.
Here’s a link to Phase 1 and 2 Tracking as of today! There are accompanying Google Docs with notes, and summaries of what I learned everyday.
Phase 1 Notes
https://docs.google.com/spreadsheets/d/1eMZ9JO5CA_kuagzTasagde46jVcUmJkipsnG9dKTWD0/edit?usp=sharing
Phase 1 Focus Tracking
https://docs.google.com/spreadsheets/d/1Rh78qLXiL_MfllhI1OwbKKvvn0JXfH4avYP7TbACmcM/edit?usp=sharing
Phase 2 Comprehensive
https://docs.google.com/spreadsheets/d/1gN73DpRbQrBIPO4CAmNPcWBsE-9A8prEZWtOeY0-rUs/edit?usp=sharing
Tools
Before listing out the Tools I use, I really want to warn you if you're thinking about starting on this journey. It’s not about the
specifics
of the tools. It really isn’t, and it's hard not to get caught up in that. It’s about the application of the knowledge, thats where the real learning happens.
When you JUST start out, find an instructor online that you like, and make sure the course is up to date. Those two will get you 80% of the way there. Keep moving forward, momentum is your friend.
As you’ll see below, I like Colt Steele, his style is great BUT at this point I’ve realized I need to see other people write code. So in addition to learning new material during a course, I’ll search on YouTube for the same
specific
topic that he's teaching, and watch how other people implement that technology. There are so many ways to do the same thing. Now..... tools!
Tools
Codecademy
I used the editors on here to complete HTML, CSS, JS and React.
This and FreeCodeCamp are where you start.
FreeCodeCamp
What’s nice about them is the blogs that are featured on their site.
I also signed up for their newsletter which features some interesting articles and quick reads to expose you to more of this world.
YouTube
Avoid at all costs, honestly.
Now obviously you’ll need to go here, but youtube is kinda like the slimy underbelly of learning to code. You go in for something that you need, but (quite literally by design) you’ll be enticed to stay, go off on tangents, and start thinking to yourself “Hmm I wonder what extensions he’s using on VS Code” or “Wow, I do need to know the top 7 tricks that ex-Facebooks used to get an interview”
Get it, get out. Other than that, there are a few good Youtubers, who have udemy courses. Which leads me to...
The Web Developer BootCamp (Colt Steele Udemy)
Great, great, great introduction to full stack web development.
Slightly outdated. In all honesty I cut it short when it came to the backend because almost everything they were discussing and tools they were doing needed to be modified in some way.
At the time I wasn’t great at reading documentation, so I ended up spending more time trying to make code compatible, than actually progressing through the course.
Modern JavaScript BootCamp(Colt Steele, Steven Gridder Udemy)
This was a doozy, directly after The Web Developer BootCamp. It rehashed alot of the same topics, but with new examples and updated JavaScript syntax which is nice.
The Modern React BootCamp (Colt Steele, Udemy)
I’m still working on this now. So far, I would give it (and plan to) 5 stars.
In addition I just bought
The MERN fullstack guide (Maximilian S.,  Udemy)
CSS- The complete guide 2020 (Maximilian S., Udemy)
Beyond this, in my notes I list specific documentation I read on a daily basis, blogs, and specific YouTube videos.
Goals For Phase 3
Next as you can see I’ll be working on both deepening my understanding of backend development, as well as design and CSS. Kind of seem at odds right?
Goals
Post more on Reddit
, and get more involved in the community (timing is pretty awful, I know).
Create projects and seek feedback from other developers.
Have actual conversations with developers and in an attempt to uncover my blindspots, and to help tweak my trajectory.
Publish on Github.
Build something aesthetically pleasing (lol).
I hope this was helpful if you’re just starting out on your journey. If you have any questions for me, please feel free to reach out. I’d love to talk to someone about this, considering I haven’t in the past 100 days.",u/zac_solo,"Tuesday, April 28, 2020 at 2:02:59 AM GMT+5:30",4 yr. ago,"Congrats man! I’m “learning” to code, and my parents think I’m some kind of prodigy, but I haven’t even touched my editor since school got out. I’m glad you have the dedication to learn something that I don’t. But I may revisit it after this post! Thanks for the motivation!","I’m convinced there is something super valuable about not telling anyone about the work you are doing.
I am trying to decide how to best go about learning to code currently and will use this post as guidance. Thank you!","CSS- The complete guide 2020 (Maximilian S., Udemy). I hated this course so much. Zero sense of aesthetics. The project and examples are so ugly. Just so hard to sit through. I dig Max's stuff but this one is so bad! Colt has a new series on youtube, I suggest you do that instead and get a refund for this.",Comment deleted by user,"This might be a little early for you, but something that can truly help your programming and software development skills is the (free) Nand2Tetris courses on Coursera (Part 1 and 2). Part 1 gives you an understanding of the hardware and logical fundamentals that underlie all software, by walking you through the process of designing a very simple computer from scratch. Part 2 walks you through creating a programming language of your own - understanding how languages are built and work under the hood can help you to appreciate the most effective ways to use them.
The course is really well put together, with all sorts of materials available, and taught me a lot. It takes a task that seems gargantuan (creating a game of Tetris by first designing a computer and various levels of programming language) and make it really achievable - even if you have to scratch your head a fair bit too get through it at times!
Good luck, and stay motivated
Edit: typos",,This is incredible. I suppose I should invest some time in a lesson plan because random spurts aren't getting me going as fast as I'd like.,"I honestly don't get why people shit on YouTube so much. It's honestly the only thing you need to learn programming. You will find literally everything about anything, and if a video lacks in explanation just do what actual programmers do and look up the documentation.",I've been too depressed to learn how to code. I wish I could make better use of my time. And also I'm really afraid I'm going to work super hard for no reason and not get a job or have that job be minimum wage or something. Everyone is learning how to code and I don't have a degree either.,"Based on the fact that you wrote this: ""figuring out “The right questions” to ask."" and ""YouTube: Avoid at all costs, honestly."" - I think we can all agree you've learned, how to learn. I propose we bestow the title 'developer' to OP. Congratulations on the success."
I (self-taught) had my first-ever interview for a web dev job yesterday. Here is what the interview was like and the questions I was asked. [Long],"[Interview questions at the end]
Hey everyone,
Long-time lurker, first time poster. I see a lot of posts on here asking about what it takes to become a self-taught developer and what you need to know to get your first job. I appreciate reading the detailed answers people give, and I find comfort in seeing that I might be on the right path in my learning. In an effort to contribute to the community here, I thought I would share my first interview experience. I hope this is helpful for some of you out there. I'll answer as many questions people have as I can.
Here's the context:
Me:
I am self-taught, in my 30's, with zero professional software development experience.
I have a bachelor's degree in a non-tech field (linguistics).
I have 10 years' experience teaching English in Canada, no formal tech experience.
I have done freeCodeCamp's Responsive Web Design course and The Odin Project's Foundations course.
I am 38% finished with The Odin Project's Full Stack JavaScript curriculum, but I have jumped ahead to learning React through a Udemy course (Zero to Mastery).
I have one project to speak of. It's a meal planning web app where you can input recipes, and then add recipes to a meal plan and populate a grocery list from the ingredients of the recipes in your meal plan. It's a mess of an app. It was kind of a learning playground for me, and it's missing a lot of functionality. I only started organizing my files properly halfway through writing it, and I also switched to writing it in TypeScript halfway through after I watched a 40-minute intro to TypeScript video on Traversy Media's YouTube channel. I'm currently working on rewriting the whole thing in React + TypeScript. This is a personal project that I made to meet a need in my own life.
I have been applying to jobs casually as I learn, mostly through Indeed and LinkedIn, but occasionally I'll put more effort into a cover letter for a local company or a job that I think I have a realistic chance of getting.
I've done over 100 applications, and I have had positive responses from 3 companies
, with 2 of which I didn't get past the first stage.
For this company, I wrote a tailored cover letter.
The job:
Junior Full-Stack Developer (Remote)
Requirements in the posting:
Bachelor's degree (field not specified)
1-4 years IT industry experience
Experience in one or more JS frameworks
Experience in one or more backend languages
Listed nice-to-haves:
AWS/Azure/Google Cloud, Docker/Kubernetes, API Gateways
*Posting included salary range and a list of benefits
The interview:
This was the
third stage
of the interview process, the Technical Interview. First was a screening call with the HR person. Second was a coding test on
HackerEarth
(which I failed the first time but was allowed a second try with a different set of problems because I had been just below their required score). It took them 3 weeks to schedule the tech interview because the senior devs were busy or taking time off (or no one wanted to do it?).
The interview was done over Google Meet, and it was scheduled to be
45 minutes
. There was one interviewer, a senior dev, who kept his camera off. He was friendly but sounded tired.
After asking me to briefly introduce myself, he got right into the questions. I got the impression he was reading from a list of questions by topic, and he chose the topics based on what I had on my resume and what I had mentioned in my introduction.
The questions:
*(Questions in bold are ones I didn't know or didn't have a great answer for.)
JavaScript
What are the different types of variables in JS? How are they different from each other? (This one confused a lot of people. He was looking for distinctions between var/let/const)
What are some different ways to create an object in JS? (eg. Object literal, new keyword)
How can you get the type of a variable in JS? (typeof)
Can you tell me the difference between == and ===?
Do you know what arrow functions are?
How are they different from traditional functions?
(I said I had read about this (true) but couldn't remember off the top of my head.)
What can you tell me about 'callbacks?'
TypeScript
What are some features of TypeScript that JS doesn't have?
What are some disadvantages of TypeScript?
What can you tell me about access modifiers?
(I said I didn't know what they were and asked if he could tell me. He gave an example, 'private,' which I had seen before. I said 'Oh ok, like public and private functions. I haven't used them yet, but I imagine private functions are meant to be restricted from any user access or modification, which he said was more or less correct.)
React
Why do we say, 'Everything is a component' in React?
What are some advantages of using React?
What can you tell me about JSX?
What's the difference between 'state' and 'props?'
What is the difference between a 'stateful component' and a 'stateless component?'
What is the difference between DOM and Virtual DOM in React?
What is React Router, and why would you use it? (With this one, the interviewer seemed satisfied with my answer for why being that with Router, you can persist certain elements on the page while changing or re-rendering others that you include as subroutes. For example, the navbar can remain while having the main content of the page change. The navbar won't need to re-render as it would with basic anchor tags to separate HTML pages, which can improve performance.)
What are 'events' in React?
How are they different from events in JS?
What is a 'higher order component?'
What are 'mixins' in React?
(Didn't know. I said I know what they are in SASS, so he asked me to tell him about mixins in SASS)
Have you used Redux? What can you tell me about it?
(My answer was that I am just learning about it now (true), and that it uses 'actions' and 'dispatch' functions instead of hooks for updating state)
Databases
What can you tell me about different kinds of databases?
What experience do you have with different databases?
Backend
What experience do you have with backend languages, like Node?
(My answer was 'Not too much yet, just a little with Node, but I'm really interested in learning as much as I can because I find the full stack really fascinating.')
There were a few more questions about JavaScript and TypeScript, but I can't remember them all. The last question about backend languages was at about the 35-minute mark. Then he asked me to show him my project through screen share. I took a few minutes to show him all the functionality. He asked if I had coded it all myself or used any templates (100% designed and coded by me). Then, he said the interview was over and asked if I had any questions. Salary and benefits were listed on the posting, so I asked some light questions (What's their team structure like? What does the company name stand for? (It's an abbreviation of letters, but its meaning wasn't listed on their website anywhere I could see. I wanted to show that I was curious.)
Now, I'm waiting to hear the result. I don't expect to get the job, but I enjoyed the experience of the interview despite the stressfullness. I'm glad I now have some idea of what to expect and what I might need to be able to talk about for future interviews.
I hope this is helpful for some of you other aspiring programmers/developers!
Edit 1: formatting
Edit 2: added other JS questions I remembered about callbacks and ===
Edit 3: Some links to interview prep questions from comments and ones that I read before the interview:
https://arc.dev/developer-blog/reactjs-interview-questions/
https://github.com/sudheerj/reactjs-interview-questions
https://github.com/sudheerj/javascript-interview-questions
https://github.com/DopplerHQ/awesome-interview-questions
Edit 4: Thank you everyone for the upvotes, awards, and comments. I'm glad this was helpful! I'm headed off now, but I'll try and answer any other questions people have later tonight.
Edit 5: Clarified a couple of the questions",u/jojawhi,"Saturday, June 4, 2022 at 1:33:59 AM GMT+5:30",2 yr. ago,,Thank you for the links. I added them to the end of the post along with a couple question lists that I used to prepare for the interview.,Im not in js nor frontend. But this kind of post are really helpful.,Extremely helpful! Thank you!,"Thank you for psoting this.  I am self taught too and been applying for 2 months now with no one reaching out to me  It's a bit disheartening but seeing what they asked you has me scared because I feel like I cannot answer most of those questions.  So perhaps I should stop applying and keep my studies going for now.  Even after completing an online bootcamp and doing UDemy courses, it seems obvious to me now that I still don't quite know what I am doing.  This was a big eyeopener and I really appreciate you taking the time to write this up for all us beginners!","The best advice I can give you is to try to build a project of your own. I felt like my understanding of a lot of concepts solidified when I had to try to figure out how to make things work without the crutch of a video to tell me how, especially when I added Firebase to my project. I didn't know what a promise in JS was before I had to use them to make Firebase work. I read a lot of docs and StackOverflow topics, and it still sometimes took me hours or days to figure out bugs. I was able to stick with it because it was my own project, so I was more motivated to make it work.
Good luck in your learning and your job hunting. Stick with it, and keep applying as you go.","OP advice about building your own project is super critical. I self taught (still have much to learn) my self enough python to move from my last job to my current one. However, for like maybe 3-4 years i was on this on and off path were I would start a course and then a few lessons in I would stop(for various reasons) but one was definitely that I didn't feel I understood what I was learning (from reading many comments it seems thats a common theme) It was not until I was at my last job (which had nothing to do with programming) that one day I was fed up with redundant time consuming task and I went back to learn and applied as I went (I suppose that was my project) and everything finally began to click and I began to understand it and enjoy it. So my take away is start a project and find something you have an interest or something that is relative as your project. That will make the learning experience easier. Sure you can pick a random project but if it has no personal meaning or ties to you it might just be tedious. Hope my 2 cents help. :) either way keep applying you never know when someone might be looking for someone they can teach on the job.",,"I'm still kind of a noob myself, but I find it interesting he asked you about mixins. My understanding is that they haven't been common to use with React in years (long before I started learning the library) and have been replaced by hooks. Higher order components (again as I understand it) aren't as common these days because they've been largely replaced by hooks as well. Speaking of which, it's interesting that they didn't ask you about hooks at all.
It seems like their React questions are a couple years out of date.","Unironically the best post I've ever seen on
r/learnprogramming"
"I'm 32 years old, and just started my first full-time job as a developer. One year ago my programming knowledge was basically nil. Everything I learned, I found via /r/learnprogramming, so just wanted to share my experience.","Just wanted to share my story here, in case anyone is interested.
About me
I initially started programming for fun, but quickly realised that it was something I could see myself doing as a job as well.  So I pursued it.
I've worked in the film industry for the last 8 years, and have been ready for this change for a while.  I reached a point in my career where I felt I had plateaued, and to be honest I felt a bit worried about my long-term financial stability.  The industry has gone through some very painful changes lately, and most people I know are quite worried.  Being self-employed was also starting to become a bit of a drag.
How I started
I got all my ""how to get started"" information from
r/learnprogramming
.  I read the FAQ, and then tried out some of the different courses that show up in the subreddit, including the Udacity programming 101, 'Learn Python the Hard way' as well as various Coursera intro courses.
I was definitely pretty directionless at first, and not really getting anywhere.  Eventually I saw a link on here for
The Odin Project
, so I decided to check that out.  Something about the program clicked, so I stuck with it - maybe because it's so focused, as it's geared toward skilling you up to be employable as a web developer.  (I'm not associated with the website, btw, other than that I've done the full course).
Key things I learned in the last year
It's extremely important to work your ass off.  If something is hard, then you need to learn it.  If it feels impossible, sit your ass down and work your way through it.  It's literally the only way you will ever learn.  Programming is the hardest thing I've ever done in my life.  Even now that I'm getting paid, I know that I'm still a total beginner.
The best way to get noticed is to talk about the things you've built.
The second-best way to get noticed is to talk like a human being.  All my job application cover letters had a pretty casual tone, which seemed to work - I got something like a 60% callback rate.
When you land an interview, don't be afraid to demonstrate enthusiasm.  Nobody wants you to be amazing, they just want to feel like you care, and like you can learn to be an effective programmer.  (Also it's ok to be nervous).
Make sure you have a GitHub and Stack Overflow Careers page.  LinkedIn can't hurt, but be prepared to receive lots of recruiters emails from there.
I worked my ass off, but I couldn't have done it myself.  My partner supported me, both morally and financially.
Career changes are extremely stressful.  It was hard on all my relationships, most of all at home.
Make sure you learn the principles behind programming, and not just a ""language"" or ""framework"".  If you do this, you will be able to pick up new technologies when you need to.  I learned mainly Ruby as well as RoR, but I landed a job as a Node.js developer because I showed that I'd be able to pick it up quickly.
Timeline of my progress
March 2014
Stumbled around trying to learn to program, trying all sorts of different things, including Python and Unity 3D
April 2014
More blind stumbling, but also some (limited) amount of learning.  Found out my partner is pregnant.  ""This career change thing better work out"" she tells me.  No pressure.
May 2014
Started The Odin Project.  Felt like ""hey, this is challenging, but a lot of fun"".  Made me feel like if I worked hard, I could really make this happen.
June 2014
Started learning Ruby scripting, OOP principles, etc.  This was probably the hardest part of learning programming for me - it felt like I was rewiring my brain.  I spent hours banging my head against the keyboard, trying to make my assignments work. I would be staring at something, unable to make heads or tails of it.  It was incredibly frustrating. I actually ended up taking time off from work, so I could spend more time on this.
July 2014
Had to work extra hard at my job to make up for the work I missed in June, so I didn't have tons of time for code.
August 2014
Again, not lots of time for code, but I did get to start learning Ruby on Rails.
September 2014
Lots more time spent learning Rails, and the principles of MVC.  Again, I took time off work to focus on my studies.
October 2014
Started learning JavaScript, which was actually somewhat straightforward as I felt I had a solid grasp on the fundamentals now.
November 2014
Wrangled a small part-time job writing a Rails-based CMS for a touring artist.  I was basically doing full-stack work for almost no money, but it's great experience.  I eventually ended up creating the back and front ends for a blogging, photo uploading, and event management system administered by a single user.  Also went to a big local careers fair, which landed me a few interviews.
December 2014
My partner and I have our first child.  No time for studying!  I ended up loosing out on some of the job interview opportunities as well as a result.  Such is life.
January 2015
Started studying again, solidifying my understanding of the principles I've learned throughout 2014.
February 2015
Started applying for jobs, while simultaneously working harder at film work than I ever have before.  Made a ton of money, landed a few interviews, did a few programming tests.  Did ok, feedback was generally good, but received no job offers.
March 2015
Film work dried up, but I interviewed and received a job offer with a startup looking for a Junior Ruby Developer.  However, I ended up rejecting the role, because they needed someone who was willing to work long and unpredictable hours plus unpaid overtime.  I'm not against those kinds of roles, in fact they're great for people who want to learn a lot - but I wasn't prepared to sacrifice time with my daughter this early in her life.
April 2015
The day after I turned down the job, I got an email from somebody who found my Stack Overflow profile, asking if I would like to come in for an interview.  The reason they were interested in me is because I had a film background, which was needed for the role.  They were upfront about the fact that I am probably too junior for the role, but it would be worth having a conversation anyway.  The meeting ended up going very well, and I started freelancing with them on a trial basis.
May 2015
I became full time with the company, after showing myself to be useful, and a quick learner.  The work is lots of JavaScript - mainly Node.js, which is tricky because it's not something I have ever used.  However, I've shown the company that I can learn quickly.  Now that I'm full time, I've got to prove that their faith in me is not misplaced.
EDIT
I posted this and went to bed.  Guess it kind of blew up, so I'm answering questions now :)
EDIT2
Thanks for the gold :)",,"Monday, May 4, 2015 at 2:58:55 AM GMT+5:30",9 yr. ago,"You should cross post this to
r/cscareerquestions
, I think they would be really interested in it, as this whole topic comes up so frequently there.
Also: Congratulations and Good Luck!","Wait, if you've only been programming for a year, you can still get a job as a developer? Is this typical?","What was the time commitment like? I'm a bit confused about your filming gig since it doesn't sound like a 9-5 job.
What projects did you put on your resume/cover letter?",Comment deleted by user,Comment deleted by user,Perfect timing.  About three different threads have popped up just today asking about what it takes to get started from scratch without a degree.,People recruit on LinkedIn for developers with no experience? How did they find you?,"Thanks for this post.  I'm 32 and have been working hard on my programming skills the last few years.  I've worked on a couple personal projects and more recently have written a Python/Angular web app on the side at my current job.  I'm looking to get into a full time position as a developer, but it's tough to find the right fit without the job experience to show.  It's nice to hear that it can be done even when busy with other life responsibilities.  What were some resources you used to land interviews?",Salary?,"This is huge inspiration to me, thanks for sharing. Keep up good work!"
"Huge list of Computer Science courses with video tutorials, compiled from all over the internet.","I came across this Github a year back and I've always referred to it when I want to learn something about some area of Computer Science subject I'm taking at college.
I hope this resource helps you as much as it has helped me.
Here's the link:
https://github.com/Developer-Y/cs-video-courses",u/faizanchaki,"Saturday, August 26, 2017 at 8:07:36 PM GMT+5:30",6 yr. ago,Comment deleted by user,Anybody else ever feel overwhelmed by how much there is to [possibly] learn?,'Compiled' ayy,Comment deleted by user,Anyone know of a non-video compilation of similar magnitude?,"I found this
http://blog.agupieware.com/2014/06/online-learning-intensive-bachelors.html?m=1
Thought it was interesting",This is so great! Just today I finished another course and started looking for something else to follow. The timing couldn't be better for me :),Anyone have any recommendations for courses to check out? Any to avoid?,feeling pretty proud that my alma mater is featured on some of these lists. Thanks for the compilation,These are all in top-to-bottom order right? I might end up dumbfounded with mixed orders of lectures.
"Guys, I did it. After a year, a bootcamp, a bunch of rejection, I got a job working as a dev in a language I don’t really know on a platform I don’t understand.","I’ve never posted here, but I’ve lurked a long time. I’m 30(M) from central Alabama in literally the middle of nowhere. I’m posting to hopefully provide a positive underdog story.
I started my development journey learning C# about a year ago. I was in trade school for CNC programming and had worked at a machine shop for 12 years. As of right now I haven’t graduated. I joined a .Net bootcamp and struggled through most of it, but did manage to graduate about a month or so ago. I built about 40 or so projects, 90% working off the bootcamp projects.
I started putting out feelers on LinkedIn, randomly applying for jobs, reaching out to recruiters, all that. I finally got a bite with a guy that had an entry level dev job available and was willing to set me up with an interview, but the pay wasn’t anything more than what I was making as a machinist, and the job was 70 miles one way. But I figured why not, I could use the interview experience.
I get up there and the interview is going about how you expect. Brain teaser type questions, whiteboard stuff. I felt like I was bombing it. The job itself is mostly writing JavaScript on a platform I had literally never heard of. I was brutally honest, about my education, my blue collar background, everything. I figured walking out that I had bombed it.
They called me a few days later and offered me the job. They said they appreciated my approach to the interview, and thought my background could be an interesting addition to their team. I just finished my first week and it’s been amazing. Three days remote, two in office, flexible hours, really well managed from what I can tell. Totally different world from the machine shops and foundrys I’m used to. Now if only I could get my ears to quit ringing when I’m in the office, but maybe that comes with time.
The reason I’m posting is to say that if this college dropout, machine shop redneck from Alabama can pull this off, you can too. Don’t ever give up, and be honest about who you are in the interview. Good places run by good people can overlook things like that.
Edit: Since people keep asking the bootcamp was TrueCoders down in Birmingham.",u/DogfaceJake,"Saturday, April 30, 2022 at 4:37:44 AM GMT+5:30",2 yr. ago,"a language that I don't really know on a platform I don't understand
You will get it. It is totally acceptable for a Junior developer to learn many new things when he starts working. Even if you would graduate from CS studies then there would be still a certain gap between what is being taught us in college and what is used on the industry level. So there will be a lot of learning from your side.","I appreciate the reply, and it’s kinda funny that I said a platform I don’t know because I don’t know any of them anyway. The last week has been a whirlwind of training. I’m just doing my best to retain things at this point.","Thank you for this post, also from Alabama trying to get into  the IT field. This post is inspiring honestly, good luck at your new job you got this.","You got this! One good thing about being in the south is that it’s seems a little slower to catch on to tech trends. Plus with so many places hiring around the country remote, there’s something out there. Good luck!","Dude, I really needed to hear this right now, I’ve been struggling lately thinking I’m wasting my time and money on a pipe dream. This gives me a bit of hope. Thank you.","Please don’t give up! My whole family are blue collar trade workers, and they though I was absolutely nuts to quit my job and chase down a dream. You can do this!","Now if only I could get my ears to quit ringing when I’m in the office, but maybe that comes with time.
It doesn't, it's called tinnitus and you either learn to live with the ringing or play music AT A LOW VOLUME to just mask it out.
That's why ear protection is so important.",You’re absolutely right! I focused for years on eye protection and having the right boots and lifting correctly and I let hearing protection go to the wayside. And I’ll spend a lifetime making up for it.,You deserve it! Such a motivation!,Comment deleted by user
How students get themselves into tutorial hell and how to get the heck out of it.,"If you're learning to program, there's a good chance that at some point you've been stuck in ""tutorial hell"". It's an experience of doing more and more tutorials, but being unable to actually build anything. Many essays and videos have been made about this topic, but I've never seen someone else describe the perspective I'm going to share.
Tutorial hell is an unstable system of perceived incompetence caused by students using the wrong methods to fix the difference between what they know how to do and what they've been exposed to. That's a doozy of a sentence and I'm going to spend the rest of this essay unpacking it.
A quick review on stability. A system is stable when it will tend to return to some state. Imagine an apple in an otherwise empty fruit bowl. You poke it, and it rolls down to the bottom. That's stable. Flip the fruit bowl over and put the apple on top. You poke it, and the apple rolls off to the side. That's instability.
Incompetence just means not knowing how to do something. It also has a connotation of being dumb, but that's unwarranted. It's a temporary state. Learning is just going from incompetence to competence.
When you learn things, especially programming, there's a difference between what you've been exposed to and what you actually know how to do on your own. This makes sense. You wouldn't expect to look at everything just once and be able to do it on your own forever. The need for repeated exposure makes the group of things you've been exposed to much larger than the group of things that you can do on your own.
The difference between what you know and what you've seen causes perceptions of incompetence. ""I've done a React tutorial, why can't I make a React app? I watched that algorithm video, why can't I solve coding problems?"" This delta between ability and exposure causes anxiety in many students.
Where things go wrong is how students try to fix it. They reach for more tutorials, generally on more topics. ""I'm not getting React, maybe I should try Vue."" This only makes things worse. A tutorial on a new topic increases exposure faster than it increases ability. This increases the ability/exposure delta, increasing anxiety and self-perception of incompetence. You're learning more, but you feel like you know even less.
This is the unstable system. The feelings the student is trying to relieve (anxiety, perceived incompetence) are only made worse by the method they use to relieve it (more tutorials on more topics).
Part of the solution might be obvious at this point. You need to increase ability without increasing exposure. This will narrow the gap between ability and exposure, relieving some of the negative feelings. It also means you're actually increasing ability, which is the whole point of all of this anyway.
But how do you do that? The best method is to build things with the knowledge you already have. The easiest way to do this is through play. The most important aspects of play are that it is self-prescribed and enjoyable. You have to decide what to do for yourself and you have to like it.
It's common for students to say ""I don't know how to actually make anything!"". They've defined ""anything"" to mean the peak of what they've been exposed to. Maybe that's a full blown web app. That's not what ""anything"" means.
Can you make text appear on a web page? Can you write a script that tells you if today is Christmas? Then you can make something. Make those things of your own choosing and of slowly increasing difficulty.
To get out of tutorial hell you need to make a trade. You need to trade your anxiety about your abilities for embarrassment about how basic the stuff you're making is. I think it's a good trade.
The second method is to combine play with the tutorials you've already done. Go back through your old tutorials, but push the edges a little bit. What if I add this little extra feature at the beginning and then try to keep it all the way through? What if I try to do a bit from memory and then check back if I did it right? This may feel a bit safer.
The last method is to do more tutorials on the exact same topic. This won't get you all the way out of tutorial hell, but it might get you closer to the gates. For example, there are at least a dozen beginner books and courses on Django. Keep working through them. Go back and redo the ones that seemed too hard. The essential thing is you have to stay on topic until you actually gain the ability. If you venture off too soon (Maybe I should try Django REST Framework. Maybe I should learn Docker) you're only going to make things worse. You'll be like an apple rolling off a fruit bowl.
Edit: I sat down and wrote this post this morning because I woke up early and couldn't fall back asleep. I'm glad I did because it seems to have resonated with a lot of people. Thank you all for sharing that with me. Best of luck in your learning.",u/TravisJungroth,"Thursday, July 30, 2020 at 5:13:39 PM GMT+5:30",4 yr. ago,"I'm very good at a couple of things, but programming isn't yet one of them. I am currently in tutorial hell, and your essay is exactly what I needed to read. Thank you.",Comment deleted by user,,"Awesome! I started to learn HTML and CSS in January. My first approach was strictly reading the information at W3schools, but I retained very little. It also took quite a while. Now, I am taking this course on Udemy that gives me challenges to do on the way, and that approach has been much more effective into actually being able to implement what I learn.","I love this and it is a great framing of the problems I had during the first few years of trying to learn. An exercise that I do, which fits the philosophy above, is that, for any tutorial I do, I have a rule that I need to build three things with it. Take the concept and apply it to two modified versions or extensions of what you’ve learned. This isn’t enough to know something but it is enough that, when you have to reengage the topic at a later time, it tends to feel a lot more familiar. Great post",Comment deleted by user,"It almost sounds like your describing a portion of the Dunning-Krueger effect. At first, the learner is confident due to ignorance of the topic. After being exposed to the topic more and more, they realize their own knowledge or ability isn’t as good as they thought. This can cause cognitive distress, especially in learners with low self-efficacy, which leads to counterproductive behaviors like you mentioned.
Background: programming since ‘13, BS in psych, currently a graduate CS student","“You’re learning more, but you feel like you know even less.”
I needed to hear this badly, thank you. I have been coasting by in my algorithms class and not programming at all because I’ve been stuck like this, I think I’ll start a project today now.",Comment deleted by user,"This is a fantastic explanation. I love the ""ability-exposure delta"" as a cognitive construct, and I think you could literally write an academic paper on the concept.
But I want to add one more tool for students trying to get out: Deliberate Practice. Deliberate practice is a very specific kind of practice in which you identify key skills, break them down into component parts, practice them individually and in coordination, and devote plenty of time to seeking feedback and reflecting."
Tools I wish I had known about when I started coding,"Hey all! I had compiled this list about two years ago, shortly after I started programming, and I found that is was helpful to a lot of folks, so I wanted to resurrect it.
While the way I do some things has changed a lot in the last couple of years, these all helped me a lot when I was just getting into web development, and hopefully they might help you too!
Chrome Extensions
Now that I am a self-proclaimed web developer, I practically live in my Chrome console. Below are some tools that allow me to spend less time there:
WhatFont
— The name says it all. This is an easy way of finding out the fonts that your favorite website is using, so that you can borrow them for your own projects.
Pesticide
— Useful for seeing the outlines of your HTML elements and modifying CSS. This was a lifesaver when I was trying to learn my way around the box-model.
Colorzilla
— Useful for copying exact colors off of a website. This copies a color straight to your clipboard so you don’t spend forever trying to get the right RGBA combination.
CSS Peeper
— Useful for looking at colors and assets used on a website. A good exercise, especially when starting out, is cloning out websites that you think look cool. This gives you a peek under the hood at their color scheme and allows you to see what other assets exist on their page.
Wappalyzer
— Useful for seeing the technologies being used on a website. Ever wonder what kind of framework a website is using or what service it is hosted on? Look no further.
React Dev Tools
— Useful for debugging your React applications. It bears mentioning that this is only useful if you are programming a React application.
Redux Dev Tools
— Useful for debugging applications using Redux. It bears mentioning that this is only useful if you are implementing Redux in your application.
JSON Formatter
— Useful for making JSON look cleaner in the browser. Have you ever stared an ugly JSON blob in the face, trying to figure out how deeply nested the information you want is? Well this makes it so that it only takes 2 hours instead of 3.
Vimeo Repeat and Speed
— Useful for speeding up Vimeo videos. If you watch video tutorials like most web developers, you know how handy it is to consume them at 1.25 times the regular playback speed. There are also versions for YouTube.
VS Code Extensions
Visual Studio Code is my editor of choice.
People love their text editors, and I am no exception. However, I’m willing to bet most of these extensions work for whatever editor you are using as well. Check out my favorite extensions:
Auto Rename Tag
— Auto rename paired HTML tags. You created a <p> tag. Now you want to change it, as well as its enclosing </p> tag to something else. Simply change one and the other will follow. Theoretically improves your productivity by a factor of 2.
HTML CSS Support
— CSS support for HTML documents. This is useful for getting some neat syntax highlighting and code suggestions so that CSS only makes you want to quit coding a couple of times a day.
HTML Snippets
— Useful code snippets. Another nice time saver. Pair this with
Emmet
and you barely ever have to type real HTML again.
Babel ES6/ES7
— Adds JavaScript Babel syntax coloring. If you are using Babel, this will make it much easier to differentiate what is going on in your code. This is neat if you like to play with modern features of JavaScript.
Bracket Pair Colorizer
— Adds colors to brackets for easier block visualization. This is handy for those all-too-common bugs where you didn’t close your brackets or parentheses accurately. EDIT: Version 2 now available
https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2
ESLint
— Integrates ESLint into Visual Studio Code. This is handy for getting hints about bugs as you are writing your code and, depending on your configuration, it can help enforce good coding style.
Guides
— Adds extra guide lines to code. This is another visual cue to make sure that you are closing your brackets correctly. If you can’t tell, I’m a very visual person.
JavaScript Console Utils
— Makes for easier console logging. If you are like most developers, you will find yourself logging to the console in your debugging flow (I know that we are supposed to use the debugger). This utility makes it easy to create useful console.log() statements.
Code Spell Checker
— Spelling checker that accounts for camelCase. Another common source of bugs is fat-thumbing a variable or function name. This spell checker will look for uncommon words and is good about accounting for the way we write things in JavaScript.
Git Lens
— Makes it easier to see when, and by whom, changes were made. This is nice for blaming the appropriate person when code gets broken, since it is absolutely never your fault.
Path Intellisense
— File path autocompletion. This is super handy for importing things from other files. It makes navigating your file tree a breeze.
Prettier
— Automatic code formatter. Forget about the days where you had to manually indent your code and make things human-legible. Prettier will do this for you much faster, and better, than you ever could on your own. I can’t recommend this one enough.
VSCode-Icons
— Adds icons to the file tree. If looking at your file structure hurts your eyes, this might help. There is a helpful icon for just about any kind of file you are making which will make it easier to distinguish what you are looking at.
EDIT: found more tools I had compiled on a per operating system basis!
Operating System Agnostic
Postman
— At its most basic, this is an application that allows you to test the different endpoints of an API. You know, that good CRUD stuff. Once you dive deeper into it, you will find it is also incredibly useful for writing up test suites and much more.
Insomnia
— This is an open-source alternative to Postman. It appears to have a lot of the same functionality with a slightly lower price tag for their premium packages. Between this and Postman, the choice seems to mostly be personal preference for the UX. Don’t stay up all night making a decision between the two (I had to, forgive me).
Restlet
— If you don’t want to download either of the above, this is an API testing client that is available as a Chrome extension. It even allows the importing of Postman tests and several other formats.
Charles
— This is a sweet web debugging proxy that allows you to view all of the information you could possibly want to see about the requests being made between your machine and the internet. It basically turns you into a hacker, allowing you to check your website for security vulnerabilities and such.
Fiddler
— Basically the same tool as Charles. Personal preference seems to be the main deciding factor between the two, though both can greatly increase your debugging/troubleshooting capabilities.
Flux
— If you’re reading this, chances are you probably spend a ton of time on your computer. Flux is a program that turns the blue light down on your screen as the sun sets, with the hopes of mimicking the day/night cycle and helping you sleep better. Not as good as getting time away from the screen, certainly, but it’s better than nothing!
Windows Specific
ConEmu
— If you are on Windows and you would like to have multiple terminal tabs, this is an easy, free solution to your tab-related woes. Never again will you have to flip back and forth through entire windows just to look at your different error messages.-
Ditto
— You know when you’re trying to copy four separate answers from Stack Overflow and you have to keep switching back and forth from your browser to your IDE? Worry no more. With the Ditto clipboard manager, you can copy-paste your way to victory.
TouchCursor
— Programmers of all sorts are notorious for wanting to use the mouse as little as possible. If you find yourself in that camp, then this will be right up your alley
Cmder
— I am going to forego my description of this product, as I feel the description on their website is much better — “Cmder is a software package created out of pure frustration over the absence of nice console emulators on Windows. It is based on amazing software, and spiced up with the Monokai color scheme and a custom prompt layout, looking sexy from the start.” I don’t know about you, but I am a fan of any software that describes itself as “sexy”
Directory Opus
— This is basically what Windows Explorer should have been from the start. Opus allows you to dig through your poorly-organized documents almost as if they were well-organized.
Zeal
— With over 200 documentation sets to search through, Zeal is an offline goldmine of documentation for the developer who loves to read documentation so much that they do it even when the internet is out. (Copy-pasted from Dash in the Mac section).
Mac Specific
Paw
— A competitor to both Postman and Insomnia above, Paw is a similar piece of software that feels more like a native Mac application than the others. If you love that Mac feel, this might be the API tool for you.
Dash
— With over 200 documentation sets to search through, Dash is an offline goldmine of documentation for the developer who loves to read documentation so much that they do it even when the internet is out.
Bear
— Not directly coding related, but a neat piece of software for taking notes if that is something you do in your day-to-day. I can’t help but wish that this would be integrated with Paw somehow, for pun-related purposes.
Magnet
— Okay. Fair warning: This one costs money. If you can afford to dish up the 99 cents, however, I think it is worth it for those tough times when you don’t have access to a second monitor. This tool allows you to easily snap different windows to separate areas of your screen so you can run multiple terminals at once and tell your mom you are a hacker. (They are not paying me for this recommendation, sadly. However, if you are the creator of Magnet and you wish to pay me, please get in touch).
EDIT 2: adding new version of Bracket Pair colorizer here and to description above
https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2
EDIT 3: I've had people in dms asking about more advice/tooling. I'll definitely continue to cross post anything that makes sense to here like this post. I also try to help out on
https://twitter.com/marioahoyos
. I am a career switcher like many people here are and I want to help as many people make the transition as I can :)",u/mariohoyos,"Thursday, June 11, 2020 at 8:17:31 PM GMT+5:30",4 yr. ago,"I would be curious to hear what you all are using these days, as I'm sure there's a bunch of cool new things I haven't learned about","ConEmu
— If you are on Windows and you would like to have multiple terminal tabs, this is an easy, free solution to your tab-related woes. Never again will you have to flip back and forth through entire windows just to look at your different error messages.
There is also Windows Terminal now, which is open source and maintained by Microsoft themselves.",Thanks! Just added the bracket colorizer and the console util.,damn wheres mah linux specific,,"For a Mac Specific app, BetterTouchTools is a necessity. Lets you do the custom snaping like magnet and lots of customization for the trackpad, mouse and even touch bar","Ditto
— You know when you’re trying to copy four separate answers from Stack Overflow and you have to keep switching back and forth from your browser to your IDE? Worry no more. With the Ditto clipboard manager, you can copy-paste your way to victory.
Windows have built
clipboard
history now.  Win+V will show history including images that was copied into clipboard.",Live server is awesome too! It will refresh your web page on save instead of having to click reload after every change you make.,Thanks OP for this !,Comment deleted by user
After 9 months of teaching myself how to program I finally landed a job. I want to share some of the things I learned on how to achieve this goal (mostly focused on front end).,"Disclaimer: everything I write is my own opinion so take it with a grain of salt. You never know who's writing what and why on the internet :)
Long story short, in December 2017 I was at crossroads in my life. Either finishing my endless journey to finish my master in chemistry or reinvent myself. Since by then I did some coding (literally few hundreds line of Python) and I enjoyed the experience I decided to throw all my savings into surviving for enough time till I could get a job as a developer. Meanwhile I would've studied and programmed till I was comfortable applying for jobs. Reflecting back into this long and hard journey I want to share my opinions on what this journey looks like, how does it start and how does it end. My points are in no particular order, albeit I guess I'll write some of those I find most important first.
Set a very precise goal
. By this I mean a real life goal. This is by far the most important aspect of your journey. You need to have a clear vision on what's the finish line? Are you learning to code because you want to solve some real problem of yours? Maybe you want to automate some tasks you have at your home/job. Maybe you want to crack a videogame, maybe you're moved by curiosity, maybe you like learning new things, maybe you're an entrepeneur with no funds but a very solid idea you want to develop into a real world application. For the rest of this post tho I'll mostly speak from a perspective of who'se learning to code to find a job.
If your goal is to find a job look at the job market, not on what's hot on Twitter and Medium
. Remember point one? You have to set a very
precise
goal. A goal such as ""I'd like to be a developer and work on videogames"" is imho already too vague. Let's assume for a moment that finding a job in the videogame industry is your priority. I can't but think that these two things are sort of exclusive. You're already being focused on a small (but relevant) niche of programming jobs. Yet, what's your priority? Finding a
real
coding job, or working in the videogame industry? What if you won't find a job in the videogame industry cause there are no companies in your area or you will simply not meet their requirements (likely in the gaming industry). If you'll learn to code in whatever language, I can guarantee you that you will be able to translate that knowledge someday on videogames if that's your goal. You'll have to learn tons of new stuff. But you have the problem solving skills and knowledge of programming to make this step.
Seriously, look at the job market and remember point 1. Are you willing to move abroad? Cross state? Cross country? Cross continent? It'll be harder to find a job that's far from your house. It's harder for a company to ask you to take a flight for an interview. And since you're a self taught developer and not an MIT stellar graduate those expenses will likely be all on you. I did a mistake on pointi in Decembet 2017. I decided that my priority was finding a job and I wanted to be a front end developer. I can't but feel this was a mistake. In my area C#, php and Java works are in a 9:1 ratio to front end JS jobs. So check carefully the companies in your area, literally count the positions and their requirements.
3)
Do never, ever, ever, make assumptions on what's harder and what's easier in programming
. I did this when I decided to learn front end. This was a huge mistake. It's not true that front end is easier than backend, neither is the opposite, and more importantly you can't even possibly know at this point what you'll like more and you're more adapt to. Don't make assumptions. Just don't. Do never, ever, think that JavaScript is easier than C, nor the opposite. Different tools for different problems with different complexities. I could tell you you could fit everything about C in a 200 pages book, literally everything about the language, and tell you that it would take twice the pages just to give a solid, yet incomplete, picture of objects in JavaScript. You are simply not qualified to know what's ""harder"" and what's ""easier"". Neither I am. For the love of god, don't make this mistake. Of course, some aspects of programming leverage more or less maths or creativity or organization or whatever. But can you really tell me that in 24 months from now optimizing rendering and network performance on x platforms will be ""easier"" than refining algorithms that predict weather based on some geospatial data? Are you sure that managing state in complex real time applications will be easier than writing shaders or teaching a computer how to translate or paint? You simply do not know. Do, not, make, any fuckin assumption of this kind.
4)
Be consistent in your learning
. How much time do you have to study programming? Are you already a student? Or maybe you're unemployed (as I was) but have enough savings to dedicate yourself to studying. Be realistic about your goals but be
consistent
. Writing code for 1 hour every day for a week will make you a better programmer, than coding once a week for 7 hours.
5)
Do not feel compelled to know everything's that required on the positions you want to apply
. This is especially true for frameworks and libraries. There's a reason why top companies focus a lot on data structures and algorithms, they show you can think and solve a problem. More specifically, whatever programming language you choose (any of Java, JavaScript, C#, Python and PHP is likely to find you a job, the others might be more nichey) learn it's fundamentals as best as possible. I learned front end development. I felt this huge need to learn from html to the dom, plenty of libraries, transpiling, webpack, etc, etc. Yet reality is that at job interviews those topics were barely if ever touched. But what they wanted to know is that I
really
understood JavaScript. I've applied for 3 front end react jobs, I've never been asked a single question about react's ecosystem. Not once, ever. Nobody cared. What they cared of? If I knew what was strict mode, the difference between a function expression and a function declaration, the utility of IIFEs, prototypical inheritance, closures, etc. Nobody gives a damn if you know React's methods (I mean, if you learn React you're supposed to have at least a basic knowledge of how it works), but the core knowledge needed to be a good React developer is knowing JavaScript. If you know JavaScript and the dom, learning React is a matter of a week. If you don't you'll never be a good React developer. Higher order functions, the
this
binding, those are the real problems and knowledge React developers need everyday. The rest is a google search away. I can tell you that I haven't been asked once something that wasn't written in Eloquent JavaScript, not once. Of course, I did some research and work to understand some topics better. If they ask you what a promise is, you answer that it is an object. Sure, there might be the need to expand. But seriously, just because you used promises, doesn't mean you understand them. Mumbling about ""they are
something
you use to make asynchronous code"" might say something more than saying ""they are objects"". But the second answer simply shows you have no understanding of JavaScript. Plain and simple. Maybe you get they are objects because they are declared with the
new
keyword, but you really need to understand the basics of JavaScript. The same applies for any other language. The overwhelming majority of errors and bugs that will make you bang your head on the wall derive from lack of proper understanding of the basics of a language. Just because you read something, doesn't mean you absorbed it, even less mastered it. It's hard to trust a person who has 10 skills/tools on their cv, yet he didn't really master one.
6)
Try to find a mentor
. Plenty of people more experienced than you are active on slacks, irc, discord, etc. You may find somebody willing to help you long term. Also there are the beautiful people on ##javascript on freenode which have been an invaluable learning experience for me and I thank all the members here (especially ljharb, slikts, stennowork, liste, innovati, zsoc, cjhonson, qswz, GreenJello, sillyslux). Mind you I'm not inviting any of you to contact these people, they help in general chats not one on one, I'm not aware of them doing any mentoring, I found some mentors here on reddit and on a slack channel for developers in my area. Two tips: don't abuse the patience and will of a mentor to help you. If you keep asking basic questions that can be googled or found in basic books (such as Kochan's C book or Eloquent for JavaScript) they will get tired of you and start answering less and less. The second tip: programmers, all of them, including you, they love to feel the smartest person around, I think it's the nature of people that solve problems through logic. Abuse this fact to find information you need. A simple example: if you go in a chatroom and write ""lol I didn't know you could bind arrow functions"" you'll get 20 answers telling you why you're write (and wrong). If you go in a chatroom and ask ""how does this work in arrow functions?"" you may not receive any answer.
7)
Understand what programming is
: you take data as input, you do something with it, you generate an output. That's what every meaningful program or subroutine does. Nothing less nothing more. I wish somebody told me that when I started and stared at this overwhelming amount of endless information. In the end, I was always solving the very same problem over and over. Each time differently, with different tools, different approaches, but every program as small as you think about it does that. You may add two numbers: input numbers -> process- -> output sum. You may want to render a 3d model on the screen: camera + matrice of vertices -> process -> 2d image on the screen. You may want to set your profile picture on a website: data input + address -> process -> response from server. That's all there is to programming, and that's why algorithms and data structures are the backbone of most top companies interviews: because that's
all
there is to computing. data -> processing -> data. That being said I know very little of data structures and algorithms. I'm unlikely to implement a merge algorithm or implement complex data structures and they were never really asked at any interview. Just knowing time complexity and different utility of different data structures was more than enough for my interviews. But that might differ in other companies and positions.
8)
Understand what programmers do
. They solve problems through the use of code. That's why it is very required that you bang your head on a wall when you can't find a solution to your coding problem. When I started I was desperate when I was writing a small demo and every time I pressed a button the page refreshed. Even asking around I couldn't find the reason. In the end it was something pretty trivial: button elements without a type attribute are treated as submits. Submits by default refresh the page when triggered. Many people looked at my code and couldn't find the reason and yet they overlooked this very trivial issue. But in reality that's what's going to happen over and over: why ""foo"" is not a function? Why is my program reading the property of undefined? As a programmer you solve problems (often created by yourself). If you think that following some bullshit video cours on youtube/udemy will make you a programmer you're in for a bad time. Looking at people solving problems for you means you are not developing your problem solving skills. When you don't understand why something's not behaving resist the urge from googling right away, or asking somebody more experienced. Please understand that this is exactly how's your job gonna look like. Get good at solving problems. Some might be syntax problems (as the ones before), some will be performance related, etc. Regardless. Learn to solve problems, embrace the power of debuggers. Understand that code is merely an implementation of an idea. Get used to program with pencil and paper. Define well your problems, input, output and how to go from one to the other. Organize your code. Look at your mess of spaghetti code, at your messy and poorly named functions and variables, at the code you can't already follow after few hundred lines. Then improve it.
9)
Have a basic knowledge of how computers (so every single device out there) works
. Seriously. Knowing von Neumann's architecture basics and the memory model is the very least you should know and you can learn this things in few hours. Even wikipedia, youtube or some blog are enough, but learn it. The memory model and the call stack will then no longer be something complex and your code will get better and you'll learn coding faster. No longer you'll wonder why you can't mutate a string or why why you pass non primitive types by reference rather than value. This will have a meaningful impact on your learning speed and understanding on how computers work (from our perspective, at least).
10)
Don't learn from videos
. The more advanced and nichey stuff you'll have to do the less resources you will have to solve it. Get used to write programs only with resources that require you one google search and as little information as possible. You'll have to use libraries with poor or no documentation. You'll have to look at the code to understand why that library is mutating that particular object or it is behaving differently from expected. Go on github, look at popular libraries. They are overwhelmed of problems. And the dozens of brilliant engineers that wrote this technology never had this issue before you. I understand this is advanced stuff. But it's a good habit. I have yet to see a single code topic that cannot be learned better through reading the code or some well written book/article than some video. Also, beware, most people out there doing those courses and lectures are not necessarily good programmers, even if they are, they are not necessarily good teachers. Remember the guy who answered ""what's a promise"" mumbling about something to do asynchronous programming? That's the guy who learned to code from videos and never had a real rigor in studying. The more defined a concept is, the easier it is to understand it. I'm not saying ""don't use videos"". There's hundreds of videos that helped me both with concepts, problem solving or by watching how to use some technology. Just get in the habit of making them your last resource. I myself liked, e.g., Andrew Mead's React course it teached me
a lot
. But in the end, not a single thing I was shown really stuck with me if in the end I didn't researched stuff on my own and tried it over and over, and going back to a specific point of a specific video to watch a specific example of a specifc version of a software is nothing short of a weak surrogate to proper critical learning.
11)
Debugging and version control
. These two are probably more important than anything safe for language and computing basics and the most required in a working environment. Tooling would be a safe second spot. If you know Java properly (just to change from the usual JS examples :P) then learning Spring is much easier than learning docker and git. Yet probably you'll invest 95% of your time writing Spring code, e.g. If you know Python properly, you can grasp Django in a weekend..What about proper error handling in Python tho..? Same goes for your IDEs, etc. Learn one and master it. Knowing 5 IDEs is useless if you're constantly using your mouse to open a terminal, you don't know how to navigate your documents properly, rename variables in a file together, etc. Mind you, I'm not saying that these are fundamental for a junior position (well, maybe debugging with anything by prints or console.logs kinda is), you can get away not knowing them but this stuff sticks for years.
12)
Do never attempt to learn too many things at once
. Move with small but solid steps. I made this error and I think it costed me a lot. I'm not saying reading Hennessy and Patterson wasn't useless..Or that reading about design patterns was useless..Or that playing with Rust, C# was...Or that watching all this youtube videos, interesting talks, reading about behaviour driven design and gerkin was useless..Or that all of those blog posts I reed was useless..But remember point 1? You must have priorities. You must move by small solid steps. It's good if you're curious as I am. But it's much better to receive a salary, learn in a comfortable environment under the guidance of senior developers and then go home and play with Rust or watch talks about immutability if you want to than do it when you have a different goal.
For the hiring process
:
12)
network > experience > knowledge
. Most companies around are always hiring. You don't see their ad, because they have none. Maybe they don't even have a ""work with us"" section on their website. But most companies are always hiring talent. As you're likely to enter at the lowest position, with the lowest possible salary, they might still be interested in you for this very same reasons. So networking, knowing people is paramount for your job research. I invite you strongly, if you can, to participate to your local communities both online and especially offline. I didn't get a single answer to any of my CVs I sent. But all the interviews I had derived from me knowing somebody who worked somewhere. ""oh, you're a developer"", ""yeah I just started, still learning, I kind of suck xD"", ""well when you feel like it send me your cv I'll give it to my hr/team leader"". If you're a self taught developer your hiring process (this depends also on the area and position you're looking for) is going to be very hard. You don't have experience. You may have skills and knowledge, but nothing to put on your cv. Just because you say you know Python nobody's gonna interview if you have nothing to show nor way to prove it. Interviewing you means the company is actually losing money. Two or more developers are not working, but getting paid. HR/management could be doing something eòse. Time is money, the bigger the company, the more money they are losing to put you in a room. I know and I felt the pain of knowing stuff and having no way to prove it, but that's how it is. So after network comes experience. Here you have basically two options: contribute to open source (either write some library/module people use, even a good pull request is a nice on a CV) or develop something people use. Even if it's for free. I didn't go with the first, but I went for the second. I developed a small application for a football club in my city that needed to inform players of the various youth teams who was going to play on sunday game. Nothing too impressive, nothing too pretty, but it's something hundreds of people use every single week. The fact that you solved a real world problem using code, you meet the requirements somebody gave you, is massive. My uncle needed a website for bookings for his bed and breakfast. I wrote it for him. Complex database with real time booking? No. But I solved a real world problem for somebody, and people use it everyday. Does it matter that it has plenty of anti patterns? Maybe your beautiful instagram clone with rest endpoint etc is much cleaner code but..Does anybody uses it? Is there anything original and not cloned from some udemy course? Maybe you have a smart tv and you're tired of transferring files with your usb to watch your shows you have on your hard disk? You've got a router..You've got a tv that you can install program to? Maybe spend a month to write some very basic, even ugly, but working application that allows for data transfer between your computer and tv? Somebody's gonna use it. Solve real world problems, for real world people. Those are sound things to put on a cv. They give you endless opportunities to talk about how you solve problems. What did you do well, what sucked? I didn't use no state manager on my first react application, as the application grew I encountered plenty of problems due to that and maintaining code got harder. I met a real world problem, I solved it, I know if and why my solution was good or bad. Look around you, what problem you can solve and help somebody? Start from your own problems and move asap on somebody's else. Even if it means it's for free.
What's there to talk about your perfectly implemented Django+PostgreSQL twitter clone? Nothing. Zero. Last comes knowledge. And this is a big problem. Because if nobody puts your resume on somebody's desk saying you can be a good resource after some time that's the only thing you're going to be judged for. If you'll be even given this opportunity. Having released two android apps even if they are nothing spectacular (maybe you just created an offline version of some website/doc, e.g.) means you can solve problems. You have something on your cv. Maybe you weren't able to answer questions given to you, but fact is a fact: given time you can find the resources (on the net, and inside you) to deliver a product. So knowledge becomes your only resource. And it's a bad resource. Because when you're put in front of somebody with 10 years of experience, saing ""value"" rather than ""variable"" tells a lot about you. So nobody recommends you, nobody uses anything you wrote, your github is a collection of initialized and abandoned projects and copy cuts from tutorials, you're asked about basic stuff (which is the hardest questions btw) and you are not providing clear confident answers who's gonna pay you?
13)** Bonus**: if you have more than 6-7 months to prepare before you'll start actively looking for jobs one thing I may recommend you is to start with the C programming language. C is a small language, it doesn't have many things, most C books are shorter than any introduction to higher level languages. Learning C teaches you a lot about computing. An awful lot. To put it differently. I'm confident that if I spent 2 months learning C (at least 4 hours a day) and solving easy and intermediate leetcode or similar problems and then spent 4 months learning another higher language I'd be a much better programmer than if I just started in this other higher language. There's much too much focus on too many technologies, there's too much noise in higher level languages. You'll be tempted way too soon to move from ""how do I go from input to output"" which is the very essence of programming to developing full programs. I know that text input and output isn't sexy, but remember point 1? We want the best and possibly the shortest path to get ourselves onto being decent and proficient asap. C might be slower at first. But then you move unto another language and not only you'll find that in the end you're solving the same problems you were solving with C (because it's always the same fuckin problem as I told you) but you need to do so with an endless amount of different APIs and conflicting, similar methods.
14)
Bonus 2
: learn to manage your time. You're sitting behind a computer all day learning how to code. It's tempting to go on lichess, launch league or procrastinate but it's lots of time wasted. You can
easily
cut off large amount of weeks/months needed to reach a decent level of preparation by managing your time better.
14)
Bonus 3
: resting, socializing, relations, having fun, taking care of yourself are super important. Sitting alone reading blogs and staring at Visual Studio all day can be very hard for your mental health and can alienate you. Work hard, be disciplined, but be disciplined in other aspects of your life too, because if a certain balance is broken it leaks in every other of your aspects.
That's all, I'm sorry if that was long, I hope somebody might find it helpful and remember anything here is my mere opinion and you'll find plenty of people disagreeing.",,"Wednesday, September 26, 2018 at 9:16:27 PM GMT+5:30",5 yr. ago,"Just saved your post, this gave me that second wind to continue to learn C++, thanks OP.",I'd be curious to know the resources you used to learn. Especially the algorithms and data structures,"The memory model and the call stack will then no longer be something complex and your code will get better and you'll learn coding faster.  No longer you'll wonder why you can't mutate a string or why why you pass non primitive types by reference rather than value.
Just a note that high-level language systems nowadays (the majority of the ones you mentioned, other than C) are often written so many levels above the CPU and kernel that the reasoning for certain basic decisions is generally
not
“Because the computer does it this way”.
What your specific language/runtime decide to pass by value or reference, or whether strings are mutable, etc, are mainly opinionated quality-of-life choices, rather than just “because the hardware/computer works this way”.  So while your point about learning the nuances of how computers store and process data is valid in part, I’d be careful not to jump to conclusions, given how many layers are often between the language and the underlying hardware in 2018.","It's a great post.  I'd say the only nitpick is saying don't learn from videos.  How people learn is very personal, and videos may help a lot for beginners to get large concepts.
Doing  the work is what is needed at the end of the day, but understanding how can be reached by a number of methods.","Thanks, I'm curious about what your schedule was like over those 9 months. As someone that has been self-teaching full time for 4 months, I'm interested in how others structure their time and prioritize.
I am learning, watching and building M-F from 9-5 and treating it like a job. Discrete goals of understanding JavaScript (and React) deeply and C# shallowly.","Good info, but a tip for you... Paragraphs are your friend! It got a bit difficult to read at times due to the lack of spacing.","Great stuff.
People can become developers with very little, if they take this seriously!","I wish I had the 9 months you had! i have about till november to find a full time job and ive only just started with java! still going to see how i go
thanks for the tips!","I'm trying to learn at home, but boy am I failing miserably. Taking entire days to solve the most mundane issues....","I’ve been learning programming at my job as a graphic designer. They needed someone to help with a VBA project and I knew the business use of it, and there was nobody else available to do it. They didn’t care that I knew absolutely nothing about programming.
When I started, the guy writing the code had been at it for a couple years.  He has a disability that makes using a keyboard and mouse difficult so I’d share my screen and he’d talk me through his code. I was expecting to at least be able to follow the logic but it was fucking impossible. Turns out it worked most of the time but it was about half stuff that he copy pasted and he didn’t really know how some of the routines actually worked. This was killing me since I need to understand things. Since typing was hard for him he removed all the vowels from variable names so speaking them out loud was impossible. I almost quit after a week, but it was a challenge so I stuck with it. Something about it intrigued me so I started reading about coding basics.
I learned what a cargo cult was and the benefits of refactoring, and after studying the basics of computer programming I rewrote the whole thing. It’s been a year and a half now and we’re on to other projects to build. I’m trying for a job in our department where I can code but I have a lot to learn.
Anyway sorry for the wallotext. OP your post was really great."
"I asked 500 people on this sub if they were able to become software engineers. Out of the 267 that responded, only 12 told me they made it.","This post is not meant to discourage anyone. Nor is it a statistically valid study. I was just curious and decided to do a fun experiment.
I have been hearing recently about how everyone should ""learn to code"", and how there are mass amounts of people going into computer science in university, or teaching themselves to code.
What puzzled me is that if there are so many people entering the field, why is it still paying so much? why are companies saying they can't find engineers? Something was not adding up and I decided to investigate.
So I spent a few months asking ~500 people on this sub if they were able to teach themselves enough to become an actual software engineer and get a job. I made sure to find people who had posted at least 1-1.5 years ago, but I went back and dug up to 3 years ago.
Out of the 500 people I asked, I had a response rate of 267. Some took several weeks, sometimes months to get back to me. To be quite honest, I'm surprised at how high the response rate was (typically the average for ""surveys"" like this is around 30%).
What I asked was quite simple:
Were you able to get a position as a software engineer?
If the answer to #1 is no, are you still looking?
If the answer to #2 is no, why did you stop?
These are the most common answers that I received:
Question # 1:
- 12 / 267 (roughly 4.5%) of respondents said they were able to become software engineers and find a job.
Question # 2:
- Of the remaining 255, 29 of them (roughly 11%) were still looking to get a job in the field
Question # 3:
Since this was open ended, there were various reasons but I grouped up the most common answers, with many respondents giving multiple answers:
""I realized I didn't enjoy it as much as I thought I would"" - 191 out of 226 people (84%)
""I didn't learn enough to be job ready"" - 175 out of 226 people (77%)
""I got bored with programming"" - 143 out of 226 people (63%)
""It was too difficult / had trouble understanding"" - 108 out of 226 people (48%)
""I did not receive any interviews"" - 58 out of 226 people (26%)
""Decided to pursue other areas in tech"" - 45 out of 226 people (20%)
""Got rejected several times in interviews and gave up"" - 27 out of 226 people (12%)
Anyways, that was my little experiment. I'm sure I could have asked better questions, or maybe visualized all of this data is a neat way (I might still do that). But the results were a bit surprising. Less than 5% were actually able to find a job, which explains my initial questions at the start of this post. Companies are dying to hire engineers because there still isn't that large of a percentage of people who actually are willing to do the work.
But yeah, this was just a fun little experiment. Don't use these stats for anything official. I am not a statistician whatsoever.",u/yeahdude78,"Friday, September 23, 2022 at 12:05:09 PM GMT+5:30",1 yr. ago,,"Some of the people there literally hated it, they were there just for the job.
A lot of work ends up like this.","This ""just there for the job"" business gets tricky.
I'm a career live audio engineer. I followed my heart, rocked out, got crazy cool stories. I will tell you that even doing a thing I love to do became a grind after awhile because I did it for someone else. You never mix your favorite band, you never get total artistic control and you never get to run the gear you want to. Sure, a lucky few do, but the majority work with what they're given. I'm paid to facilitate someone else's idea and after awhile that just feels like a grind.
So in a strange way, I recommend more people take jobs just for the job. It helps to become interested in it but having a burning passion isn't a requirement and I'd actually argue it's often a source of dissatisfaction.
Just my two cents.",,"""if there are so many people entering the field, why is it paying so much?""
Because people immediately assume it's easy to land a 6 figure gig just by learning to code. It's not. There are many many things programmers do that takes a plethora of skills bedsides just writing code. So they quit their job and pay for a bootcamp, and then realize that they had no idea it was so difficult to program.
""I just quit my job, can I get hired in 6 months?"" No you idiot! Think before you act!
I'm not just talking coding, coding is easy. Programming is hard. It also takes  a lot of networking and good bit of luck to land and keep that job.","I have met a number of people who are pursuing, or pursued at some point, a carrier in IT. To clarify, by IT I mean software engineering, system engineering, data analysis etc., Everything. Here are some common patterns I found.
Quite the good portion of people only target these fields because of the advertised high pay. There's also a fairly large portion of people who thinks that it's an easy job because, you're just gonna sit in a chair and type a few things, right?
A fairly large portion of people assume these jobs to be easy. A lot of people also assume that you can take a course from somewhere and be job-ready.
Most of the people getting turned down from jobs are people who went to technical schools, bootcamps or taken online courses half-heartedly. i.e., they barely paid any attention to the curriculum and lectures and ended up with zero understanding of underlying concepts.
Disclaimer: This is not the result of any survey. This just my personal experience.",Conclustion: Most people on this sub have no idea what they are talking about. I wonder if you could do same for cscarrierquestions sub.,I'm beginning to think none of the tech subs know what they're talking about. Seems like any question you ask there's someone waiting to belittle you.,,"I'm glad that of the people who didn't make it, most of them just really didn't want it. Makes me think that if you do really want to put in the hours you have a decent chance. I'd be more curious what the figures are for people who studied very consistently. It must be there are a lot of people on here who start learning for the money or out of curiosity but they're not people who dream in code."
"Keep being told to build projects, but don't know what to build? Here's some ideas","Many comments in every thread about escaping 'Tutorial Hell', involve the advice of 'Just build some projects'. However, if you are like me, or
u/corshi
whom I saw in a thread about this exact thing when I got on this morning, you don't have any idea of where to start or what to build, how to plan or how to structure.
Thankfully, the internet is a wide web of information, and some lovely people out there decide to create lists that can point you into any sort of direction you desire.
Projectlearn
- A curated list of full project tutorials in different categories from Game Dev and Web Dev, to AI and Machine Learning.
Website
;
Github Repo
Project Based Tutorials in C
- A list of tutorials that work from small projects up to larger projects in C. Covers everything from learning Computer Architecture via building an emulator or VM, to building a kernel or OS
Github
Project Based Learning
- A list of programming tutorials about building applications from scratch. Covers all sorts of languages including: C#, C/C++, Go, Java, Javascript, HTML/CSS, Kotlin, PHP, Python, Lua, R, Rust, Swift, Clojur, Elixir, Erlang, and more!
Github Repo
Build Your Own X
- A list of projects that teach you how to
'Build Your Own X'
. X can be a 3D rendered, BitTorrent Client, Docker, Database, Git, Programming Language, Search Engine, Text Editor, Web Server, and more. Covers various languages for each different
'X'
Github
Project Based Learning - Frontend
- Project Based Learning tailored to Frontend devs. Includes things like calculators, chrome extensions, chat interfaces, pagination, notifcation boxes, design systems, spotify search app, and a reddit clone. Covers Javascript, HTML/CSS, Angular, React, Vue, and others.
Github
Community Project Ideas
- A community maintained catalog of projects. Has some in Android, C/C++, OpenGL, Java, Javascript, React, Angular, Python, and more.
Github
App Ideas
Courtesy of
u/Kapsize
- A list of app ideas, each with a clear goal, and 3 levels of difficulty for different places in programming careers/knowledge.
Github",u/XxNerdAtHeartxX,"Sunday, August 2, 2020 at 6:56:33 PM GMT+5:30",4 yr. ago,"Adding to this advice.
I fair badly with doing projects from these lists, mostly because I can't seem to find building something that I am not very passionate about a rewarding experience.
So what works for me is to check out a lot of online tools and websites with APIs, trying to figure out if it could be improved in some way. And trying to implement the optimization. I did two projects this way and it was extremely rewarding.
Trying to force yourself to do something you don't like is a quick way to lose interest in this field and burn out.","THANK YOU. There's been a huge amount of ""build something!"" posts, but I tend to get overwhelmed trying to come up with an idea to build. This is great.",Not all heroes wear capes! Thank you !,Awesome list! Thank you for putting it together!,"Wonderful list you've got going there!
I'd also highly recommend adding
this project ideas repo from Florin Pop
. It's catered towards web development, but has some awesome project inspiration regardless of your tech stack!","I enjoyed reading through this and going to the links. I've been learning Python for the past three months and have been working almost entirely within PyCharm to create projects (without a GUI), Python3 from Codecademy (I'm on my second run-through of the course), and reading books like Automate The Easy Stuff and Impractical Python Projects. The world of creating projects that function outside of an IDE feels completely unreal to me still.
Some people on here have talked about 'tutorial hell' but I don't think I'm feeling that just yet! This gives me a chance to get out and do something else and I love that kind of opportunity. Though, I am feeling that sooner than later, I should start working with things outside of Python. Maybe picking up Java or C++?
Anywho, thanks for the post! I'll be busy in the coming months!","Thanks for this information my man, building projects is always better than tutorial hell as has been the theme lately, so these posts are welcomed.
Eventually I think, the end game is to build enough to gain the knowledge of what a person needs to know then use those skills on your own project, weather it's for work or ""play"" :)",Thank you. It's almost like you solve problems for a living,Thank you.,Great!
"Learned to code, got interview at Google but I wish I was told...","I started learning to code a few years ago. Went through Codecademy, a bootcamp, and a Udacity nanodegree and got a Google interview. Nice right? Here's what I wish I was told much earlier.
Learning to code does not guarantee a career in coding. It gives you coding literacy, which is powerful.
Portfolios are so important. I wish I started earlier. Real world experience really matters. Many times in the past, I learned a concept hardcore by debugging well into the night and try to patch something of my own. Knowledge is rarely cemented by one pass through a book.
Watch videos and tutorials but also stop watching those and code.
Do not shell out tons of money for the sake of education. Education is important don't get me wrong, but when you learn to code it's like running a startup. You are bootstrapping until you turn lead into gold. Ramen noodle profitability is key. Before you purchase a nanodegree or a coursera subscription think hard and google like crazy till you find something gold on the internet. Chances are the internet has good free materials that is created by tons of individual experts. Chances are you need not one but all learning resources till an idea sync and becomes second nature. use your budget wisely.
Algorithms really matter and code in C++ or JAVA in addition to Python and Ruby. Ruby and Python allow new programmers to do magic in minutes, but when interviews come around: bit manipulation, memory management, big O.... suddenly, we will realize using Python and Ruby as a beginner to code fancy things is like using a fancy graphic calculator. It can do amazing things, but if the operator has a weak foundation in math, it's still a no go. Remember fibonacci sequence? It's in every basic coding example. You can just write an elegant recursion function. Memorize it why not, there are just a few lines. But soon (except a few years down the road) you will find out that it is not very realistic to calculate anything that grows exponentially. Turns out, beginners like myself have done fibonacci sequence all wrong. There is a lot of room for optimization. Can you do this iteratively? Can you use dynamic programming?
Interviews. Like it or not, good companies get a lot of candidates. Many of them brilliant, can communicate and can code. As much as I'd like to think myself as special, really, there are at least thousands of people who can do as well as me graduating every year from colleges around the world. Interviews really do matter, no matter how limiting the format seems. Some interview sites have 600+ questions and growing daily. So one question a day can cost you nearly two years. Unless your have already created a massively popular tool, Google will not hire you. Oh wait, even if you created Homebrew, Google can still tell you to f**k off if you can't invert a binary tree (Google this bit). Start interview prep early unless you are a genius at programming just happened to major in English because you were bored in CS classes. Bonus: my interview experience has been super positive. People are nice now and treat other people right - contrary to what I read about online. I think sometimes the recruiter seems to ignore candidates is because they are super busy. I had someone from a top company called me on a Sunday night. Not because they were being mean, just because that's the first chance they got. They actually wanted to offer helpful advice.
Specifically, Google and Facebook are all about really really large datasets. Imagine when iterating through an array becomes a hard problem? If your array stores all hyperlinks that NYTimes links to (internal sites, external, and ads), now imagine that array is chopped and stored across different data centers, now imagine you have to put the links together and query them and display them in milliseconds. Now imagine using an array is too inefficient. What about a trie with linked list nodes? What about scratch all that, that's not how it is done. What if you just have to check if the username matches, except it's Facebook and there are millions of usernames that start with hotchick hotchick21 hotchick_99?
Phone interviews are serious, lengthy and rigorous. Top tech holds phone interviews to the same standard as on-site. Consider these interviews technical. One friend was scheduled for a 10 minute conversation about drone, it was technical starting second 0, caught him off guard and didn't go well.
Had to say I don't know but also defend myself: hey look I don't know this, but I really think it is related to this ... here're my thought process, and let me find out more and get back to you. Search like crazy and go back with a strong something to show.
CS graduates may take up to one year to prep for top company interviews.
If you walk your roommate through your white board algorithm session he/she might fall asleep. Be prepared to spend some lonely hours practicing and constantly being questions by your parents and peers why are you doing this to your self.
Oh, when you finish that bootcamp, or the video series, chances are there's something new for you to learn. New tech pops up every day. Being a strong mathematician or a general relativity physicist really helps. Hate math? Draw pictures, paint them pink and rainbow, I don't care, just do it. The more your practice, the better you get.
Practice lots, read tons of code, write tons of code, dream coding and puke coding. Happy holidays.
Google interview status: ongoing, better than I thought. Probably going to fail, not the first time. Numb, nervous and excited at the same time yay! Proud of it but also worried about totally freezing up in upcoming interviews. Practicing more.
EDIT: wow I am shocked. Thank you thank you all for taking time to comment on this! Here're are few points to add. NEW EDIT: I am humbled. Sincerely apologize. My grammar is hopeless...
These are words of wisdom I heard in the comments below and also in other
r/learnprogramming
posts:
There are hundreds of companies in the world. Don't have to die trying to join Google and Facebook. Grass is not greener on the other side. Also the interview and prep process may be more enjoyable.
These prep guidelines may be too ""dramatic"", ""rigorous"", ""unreasonable"". Yes,
r/learnprogramming
posts have mentioned luck, matter of keep trying (chance), and also don't let the ""imposter syndrome"" take over. NEW EDIT: Upon graduating from a full stack bootcamp a few years ago, I decided that JavaScript was obviously essential for web development so it was natural for me to use it as my interview language. I had an interview with Walmart Labs (a cool and interesting arm of Walmart and it's local unlike the HQ). The interview was deceivingly simple. He just nested variables in functions and ask me what is the value of the variable when it is placed inside, outside a function, and what does  ""this"" refer to. It was a pure self respect massacre. The questions were clever, simple, elegant and so precise - precisely identified me as a total newb. It was embarrassing. I felt so bad that I wasted this guy's time. He was quiet, patient, did not demean or laugh. After the interview, he thanked me for my time and hung up only when we both said goodbye. I could've buried myself. It was horrendous. It did discourage me a bit. I mean I butchered it, horribly. This experience may explain why I am doing this today.
Top tech companies employ smart folks but not all are whom you expect them to be. Don't let the brand or the notion intimidate you.
NEW EDIT: Studying all 600 questions is a complete waste of time. Companies actually want to see how you think and break down a new problem. I agree! That being said for bootcamp students and other new programmers, doing 60-100 of these questions can really shed light on knowledge gaps! It happened to me, so I wrote this post. It turns out I am quite good with ""puzzles"" and ""interview questions"". I did some hard questions quite okay. OOP implementation, not a problem. Surprisingly Linked List and Pointer, Array, String Manipulation though fundamental, really got me. If you didn't take college CS courses, or only worked with high level languages like Ruby and Python, these will likely be sore spots for you too. Do a few to test your knowledge. The return quickly diminishes after two dozens of questions. It's more important to understand each type of question and how to approach each individual type. Looking for types? Just take a look at Gayle's Cracking the Coding Interview Table of Contents.
NEW EDIT: Comments say: you don't have to know all these to be a good programmer. Yes! In plenty of scenarios, being able to hack and integrate and put together a solution of many components prove to be extremely useful. In the real world, problems are rarely well defined. It takes wit to be successful. Algorithms are useful for large scale tech companies where data structure, time complexity and space complexity make a big difference. I met a developer who used bootcamp + self study to make a text based iOS RPG game that massed one million +  downloads without a single image. Ingenious. Something about a fire that you need to kindle, shadows in the difference and you will encounter a shadowy figure every once in a while. The ability to SHIP a product is god send. I think it is called A Dark Room, freaking amazing
https://www.newyorker.com/tech/elements/a-dark-room-the-best-selling-game-that-no-one-can-explain
Mind blowing.
Interview moderator / interviewer can be nervous too. Yes! Agreed! In fact, my engineer friends dread talking to people sometimes.
This post is useful and useless at the same time. lol Here's a practice question. Please implement a cat class. Create lots of instances. Make sure it eat() play() sleep() and repeat. I wish I can be a cat this Christmas. It'd be nice. Don't forget to
while alive:
    eat()
    play()
    if interview:
        continue
    sleep()",u/glassjar123,"Sunday, December 3, 2017 at 11:42:11 PM GMT+5:30",6 yr. ago,"Not every company is going to ask you complicated questions.
I agree with doing your best to prepare but at some point you need to get an actual job. I just finished an Android app for a company I'm working for, I used 0 algorithms. Most people will not be solving complicated problems day to day.
In my opinion read the cracking the coding interview, refresh data structures, common algorithms, know their big o, and go interview. You might not get a job at a top 5 tech company but you will get a job if you are competent.
Same goes for other careers you want to drive an F1 car? Your body needs to be in optimal shape, reaction times well beyond average human, however, you can drive in a less demanding races, if you were not born for it.
Posts like this give this idea that everyone needs to be an all star and study all the time to even get a job.","Disclaimer
There are TONS of great companies to work for that aren't 1/100 as intense as Google or Facebook.","Good job on getting the interview! Let us know if you got it. Something I wish I did earlier was maintain a portfolio. I did some projects but never bothered to put them on Github. Never bothered to finish them. Once I learned what I wanted to learn from this project I gave up on it.
So to anyone starting out: Put your stuff online. You can still delete some stuff when you're ready to start applying for jobs, if you don't want employers to see it.","Also, accept that being mediocre is OK too. You don't have to be a big shot programmer working at a big shot company 80 hours a week to be considered successful.
Do your best, do it correctly, be proud of the work you do, and don't worry if you're not Google material.","[[content removed because sub participated in the June 2023 blackout]]
My posts are not bargaining chips for moderators, and mob rule is no way to run a sub.","I'm always torn after reading a post like this and have seen very similar posts on
r/cscareerquestions
. I have nearly 2 years commercial experience working in IT now out of college, 1 in data science/machine learning, and the other in backend java, and I've never put in nearly as much work into studying/prepping for jobs as people like OP do.
That's not to belittle how much work/prep they do, I admire how much commitment people like OP have to this field. This is more for other people who might look at posts like this and just feel like they're not committing as much as they need to in order to work in this industry.
bit manipulation, memory management
I have no idea how to any of this off the top of my head. I would undoubtedly have to google it, and not once have I ever had to deal with it in my jobs. I'm not great a maths, yet I got the 3rd highest mark in my masters on the topic of machine learning and data mining. I don't ""dream and puke code"". The amount of times I've had to google ""how to declare array java"" at work is ridiculous.
I admire the amount of work people like OP put in. Google would easily hire him over me any day I'd say. And i'm fine with that. My goal here is just to show to others who may be thinking that they're not good enough or aren't working as hard as OP, that you can absolutely make it in this industry if you're only doing half as much prep as OP. Will a big 4 company hire you? Probably not. But that's ok, there are TONS of other companies that will, and that can offer benefits that would up there with the likes of them.
Also as unfair as it may be, it is absolutely true that ""it's who you know, not what you know"" that gets you work. Yes if you're a top developer you'll obviously stand a great chance of getting a role. But have a friend at a company who's good friends with their manager and can talk you up and give in your cv? He's probably going to get the job. Networking is arguably more important imo. Also soft skills are really important. You might be able to write the most eloquent and efficient code ever, but if you can't work in a team and communicate with the business/clients, you're going to have a rough time.",,Is this post a little dramtic or is the interviewing process in cs really this rigorous? Or is it just this rigorous when applying to top companies?,"There are hundreds of companies in the world
that's the understatement of the decade!",Comment deleted by user
"2 years ago I started learning JavaScript so I could automate my Google Sheets docs. 15 months ago I left my sales job and started an internship in front end development, today, I promoted from Junior Frontend Engineer to Frontend Engineer!","Just wanted to celebrate.
More details on my journey here:
https://www.reddit.com/r/learnjavascript/comments/cd5jud/9_months_ago_i_started_learning_front_end/?utm_source=share&utm_medium=web2x&context=3",u/rushfordj,"Tuesday, December 1, 2020 at 2:40:14 PM GMT+5:30",3 yr. ago,"Me: Works 4 years and has multiple certificates
Also me: Still a junior dev","I am working as web developer (wordpress) for 2 years and I've just promoted myself from total idiot to partial idiot after I learned to add event listeners without jquery. Also I found out yesterday that self closing elements can't have pseudo classes.
So, congrats. You made for this.","Oh, and more details on how I started here:
https://www.reddit.com/r/learnjavascript/comments/cd5jud/9_months_ago_i_started_learning_front_end/",What is your degree?,Comment deleted by user,"Lol I was thinking of starting JavaScript today.
Guess this could be a sign of good things to come. Did you also study other languages besides JS? I'm a week into HTML and CSS.",wow congratulations!!,Congratulations! I'm always happy when I read stories like this.,,Congrats bro!
Somebody has going to be the a**hole that tells you the truth:,"I applaud self-paced learning. I love the fact that the smartest and best programmers I know impressively proved that a degree is not necessary in the field. And I cherish today's possibilities of free learning resources. But there is one fact about the human capability people seem to completely neglect:
No! You cannot become a full-stack junior web developer earning 80k/year within two weeks!
The amount of people on this sub asking for ""How can I score this interview? I have been learning x for y weeks..."" always put us in a predicament. Yes, we want to help. And yes, we want to motivate. But there is a terrible side to this:
WE are not a protected profession. You can't call yourself a lawyer after reading the constitution but you can call yourself a developer after a YouTube video. The implications of that are manifold, but here are the worst parts:
Capable, young developers have a very hard time finding a job because the recruiting process had to adapt to all the ""posers"" that apply to jobs they are not qualified for. Those little unrealistic tests in interviews? They are a direct result of having to filter out the weeds while having no other option of constructing unrealistic tasks that say little about the interviewees potential. They filter out the complete noobs securely, but also burn a lot of people that would otherwise deserve a chance.
You destroy trust in the industry and income potential of your peers! If HR finds a resume claiming to be a sufficient React developer and asking for 40k/year the resume next to it asking for double doesn't look that enticing. It is a fact that most jobs go through several filtering layers before somebody with the knowledge to assess capabilities will look at resumes. More often than not, no such person exists at the hiring company and shiny portfolio pages copied from templates make it into the pile while capable devs are not considered. Once an unqualified dev makes it into a company, a certain price is set (let's take the example of 40k). What many people thinking that ""learning on the job"" will help them catch up don't understand is: the peers that will come in will now be in the same bracket. Your ""mentor"" will never join this company (and if he/she would, you'd be fired within weeks), as from the company's perspective that resource is too expensive now. I have seen many startups die like this.
Globalization. Even ""bad developers"" need to feed themselves. But if the quality, speed and overall outcome cannot compete with a remote resource available for less than $10/hour, what kind of message do you think you project into the industry? A famous example is India. You will find (just like anywhere) good developers there. The best work for Google, Twitter etc. But India has over a billion people. So the percentage of ""I don't know much but am confident enough to hack it"" might be the same, but ultimately accounts for many, many more people in absolute numbers. And given the difference in cost of living, they can flush the international market with $5/hour offers. So think this through: local hiring has become very cost-intensive due to all the local ""I graduated from a bootcamp last Monday""-devs. The interview process alone requires so much time and money, that you might as well hire multiple people oversees and hope for the best, since you have the same risk when hiring locally. So what you are effectively doing is endangering the complete field by trying to ""sneak in"" with actual developers.
Conclusion for learners:
As stated in the beginning - Learning how to code is a useful, almost magic experience. And being able to teach yourself abstract and complex concepts in order to facilitate digital tasks deserves the highest respect. And you might have a combination of pattern thinking, intelligence and learning capacity to be a sufficiently trained developer in a relatively short amount of time. But the general notion that people can become junior developers within weeks is a LIE. A lie all the bootcamps and online schools sell you in order to make money. Many of those systems (better not mention names here), are almost a pyramid scheme: the teachers are former students. They do not hold the knowledge to get a well-paid job in the field, but they can repeat what they have gone through. (Don't get me wrong, there are reputable online schools and bootcamps for the most part)
Conclusion for devs:
Just today I found myself answering a questing a question ala ""how to get this job I am not qualified for"" with (hopefully) helpful tips. But then I thought: I wouldn't want to work with this person. If a project relied on such a resource, I'd be doomed. My team would suffer. Countless hours in overtime would have to be considered. I decided not to post that comment, then. I didn't want to tell that person that I think he/she is not qualified. I want to help, I want to motivate. But I also realize that in the greater picture, I am not helping. I want to work with people that deserve it. People that are skilled and have worked hard to get there. Maybe fresh and young (in the sense of little industry experience, not age) - yes - but ultimately I will not pay you for teaching you something without getting the output my team needs. If that becomes the case, then you should pay me. How do you feel about this?",u/evaluating-you,"Friday, February 7, 2020 at 9:24:11 PM GMT+5:30",4 yr. ago,"Thanks for posting this.
As I told my students recently, “yes, there are people out there who can easily self train themselves into a six figure programming job. They already did. If you didn’t already do this, you’re not one of them, and that’s fine, they’re extremely rare. Now let’s start learning.”",Comment deleted by user,,,,Junior Dev here! I just signed up for the 7-days free pas sat codeacademy.com and now preparing for a job interview. I think im alreay really good at making containers and declaring clever ID names in Html. So yea you better watch out cuz im coming for all your jobs.,"Excellent.
I would add to the ""Somebody has going to be the a**hole that tells you the truth"" aspect of this: Not everybody is cut out to be a programmer.
There are certain personality traits that add greatly to becoming a good programmer; problem-solving being one at the top of the list. Some people don't have those traits, and it's not that they
can't
learn to program, it's that they probably should abandon it as a profession.
I often see posts similar to ""I'm really struggling with learning, and I'm not enjoying it at all"" on this sub. It may seem nice to support those people, but it's not always appropriate. We wouldn't do it with other professions. ""Hey, I'm struggling at med school, and the sight of blood really freaks me out"" no problem, just keep at it. ""I don't enjoy being in a car all the time, and I've crashed several times in my first few weeks as a cab driver"" oh, you should just keep driving, you'll get better!
People are not interchangeable, and we shouldn't think all professions are either.","I just wanna build my own website man, lol.",Shit I have an Associates degree in computer programming and I deliver pizza for a living. Going back to school in the fall to get my bachelors. Maybe I can find something after that.,"Thank you for sharing your perspective! As a computer science student, I often wonder why anybody thinks programming is something that can be mastered in a few weeks. The people that are really in it know there's a lot more to good design than whether an app simply works or not.
Where I come to worry is that prospective students might be scared away from even attempting the journey in the first place. I don't know that a lot of people come out of those quick bootcamps thinking they're coding gods. (Do they?) Even if they did, trying to sneak in to a company with faulty credentials is risky. That's why I think portfolios are valued. They prove that you have mastered the concepts that matter at that particular job. We could help firms learn how to hire for these fields so they are adequately staffed with workers based on ability, curiosity, and work ethic. Hopefully this could help us see a more diverse work environment, as well.
I think it is important for computer science learners to maintain their confidence level despite how they may perceive themselves. We are often to worst at judging our own abilities. With a confident attitude, one might be more inclined to succeed professionally, and then will have an increased chance at becoming an actual subject matter expert. It simply takes dedicated effort and plenty of time. Of course no approach is without its downsides, but surely we should be more encouraging than not?"
How to Program: My new YouTube Channel pulling from 7+ years of experience working at Amazon and Facebook to teach people programming.,"Hi everyone.
I've worked in the Software industry for over 10 years including my last job which was spending 5 years at Facebook working as a Senior Software Engineer and Engineering Manager.
I got tired of seeing people make the same mistakes in teaching others programming, namely introducing hard concepts too early, not starting with very simple basics first, and not teaching solid Computer Science fundamentals early on.
I started a new YouTube Channel to teach people programming:
https://www.youtube.com/channel/UCZIoQFEhSJxBRQUZ1g54Z1Q
I plan on adding a new lesson at least once a week.
If you are interested in following along, please subscribe! Even if you already know a bit of programming, I hope you will still find some interesting things amongst the videos I am putting together!",u/imperio59,"Sunday, July 23, 2017 at 7:58:00 AM GMT+5:30",7 yr. ago,Comment deleted by user,Subscribed. Please deliver,"Cool.
What programming language do you plan on using in your videos?","Would love a sprinkle of intermediate to advanced lessons as well. There's a dirth of beginner material but not too much for what comes after. Thanks, subbed.","If this would have anything like data structures and algorithms then it'll be worth to subscribe. Cause I find trivial problems, like sorting and binary trees, very hard to grasp given that I do not know when to use which. The internet is daunting with information so may a fast-as-you-can meets eli5 kinda explanation would be a perfect match.",,"Not aware of this sub ever exist until your post made it to
r/all
. Subbed!",I've subscribed. For a newbie like me with a limited amount of time this channel will be in use. Keep it up!,"I'm curious to hear what your reasoning for introducing concepts using an Assembly style language is, particularly your choice of introducing GOTO as the first exposure to flow control.","What I always see lacking with channels like these or the new concept being pushed that ""software engineering is the next blue collar job"", basically stating that anyone can spend an hour ""learning to code"" is that actual software design and architecture are rarely discussed. Sure you can teach people to copy and paste code, but to get them to critically think about
how
it should be designed and then implemented is entirely different and rarely discussed. Any plans for that?"
Senior Software Engineer advice to Junior developers and/or newbies (what to learn),"I work as a Senior Software Engineer in the UK and I'd like to lend my advice to new developers who are just starting out or what to become developers in the future. My experience is limited to the UK but may be applicable in other countries. And of course it varies on what you want to acheive as a software developer. My experience is in business and FinTech and I have been developing software professionally since the early 2000s and a lot has changed in that time. I am 44 and started programming when I was around 15. I started with Visual Basic and played around with Python and few other languages. But primarily I use C#, SQL using AWS and Azure platforms.
So anyway, here's an un-ordered list of things you should probably learn and why.
Pick a language you like and get competent with it, don't fret the big stuff, just learn the basics. I would recommend a business focused language such as C# as it is very well supported.
While doing the above, learn Dependency Injection at the same time.
Start learning coding principles, such as SOLID, DRY, Agile software development practices. These will hold you in good stead in business. Many business use the Agile framework for project management, so learning how to code in an Agile manner will make things a lot easier for you and your team. I recommend reading the following books, all will give you good grounding common coding techniques in business
Clean Code and The Clean Coder both by Robert C. Martin (Uncle Bob),
Design Patterns: Elements of Reusable Object-Oriented Software
Head First Design Patterns: A Brain-Friendly Guide
Refactoring: Improving the Design of Existing Code
Learn how to write behaviour based unit tests! Behaviour Driven Design will help ensure your code does what it is meant to do based on the business requirement. Learn how to write tests for your code by testing the abstraction and not the implementation. Test behaviour and expected results, now how those results are derived.
You don't need a degree! If anyone tells you otherwise they are lying. The grads I have worked with, while knowledgable about computer science subjects, have been terrible coders. It's nice to know these things but most of the time some of the subjects are not all that relevant to business coding (as I said I am from a business background, so it is possible that if you want to go more indepth then a degree is most likely very useful). By all means get a degree if you want, but what you actually need to get started is experience. You only get this by coding and developing software, making mistakes and learning from them and learning from more experienced developers.
Ask questions! ALWAYS ASK QUESTIONS! It's the only way you are going to learn. There are no stupid questions. Don't be embarassed, be a pain in the ass! As a Senior I would be more concerned about devs NOT asking questions than those who constantly bug me. I want to be sure you are doing the best you can.
Learn a cloud platform! Your code has to be hosted somewhere (if its not local) so learn a cloud platform such as Azure (recommended), AWS (somewhat recommended) or Google Cloud (meh!). Learning this kind of thing will really help in the dev ops world where you are responsible for coding AND deployment AND support. You will learn fast when you have to support your product.
Learn Agile Scrum practices. A lot of businesses use this method to manage their projects. A good book on this subject is ""Scrum: The Art of Doing Twice the Work in Half the Time"". It's pretty much essential, as the days of just coding what you want how you want are pretty much gone, especially in business. See coding practices above.
Learn a datastore. This could be My/MSSQL, Mongo, Cosmos anything. You don't have to know it inside and out but an ability to create and run queries will be good, especially if you can do it in code.
Also, learn a framework like Entity Framework or Dapper as your ORM (Object Relational Mapping) framework.
Learn security basics. Read up on OWASP and appreciate common methods of attacks on your code and learn how to mitigate the risks by coding defensively.
EDIT: Learn GIT! Learn how to branch, fork, merge etc. It's so essential.
EDIT: Learn REST. Representational State Transfer. A very common paradigm for building web based APIs. It's super easy and intuitive to understand, so no excuses.
So thats a minimum I would expect from a dev in my team. But I would not expect them to know it all straight away. Just having a good awareness of the subjects and a willingness to learn.
Do your own projects and make it fun! Make a Git repo and show off your code. Coding makes you confident and learning from mistakes and remaining humble and willing to learn is the sign of a good developer. No one knows everything and ignore those that think they do! Even the experienced ones.
I hope this helps. Happy coding!
EDIT: It's nearly midnight here in UK. I need to sleep. I will answer as many people as I can in the morning. You can add me on discord Duster76#3746
Great to see so many responses",u/edgeofsanity76,"Wednesday, August 25, 2021 at 12:21:46 AM GMT+5:30",2 yr. ago,When you started coding professionally how much of this did you know and how long did it you to learn and apply all this at work?,"Another piece of advice:
Learn how to use Git! The bane of my existence is having to walk through the code-contribution process with junior devs. You don't have to be a git wizard but you should be familiar with forking, cloning, branch creation, issue tracking, commiting, pushing, opening PRs, fetching and rebasing.
The junior devs who come onto our team and are already familiar with Git hit the ground running.","As a minor retort here, aws is a better learning place for devops than azure specifically from the perspective that it holds more market share(ie more likely to find a job that uses it) and the documentation is a bit more user friendly(simply because it’s been around longer so more bases have been covered).",,,"I’m agree with the post except the part that says you don’t need a degree.  There are some scenarios  where I recommend skipping it but for most cases I highly recommend it.
The degree itself opens doors and allows you to negotiate better in the future.  Also some companies will straight refuse prompting you to higher levels if you don’t have a degree.  Last if you are young it’s definitely worth it.  You can still get work experience with internships etc
I know fresh computer science grads get a lot of shit.  But this field is highly complex.  Imagine a single medical degree lasting 4 years where people expect you to be an expert in everything.
Bottom line get the degree,  as I said earlier there are very few instances where it’s not worth it.","Oh get the degree if you have the chance, my point is, you don't need it to get a development job.","UK as well here.
I see many posts here about getting hired and advices that looks bare bones: learn a Language's Core fundamentals, Framework, SQL and projects. However, now the deeper I look I see things like your suggestions and also CS fundamentals like DSA which makes the learning time range from 6 - 12+ months.
So in your opinion: What are really the makings of a solid backend programmer candidate looking for their first job?",,"My 2 cents ( 11 years of professional software development experience in Fintech, healthcare, edTech)
Get better at coding but also understand the business end of the software you are writing, that will help you make better design decesions and also you won't mess up big time.
Try to get into a product based company as soon as possible, project based Dev shops are great for learning but you'll eventually burn out doing same shit in different style with each project."
Programming pro tip: learn to read code. You’ll be doing a lot more reading than writing most of the time.,"I’m not a very experienced programmer, I’ve been in it for like 1.5-2 years professionally now, but this is the best piece of advice that I can give.
If you don’t have a job yet, try to get some project from GitHub and customize it somehow, play with the inheritance, just do anything that will force you to read someone else’s code.
Can’t tell how many times I’ve fucked up or taken a long time or bugged my seniors because I just sucked at reading code.
Edit: this post went way beyond what I expected. It’s great to hear from other (and even more senior) devs that we share from this opinion. Thanks for the awards!",u/LeatherNoodles,"Saturday, February 20, 2021 at 2:24:49 AM GMT+5:30",3 yr. ago,"You’ll be doing a lot more reading than writing most of the time.
You are correct. Unfortunately when candidates interviewed for jobs, most of the time they are asked to write code, not reading/debugging code. At least that's what I experienced in my career. That's why when I was hiring people, I asked them to read a design doc, then read a source code and asked them to talk about it.","And then when you learn to read code, learn to recognize the code that is read easily from the code that isn't.
If you can recognize code that is hard to read, you'll recognize when you're writing it.
This is very important because in 6 weeks, you'll be trying to read it to figure out what the fuck it does.","For every line of code you write, you're going to be reading 5 more. And then reading them 5 more times, and then rewriting it for more efficiency then repeating that process until forever.",Errors and stack traces as well. They're trying to help you figure out what went wrong. Don't ignore them.,"One little addition, use a debugger to understand the code and the flow. When you just read the code you often need to jump in between packages, classes and method calls. After a few steps you can get lost and you forget how you got there. A debugger helps you with that. Run the code, put breakpoints, read values and look at the call stack trace. Would really help you!",,"Just over a year into my first real job, and I agree completely. Everything I've done has been modifying/adapting/adding to old code to do new things. Some if it is stuff from long gone consultants that is known to be a mess too, and as nice as it would be to start over from scratch, there's just not enough time.","I only started learning what code was ACTUALLY doing until I started messing with github projects that were finished and I could break them, mess with them, modify them and go... oooooh that's why. If I was starting from square one I'd be going straight to github so much faster. My god, all those nights of beating my head against the wall trying to understand certain basic concepts would have been so unnecessary if I'd just seen working code. Working code I can play with and see WHY it works in the first place.
I'm sure everyone learns differently but there's zero substitute for getting your hands on something that just works and copying it, emulating it, using it, modifying it etc. Fuck I wish someone made me do that sooner","I am a 41 year programmer/interviewer  Here is my rant:   Learn to read different styles. Just because you learned how to something in school the “proper” way, doesn’t mean you will see it in the wild. I have debugged a code base of C and C++ mixed written in Borland Builder around the year 2000. Usually, it looks really ugly at first and then you start discovering the original coder knew more than you first thought. Tricks to speed code up. For instance,avoiding linked list objects when not 100% needed. You can just build one for yourself without the features you don’t need. Increase speed here. All in the name of performance.
The interesting thing is I can see why these methods are faster, produce standalone code under 1MB, and if well documented can help you later!
Reading this kind of code will strengthen relationships with the original coder (if you can find them) and understand the wild, Wild West from the beginning if the internet. We all just did some things and it worked.
Sometimes you have to remove the guards on your power tools to get shit done.","This is good advice. Especially when trying to implement third party SDKs/packages for example, looking at how the example projects are written can really help you ease it into your own."
Github Repo with 100+ Free resources to learn Full Stack Web Development. Thank you r/learnprogramming!,"TLDR:
Github Repo with 100+ Free resources to learn Full Stack Web Development
18 months ago I dove head first into Full Stack Web Development. I wouldn't have been able to get off the ground without this sub. So, I wanted to give back a little. I'm a chronic note-taker, and anything that I have found useful, I've saved along the way. Yesterday, I started cleaning them up, and added them all to a
github repo
. I still have a ton of links to go through, but wanted to release this in case others wanted to add links as well.
My links focus on Javascript, React, and Node.js. It's a mix of reddit posts, articles, tutorials, classes, and courses.
Everything is Free.
There is also a wealth of information on interview prep and applying to jobs. This is all stuff you could find on the internet on your own, but hopefully this format will make it a little easier.
Whether you're just starting to learn, or you've been learning for a while, hopefully this is helpful! Thanks again for helping me out along the way as well!
Here are all of the topics that I have:
Start Here
How to learn
What is the Most Useful CS Bookmark You have
Free Full-Stack Programs & Classes
Learn HTML
Empty because I already knew HTML. Feel free to add links!
Learn CSS
Pretty empty, for the same reason as above.
Learn Javascript
Learn React.js
Learn Node.js
Learn APIs
Learn Git
Games & Challenge Websites
Free Programming Books
Open Source Contribution Opportunities
Am I Ready to be a Developer?
Software Developer Success Stories
Resume's, Portfolio's, LinkedIn, Interview Prep, & Salary Information",u/web-dev-123,"Thursday, March 16, 2017 at 11:44:12 PM GMT+5:30",7 yr. ago,"Looks like a lot of really great resources, but it kinda bugs me that it says ""Full Stack Web Development"" when this doesn't include any resources for ( or even any mention of ) Back-end Languages, Databases, Server Administration, etc.
The ""Full Stack"" in ""Full Stack Developer"" generally means
everything
that makes up the full web stack, not just the front end.
Perhaps it should be renamed to ""100+ Free resources for learning
Front End
Web Development.""
For someone getting started, this seems misleading to exclude at least some mention that all of these resources only focus on the front end.
Edit: since posting this comment, looks like some node resources were added. It's a start.","18 months ago I dove head first into Full Stack Web Development.
And what are your results in that timeframe?","This is great stuff, thank you for making this! :)","Good job OP.
I recommend makes another repo for paid resources. Also if you add or remove resources make sure your git commit comment says why.
Example: ""Removed Rails Tutorial because it's based on an older, obsolete version of Rails.""","Thanks for this. I'm interested in node.js, so I took a look at those resources. The link for
Colt Steele's Bootcamp
does not work","Though I enjoy these resource repos, it makes me wonder why nobody ever uses Gists for these.",Good stuff man. Thanks for putting in the time and sharing!,Holeeey shieeeet - thank you!,"So stoked to have a resource like this, thank you!",Full Stack (read: Front End) Web Development
"In December 2019, I got fired from my civil engineering job. In July 2020, I started learning programming. In February 2021 I got offered a job as a Junior iOS Developer! I start tomorrow!","I just wanted to thank this amazing community for helping me getting started into the journey that is the programming world. I am so happy!
EDIT: Sorry for not replying. I've been celebrating. I promise I'll respond to every single message in the morning
EDIT 2: Thank you so much for everybody's words. I tried to answer as many questions as possible, but now I have to go get ready for my first day. I'll try to keep answering questions later today.",u/dickdeamonds,"Tuesday, February 2, 2021 at 2:33:39 AM GMT+5:30",3 yr. ago,"To all those who are asking how he learned! and those who cant wait till morning.
I've seen this guy a few months back.
He studied the free Harvard's CS50 intro computer science first
Then continued his path on IOS programming by learning Swift.
Your welcome.",How did you learn? What projects did you do?,"Posted and ghosted us =(
EDIT: Nevermind he is here! Sorry",,DAMN IT OP. WE NEED ANSWERS.,"Congratulations, make us proud!",Congrats I'm in the same boat. Lost my job in mechanical engineering and now shifting to programming. Still too early to get a job. Did you do join a Bootcamp?,"Oh wow.... So there’s hope for me! I lost my civil engineering job in november 2020, I’m learning to code now. Thank you so much for the hope man!",,"You learned enough programming to get a job in 7 months?
I've been programming for a lot longer than that and I have no idea how anyone learns anything that fast."
[Free] Google is giving free courses.,"Total Course: 126 courses.
There are Bunch of programming courses (scroll down to end)
Check it out
https://learndigital.withgoogle.com/digitalgarage/courses",u/pramit_marattha,"Sunday, April 12, 2020 at 6:29:46 PM GMT+5:30",4 yr. ago,Another one to add to the bookmark collection of courses I'll never get around to doing. Thanks,Comment deleted by user,These are not for free. They are just 7 day trial and after that you have to pay.,"this is not a good resource for programmers imho : 99% courses on soft skills, digital marketing, how to use google ads, how to use social media better, and a few coding courses for python but all of them are ""beginner"" and ""first steps in"" oriented.",Will it be free for ever or just for a limited period?,Some of those are coursera and not free.,"Thank you!
Added it here in my repository at
https://github.com/Rubix982/Free-Educational-Resources-During-Corona-Epidemia/blob/master/README.md
.","Not sure if this fits on the Megathread (unclear if course was paid), but just wanted to point out it is out there if unaware. (I'm new to reddit, and have no idea how to flag duplicates or poke moderator). Thanks for sharing!
https://www.reddit.com/r/learnprogramming/comments/fu52z8/megathread_free_courses/",,Most of them are paid
"A while back, I shared the idea of an Urban Dictionary for coding terms. You liked it, so I built it.","A few months ago, I posted here about a
Urban Dictionary/Stack Overflow for coding terms
, and you guys were really encouraging of the idea. While learning to code, I'd often fall down a rabbit hole of research for things I didn't really need. There are lots of resources that teach you
how
to do something, but few explain
when
and
why
. So, over the past few months, I built
Hackterms - a crowdsourced dictionary of programming terms
to answer these questions:
at a high level, what does this tool/process/concept do? When is it used? What are the alternatives?
Is this worth my time to learn now?
Check out the definitions, let me know what you think, and feel free to contribute!
TL;DR: Hackterms - simple definitions that explain when/where/why programming terms are used (but not
how
to use them). Built in Node/Express, Mongo, jQuery.",u/maxverse,"Saturday, February 24, 2018 at 10:36:23 PM GMT+5:30",6 yr. ago,"As a beginner programmer, this helps so much with connecting the dots between concepts. Job well done!",Comment deleted by user,Added the obligatory recursion -> recursion for you,Cool concept. Just watch out so that it doesn't go Urban Dictionary's own way and people start inserting their individual random made-up terminology.,"If you want some content for it you could always port the
jargon file
into it.","Good job Reddit, we hugged it to death.","wow awesome. i remember that post and am impressed that you went through with it. The site looks great, however there are a couple issues.
First of all, most importantly, you need to fix the issue where after a user logs in, they can no longer see the ""add a definition button"".
you should put the ""add definnition"" button on the main page, and ot just make it appear when you search for an undnefined term.
Second, I would advise re-formatting the ""all tags"" page to use a grid and not a list, it'll be easier to read that way. You can use
masonry
or inline-block classes, or some other approach.","YOu should URI encode your URLs. For example:
https://www.hackterms.com/api%20(application%20programming%20interface)",Comment deleted by user,"Chooses Visual Studio Code from the trending terms. Finds this:
""Another link in the chain of free and cross-platform software that Microsoft has released in an attempt to get a sliver of respect back from the developer community.""
Holy shit, some people just love hating on Microsoft for no reason other than being part of the circlejerk."
"The Udemy ""Automate the Boring Stuff with Python"" online course is free for the next 9 days.","https://inventwithpython.com/automateudemy
(This link will automatically redirect you to the latest discount code.)
EDIT: I've switched the code to MAR2020FREE, although it seems to not be taking. Check back in an hour or so. It should work eventually.
You can also click this link or manually enter the code: FEB2020FREE2 (on Monday the code changes to MAR2020FREE and Friday it changes to MAR2020FREE2, but the above link should always work.)
This promo code works until March 9th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.
Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. I won't be able to make codes after this period, but I will be making free codes in the future.
You can also purchase the course at a discount using my code MAR2020 (or whatever month/year it is) or clicking
https://inventwithpython.com/automateudemy
to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)
Frequently Asked Questions:
The course is made for complete beginners with no previous programming experience. If you already know some Python programming, you might want to skip to the later parts that cover the modules that do web scraping/updating spreadsheets/sending emails, etc.
If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at
https://inventwithpython.com
The 2nd edition of Automate the Boring Stuff with Python is now available online:
https://automatetheboringstuff.com/2e/
I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
I wrote a blog post to cover
what's new in the second edition
You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.
Signing up is the first step. Actually finishing the course is the next. :)
There are several ways to get/stay motivated.
I suggest getting a ""gym buddy"" to learn with.",u/AlSweigart,"Sunday, March 1, 2020 at 3:26:53 AM GMT+5:30",4 yr. ago,I finished this a couple of weeks ago and I honestly think it’s great. I started using the stuff I learned straight away because the examples you work through are genuinely useful and can be used for all sorts of different things. (I promise this isn’t Al using another account),"Al, are you serious? for a single mom of 3. thank you thank you thank you! i have been eying this for months!!!! And exactly what I will need.","me: Ooh, sounds good, I should go sign up for when I do have time!
also me as I finish logging in:
You purchased this course on Dec. 3, 2019",Thank you!,"You're the man, Al!","You, sir, are a rare breed.  Thank you so much, and I will ensure that your generosity is put to good use.  All the best!",I want to learn to code but haven't started yet. Would this be a great starting point? I think eventually i will apply to a data science program. Opinions?,There’s a book - will let you know the name once I remember - that’ll let you automate this boring and confusing coupon code stuff...,"Thank you
u/alsweigart
. Appreciated.",
"Learn the syntax of any programming language really fast, like in minutes","Learn X in Y Minutes
^
This helped me when I wanted to learn JavaScript really fast to start developing web apps (I knew some basic things in C++). Though you would probably need a basic experience in any other language. This could form a good base to start practicing right away.
(I don't know if this has been posted earlier. I thought this is a really useful website everyone should know.)",u/1TMission,"Thursday, December 26, 2019 at 5:58:14 PM GMT+5:30",4 yr. ago,"That is actually very useful , thank you.",Wow! This website is a golden nugget. Like water in the middle of the desert. Like sunshine after a rainy day. Like weekend after a long week. Thanks.,,"Do many people use derek banas? Easiest way for me to learn a new language imo, short and to the point, and he tries to not skip over anything",Thank you for sharing this!,"I don't think this is very good to ""learn"" anything. However, it's very good as a glossary. Specially good if you're an experienced developer that just needs to understand how exactly you call an unnamed function to build hashmap in a some random language or something of the sort.
Also I like how the third thing is already lambda calculus, which is one of those things that can fly over the head even of experienced developers.",Thank you. Perfect to read in trains instead of scrolling useless things.,I went to bookmark the site and it was already there. I should look through my bookmarks more often.,,My problem always has been learning how to do something in a language not the syntax.
A list of 100 Projects to build,"I've compiled a list of about 100 projects that you can try out to learn more about programming and also at the same time build serious projects that you can put up on your portfolio.
Do check it out and tell me what you all think! Here's the link:
https://github.com/arpit-omprakash/100ProjectsOfCode",u/Aceking007,"Saturday, October 10, 2020 at 3:21:32 AM GMT+5:30",3 yr. ago,,Very cool. I appreciate the link.,"Say i made a big project, how do I prove to employers that I made myself? Like I could've just copied the code from somewhere. I never understood how self-made projects could be something to put in your CV.",,This is the equivalent of those gym exercise posts that I will save and never do.,You sir/madame/other have a slightly terrifying list.,Build a OS Yeah no f that,Sir what are you? The programming God?,"Building an OS is a monolithic task, but for a fun project, its possible to build a toy UNIX clone that works. The parts would be Env setup Boot code Screen Gdt/idt Irq/pit Paging Heap Vfs and initrd Multitasking User side
While a lot of parts, anyone whos taken an OS class in college, or even beginners can finish this in a month or two.","Thank you for this! I will be bookmarking it :)
Edit: I'm thinking Text Editor using Qt!"
List of YouTubers that teach coding you may find useful,"The list:
https://github.com/JoseDeFreitas/awesome-youtubers
.
It contains YouTubers that teach you about programming (and other tech-related topics). I'm sharing this because I often find videos much more useful than documentation. They have good playlists to learn from, apart from new videos they upload every week. The list is being updated every day so you can expect many more YouTubers to be added.",u/JoseFrey,"Thursday, September 24, 2020 at 9:42:19 PM GMT+5:30",3 yr. ago,Corey is king for Python.,"""The Cherno"" for C++ and Game Engine development. Hecka insightful and awesome","Also ""TheNetNinja"" is great for web development
Edit: Fireship too","I'd absolutely like to recommend Kevin Powell's channel for web development. He's a total magician when it comes to CSS, but the thing is he demystifies it! I really love his content.",,"Personally, out of the ones mentionned here, I really like
https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA
(Back to Back SWE) for data structures and algorithms. He does other things too, but I've mainly consulted his channel for that.",Dev Ed is an all round good teacher and confidence booster for web development,"Where is my boy Tim Corey? His C# Tutorials are amazing
https://www.youtube.com/user/IAmTimCorey","Not coding specifically, but I think 3blue1brown would be a good addition as well! He focuses more on the mathematical side of CS, and he's made informative videos on the theory of error correction, neural networks, etc.","i think ""LiveOverflow"" ""NetworkChuck"" and ""javidx9"" should be there too. Everyone got invredible skills and are fun to watch.
Edit: and thanks for the list. There are many i didnt know i am happy about to look at."
Software Engineer === Student,"For context, I'm a lead engineer at a 200+ man company with a team and deliverable list of my own.
NO ONE knows it all. NO ONE. The tech field is booming and expanding at a rate much faster than any one mind can understand. We're all here to learn, apply (with bugs), and keep learning.
To all beginners, stay encouraged. To all wizards, stay humble.
Keep typing y'all.",u/impspring,"Friday, January 14, 2022 at 11:42:53 PM GMT+5:30",2 yr. ago,"Yeah, a lot of time early learners get lost in the weeds.  Learning how to
program
is completely achievable.  That's what's important.  Don't get caught up in the latest frameworks and APIs and stacks or trying to predict what the
next
""latest"" will be.  Just learn programming and the rest will happen organically.",thanks big guy,Thank you sir. Now I need to find a job in SE so I can officialy say that I dont know anything about SE,"Yeah in my experience most of what makes someone a good/adaptive programmer are the skills to learn new things.
One example of such a skill would be finding isomorphisms in programming languages and problems. As in, ""oh, this is really similar to this other thing I know so it's really easy actualy.""
You don't ever know everything, but you can practically know everything by being able to very quickly pick up new concepts and tools using the information available on the internet.
I don't know everything, but I'm confident that I can do anything I need to because I have the skills necessary to figure out how to do it.","That's why collaboration between those who know is very important now than ever. Now is the time when engineers should acquaint themselves with people skills too and act like a hive mind to solve problems. Open Source is a great example but there's still room for learning and improvement. Also, the infighting of GPL vs Others must stop.",,"Dev at a 10,000+ software company.
This is frustratingly true.
The only thing you really master is learning new things and adapting new solutions. I just wish my job would get boring already and let me coast.","Definitely good advice! One thing I've learned since joining this industry is that there is always more to learn.
You should really hire some women though, a company of 200+ men sounds like a hell of a sausage party.",Very good point. The one skill you need in tech…learning. It’s rapidly advancing and will continue to accelerate and it’s never too late to join in the fun.,Just finished my first week on the job as a software engineer. Definitely needed to hear this. It can be easy to get overwhelmed by all of the things I don’t know.
"The greatest pain in programming comes from thinking ""I should understand this"". Screw that. It takes time and repetition to really understand something. Do you think a piano player can play a piece after only one runthrough?",Keep the expectations on yourself grounded and stay on track. You will get there.,u/allun11,"Monday, June 28, 2021 at 11:52:18 PM GMT+5:30",3 yr. ago,,,"I felt that. The most demotivating thing is me trying to understand something, check what time it is and think ""shit, I've spent so much time wrapping my head around this and it's almost dinner time. fuck my stupid ass brain""",Without struggle there wouldn't be any real understanding. We sometimes forget how much we already know and realize the strives we made and instead focus on trivial things like how many hours it took.,"My code doesn't work and I don't know why.
My code works and I don't know why.
I've been a developer for nearly two decades and can verify these are the only two feelings that programmers have.","Please tell this to my boss who’s confused as to why I’m struggling with the undocumented and legacy custom framework for which I got virtually no training, as a junior dev","Oof that's never fu. Let me guess, boss isn't even a coder?","I'd rather work on difficult problems than simple ones. The feeling of finally getting it is so much more satisfying. The more frustrating the issue, the more satisfying the solution.",Thank you for this! Definitely helpful right now.,
The Odin Project is PHENOMENAL.,"I just finished working my face off with the Odin Project. Finished fundamentals in 2-3 weeks (8 hours per day as fulltime job during vacation). The things I can make now and the knowledge I have now (it's a refresher, haven't coded in years) compared to 3 weeks ago is INSANE!
It's all laid out so well, it's free, the quality is high, it's easy to follow and understand. And also, it knows when it gives you more that you can chew, and it also has many times when it says 'It you don't quite get this year, read X article first'. So great.
I can recommend this to anyone learning programming. So happy!
https://www.theodinproject.com/",u/WolfofAnarchy,"Sunday, November 14, 2021 at 2:16:43 PM GMT+5:30",2 yr. ago,,"The best thing about Odin Project IMO is it isn't another ""Come learn how to make a quick app and get your feet wet,"" it is ""This will prepare you to showcase your skills and land a job.""
The thing that got me into the Odin Project was the massive number of success stories from people out of work with a college degree and landing a job within months of completing the project.","I never understood why there are so many comments recommending paid courses (like from Udemy) that have inferior quality to free resources like TOP and fullstackopen.
Complete TOP then complete fullstackopen. You will be at a comfortable junior level and it's 100% free.","Love it too, started one week ago.
I love how it teach you from zero, like really from zero.
Oh, I hear that after you were done with Odin Project, you should move to fullstackopen.com","8 hours?? How are you able to keep learning for that long I can barely do 3 max before I have to stop staring at the computer. Even professional devs don’t work for 8 hours, I think the average I’ve seen on Reddit is like 5hrs with lots of meetings and also a lunch break.",What programming languages do they teach?,"Wow that's amazing!  Anything like that for Python, C++, or MatLab?  Doesn't have to be free, just structured and quality!","I loved Odin Project until I got to Flexbox, that's when I realized i needed more than what they provided. Haven't been able to finish the landing page project and really down about it.
For everyone who reads these success stories, there are people out there who don't breeze through it, who really struggle. I am one of them.",,I tried so hard to be a web developer but I got stuck on Java script. Its very mathematical in nature and I have such a hard time with math.  I will try again soon though.
I've written a 200 page e-book on how to build an Instagram like social network from scratch with Ruby on Rails. It's yours for free (no sign up required).,"Hey guys!
I've been writing a series on how to build an Instagram clone with Ruby on Rails for the last few months and finally it's finished!  To celebrate, I've converted the whole series to a pdf and edited slightly so it feels more
bookey
.
Download right now here
No signup / etc at all is required and I hope you find it useful.  I had a great time writing it and working with the people who've followed along.
Ben
ps.  Wow, thanks for the support everyone!  My regular old blog is
www.devwalks.com
but I must admit that this book pretty much contains 95% of the content thus far.  I'm planning on building a Basecamp clone for the next series which will incorporate all of the good SAAS stuff.  Sign up over at the blog if that sounds like something that'd make you smile with joy.
You can pre-order the paid version of this book that is completely Test-Driven (industry standard) and formatted much nicer along with much greater detail.  There's a link for that in the front part of the book, I won't spam it here.",u/devwalks,"Monday, February 29, 2016 at 5:12:35 PM GMT+5:30",8 yr. ago,"Some mirrors just incase dropbox starts to limit downloads:
https://www.speedyshare.com/CVfXg/Let-s-Build-Instagram-with-Ruby-on-Rails-Free-Edition.pdf
https://www.sendspace.com/file/mbiuf1
http://uploaded.net/file/7jlzyrxl
http://en.file-upload.net/download-11351506/LetsBuildInstagramwithRubyonRails-FreeEdition.pdf.html
http://www.uploadmb.com/dw.php?id=1456756693
http://www.filetolink.com/e60950d911
http://www.file-upload.cc/96hd1grz04zv
http://uploadduck.com/SEz
http://1file.co/tm","Woah you hit almost exactly what I wanted to learn how to do with near perfect timing.
Thank you very much Devwalks.",Comment deleted by user,"Very nice! Ruby on Rails isn't a current goal but I'm excited to have another resource just in case. Thanks for providing this.
If I may ask, why did you write this? I mean, I'm not looking a gift horse in the mouth; I'm really interested in why you decided to provide it for free when you could have at least charged a few dollars for the PDF and probably have made that money.",Thanks for the book. Does anyone know if there is something like this for Python/django?,You're everything that is right with the internet. Thank you so much.,Someone may want to mirror it in case Dropbox decides too many people have downloaded the file.,"Hi Ben, just took a quick look and I like how often I'm seeing that goat :) Learning by being told (but not shown) which step is next really works for me... I'm excited to give this a proper run through as I'm learning Rails at the moment, thank you so much! The paid version will be out in April yes?","I remember Photogram, I followed the tutorial in the devwalk web. It was great. Since when I started the tutorial it wasn't finished I reached the last part at the moment and decided to extend it myself.
I am not sure what he added in the new parts after summer but my version has likes, comments, comment pagination (see more and see all) and followers. Also a mosaic view. You can check out how I did it, here's the
project
.","https://www.dropbox.com/s/9vq430e9s3q7pu8/Let%27s%20Build%20Instagram%20with%20Ruby%20on%20Rails%20-%20Free%20Edition.pdf?dl=1
For Auto Download"
The Best Way To Learn How To Code,"The thing that really frustrated me when I first started learning to code was what I now call the “foggy bridge”. It’s a long and dark bridge where everything on the left is too easy and everything on the right is too hard. So you’re stuck aimlessly stumbling across this damn bridge not knowing what you don’t know.
Most people new to programming suffer from an inability to find intermediate tasks and sources of knowledge to bridge the gap between being a beginner and becoming a proficient coder. The people who make it across the bridge do it by endlessly grinding through simple tasks or hitting their head against the wall of a project that’s probably way beyond their current ability.
This results in the vast majority of beginners getting frustrated and giving up before they should. They burn out. Not because coding is hard (it’s not), but because
learning to code
is hard. And it really shouldn’t be.
So, is there a better way?
For over a year, I was literally obsessed with finding an answer to that question. What’s the best approach to
learn to code
? It’s a deceptively simple question and the answer, as it turns out, perfectly explains why learning to code is so difficult in the first place. Or perhaps I should say why
explaining to others
how to learn is so
misleading
.
If you were to ask five developers what the best way to learn programming is, you’d probably get five very different answers. One guy will confidently say you have to start building real applications. Another guy will give you a huge list of links to blog posts, YouTube videos and online courses. There will be the guy who says his brother went to such-and-such bootcamp and it’s apparently awesome. The really nerdy looking guy will give you a .edu link to an introductory computer science course and somebody else will undoubtedly mention a well respected book or two.
You know what’s
really
frustrating about those responses? They’re all legitimately great answers. So why are you still left with that same feeling of discouragement you had when you first asked the question?
Here’s why: Learning to code is easiest when done in a particular order. When you try to learn it out of sequence, you’ll get
really
frustrated or
really
bored. Like trying to ride a bike without first using training wheels or learning your ABCs when you can already read and write.
The best way to cross the foggy bridge is to break it up into three separate but distinct segments. Think of these segments like you would think of borders on a map. They’re helpful for navigating but they aren’t real.
Learn syntax
Solve problems
Make stuff
Each segment is a prerequisite for what comes after, yet none of the segments are mutually exclusive. In other words, crossing the foggy bridge won’t be a strictly linear process. While each segment reinforces the others (independent of order) you should focus primarily on one segment at a time. If you do it that way, you’ll make it across the bridge faster, easier and with much less of a headache.
Let’s take a look at each segment in greater detail.
Learn syntax
This segment gives you a false sense of confidence which will quickly disappear when you move to problem solving. It’s the realm of countless introductory books, videos and courses. A lot of money is made in this segment because most people learn a bit of syntax and never go any further with it (not their fault, but I’ll get to that in just a sec).
There really isn’t anything lacking in this area. The market for learning the basics is so massive and so few people go beyond it, you’ll find an almost endless supply of material. Don’t get caught in the common trap of continuously learning and relearning syntax. Once you’ve read two decent beginner books on your language of choice, call it good and move on to solving problems.
Solve problems
Now this is an area desperately in need of some attention. It’s almost completely overlooked and I believe that’s the main reason so few people get past learning syntax. They have no direction other than vague advice to start making things, which is kind of like trying to ride a bike without ever having used training wheels. It’s possible but far from an ideal way to learn.
When you can take the syntax from the first segment and apply it without being told what to do, you’re in the problem solving segment. This is the very essence of
thinking like a programmer
and it is by far the most difficult and important part on your journey across the foggy bridge. In fact, It’s what I’ve spent the past six months of my life working on.
Beginners simply don’t have a source of intermediate tasks and resources to bridge the gap between knowing basic syntax and actually building stuff with it. They’re left with no other choice but to stumble across the foggy bridge until eventually they start figuring things out through sheer brute force alone.
Make stuff
Pretty much every developer I know went straight from learning syntax to making stuff (or… trying to). It’s very frustrating because not only are you learning to think like a programmer, you’re also learning about frameworks, all the jargon that goes along with frameworks, how to use an IDE and a bunch of other things I won’t get into.
Once you understand syntax and can actually solve basic coding problems on your own, it’s time to either contribute to open source projects or work on some hair brained idea you’ve got. Build stuff that makes you excited to get out of bed in the morning and prevents you from falling asleep at night. Passion will get you past the remaining hard parts.
The reason so many people get frustrated and ultimately give up on learning to code isn’t because coding is hard. It’s because
learning to code
is hard. It’s messy, loaded with jargon and it leads to extreme information overload. There’s just so much
stuff
you need to learn. So at the very least, keep your approach simple.
Learn syntax
Solve problems
Make stuff
Generally in that order.
For those who find themselves trapped on the foggy bridge, start with these interactive
coding challenges
.
EDIT:
This sub apparently gives out gold like it's candy. Thanks stranger.",u/memystic,"Tuesday, March 14, 2017 at 6:50:18 PM GMT+5:30",7 yr. ago,"In general, your post is very encouraging and nicely written.
It just irks me when people mix two distinct things (like you do as well):
learning
a programming language
learning
to program
The two items above are distinct and not the same in any matter. Especially beginners often confuse learning a programming language (in syntax and grammar) with learning to program (the actual, difficult part).
Sure, in order to be able to program, one needs both, a language and knowing how to program.
Your order of things:
Learn syntax
Solve problems
Make stuff
is definitely not the worst approach, but it brings one major problem:
Learning out of context is more difficult than learning with relatable context.
If you just initially focus on the syntax, you learn without context - you
memorize
and memorizing and programming don't go together. Memorizing kills programming
creativity
because after having memorized the general syntax (which up to a certain degree is a necessary evil), many beginners start memorizing
algorithms
in the context of their current programming language - and here is exactly where the problem lies. It doesn't make sense to memorize an algorithm in a certain programming language - algorithms need to be understood on a
conceptual, abstract level
independent from programming languages.
As an example:
In Java, you use a
Scanner
instance to obtain keyboard input, so people will write something along:
Scanner keyboard = new Scanner(System.in);

// more code

int value = keyboard.nextInt();
A beginner might want to memorize the above snippet for later reuse.
Rather than memorizing the code, it is essential to understand what the code does and why it does what it does in a certain way.
So, instead of memorizing the code, it is better to memorize:
When I need input from a keyboard, I need some object that can acquire that input
When I need a certain value, I use one of the methods of the object above to obtain what I need
This abstract concept transfers well across many languages. Once understood, all that needs to be done is to translate the concept into the actual implementation in the required language. Be it Java, C#, C++, or any other language.
Another example:
I want to iterate through an array:
for(int i = 0; i <= myArray.length, i++) {
    // do something with myArray[i]
}
Again, the actual code is secondary. I only need to know that I need a way to access each and every element in the array. How exactly I do that depends on the language implementation.
This
abstract
or
conceptual
learning becomes even more important with data structures and algorithms. It is hardly ever necessary to be able to recite the implementation of any algorithm in any language, but it is very important to understand the algorithm on a
conceptual
level so that it can be implemented in any given language.
Your item #2:
Solve problems
is where most people drop out of programming.
Why?
Because
solving problems
requires to learn a different way of thinking - thinking in
algorithms
or
abstract thinking
. This is a purely acquired and trained skill that initially requires lots and lots of effort and is very hard. It definitely gets easier over time and with more practice.
Especially in this step, beginners often make one major mistake: They give up too quickly (""I've been on that problem for half an hour and can't come up with a solution"") and resort to resources on the internet, which, in turn frustrates them because often the solution is either very easy, or way over their head.
When I learned programming, there was no internet and there were hardly any knowledgeable people around that could be asked, so I was forced to struggle and find the solutions on my own. Often, it took
days
to come up with something useful, but there was no other choice.
The internet with all its benefits has made people too much dependent and lots less self-sustaining. Instead of really biting through a problem it is way easier to fire up our good and essential friend, Dr. Google, and get the solution in a matter of seconds. Then, they implement the solution without spending time to actually understand it (copy-paste code monkey style) - which is a huge red flag. It is fine to look at other's code, but only as a reference and help to understand it. Especially beginners should write every piece of code on their own. This trains problem solving and analysing skills.
I am definitely stating that the more and longer you struggle with a problem, the better you will become as a programmer because you rely less on external sources.
Another issue:
When attacking a new problem or task, beginners often directly rush to the keyboard and start programming away. Again, this is the wrong approach. Before even thinking about going near the computer, especially beginners should spend considerable time to analyse the problem and to devise a solution on paper (not necessarily in a real programming language). The time spent planning and thinking about the task is not wasted, rather the contrary is the case. The better a problem is analysed, the more time is spent on consideration, the better the final result will be.
Again, back when I learned to program (before I bought my own computer), access to computers was extremely limited. I could access our school's Apple ][ Europlus for two hours per week in a single session. So, the majority of my programming was done offline - without access to a computer. I planned, I wrote my code, I debugged the code in my mind, and then, when I was sure that it would work and produce the desired output, I used my session to actually type in the program. Most of the time, the programs worked without problems - besides occasional syntax errors produced during typing.
IMO, learning to produce and trace code without a computer is an essential skill in the toolbelt of a programmer. This way, again, a programmer becomes self-sustaining.","Learning solid approaches to problem solving, making them become second nature, then approaching problem solving. Makes learning a language significantly easier.
Understanding the problem, pulling it apart, putting it back together again, knowing how to solve the problem in a more familiar setting (physical world, maths, etc.), then translating the steps of that solution into pseudo-code, followed by translating pseudo-code into an actual algorithm. Then it is a case of ironing out bugs, or going back and forth for a bit until your solution works.
The same goes for making things. Break the project down into easily digestible chunks, find similarities between these chunks and pre-existing experiences/knowledge. Then follow the problem solving steps, gradually adding those chunks together. Until you suddenly find you have made what you set out to make, or more often than not, something much better.
All the time while doing these you are learning your language naturally. As you would learn anything else, through experience and curiosity.","Thank you, this helps a great deal, god damn this bridge seems to go on forever!","Please,
no hidden advertisements
!
Otherwise, I am forced to remove this, generally good, content.",No one tells me how to learn.,"You are right, the gap between beginner and making own stuff is very, very hard. But I think you have to learn syntax along with solving problems. The problem is (again:)) that most beginners rush into progressing with book, course etc. and don't take time to solve exercises diligently. Also some books need more exercises. Good leraning curve with difficulity of exercises is crucial - you need challenge, so you can build your knowledge blocks, but too hard is frustrating and doesn't really allow you to learn that much.","The reason why people struggle to get over the ""syntax"" stage is the same reason why people ""suck"" at math.
People are too lazy to practice problems and power through adversity. Instead they rely on crutches and shortcuts that limit the development of their intuition. As a result, their skills are incongruent with the time they put into ""learning programming"". These very same people conclude that ""programming"" is not for them.
This is why people who practice mathematics pick up programming quite easily. They understand that CS like math, is not a spectator sport. They understand that you can't just read code and memorize syntax/solutions/recipes. I suspect that the vast majority of people trying to pick up CS in a non-traditional setting come from a non-quantitative background and are generally math phobic. Therefore, they have limited experience with quantitative subjects and apply learning strategies from past domains, resulting in subpar learning outcomes.
From my experience TAing math/stats/cs courses and talking to my professors about my frustrations, there's no easy way around this. Some might hit a wall earlier than others but eventually, everyone runs into it.","I truly believe that all of this can be very well tackled by learning coding or anything in general through reputable books.
Im no coding pro, but when I was trying to even grasp the basics of C programming and other topics like arduino/ AVR hardware through "" free and fun "" online websites, I just didnt progress at all.
That all changed when I began reading reputable books on those topics aimed at beginners. Now, I am learning at a rate I could have never imagined myself achieving before.
Books in general simply go through a lot more revisions and professional vetting ( even by teachers who are skilled at making learning structured and understandable ) with a much larger team. The content is generally very significantly more polished and pleasant. Especially when they have to go through nitty gritty stuff. Books will unravel them nicely whereas websites tend to skim over them to keep the content ""not boring"".
Of course, theres a time and place for self directed ""google learning"". But I believe that should be done after you have achieved a good grasp of the concept and are simply using the internet to cover some gaps or find further project inspiration. Another exception is if you have a experienced mentor who can guide you along the content that you find on the internet.
Books are really irreplaceable man.","OMG you're the creator of SAIG! So nice to find someone outside the sub <3
This is great advice. I've just started learning how to code and I'll definitely keep this in mind.","When I was about 13, I started making websites from scratch with html and css. I didn't find it hard at all. However, as I got older I wanted to start building programs. I could never get over that hump, and still haven't. However, I'm taking an engineering programming course at school at the moment and what has absolutely changed the game for me is having to solve very challenging assignment problems using our code. The act of pounding through, experimenting different methods to accomplish tasks, then finally figuring out what needs to be done and finishing the problem is what has given me the true understanding of the code, and how to think on almost a mechanical level on what the code needs to do to solve the problem. Writing out an algorithm sheet to get started really helps when it comes time to write the code. Write out a sequence on what you think needs to happen, list the variables that you know, list out what you're trying to find, and determine what variables your missing, and how you can get from what you know to what you need to know in a sequential order. Anyways, rambling on, but really enjoying my programming class and it's all because we are given actual problems to solve. In the beginning its hard to conceptualize something that you can go try to accomplish with what you know. It helps being given assignments. This is something I haven't found much of when it comes to learning these languages online and such on your own."
"After years of Bad grades, mental health issues and lack of motivation, I'm drowning in job offers for the first time in my life. THIS IS AWESOME!","Not sure if this is the right place to post this, but I need to share this with someone right now or I'm gonna explode :D
For the past few years, I had a lot of doubts. My grades in uni sucked and I didn't do anything besides gaming, really. Well time went by and due to Corona my current job as a working job might not be guaranteed for the foreseeable future. I decided to start networking a little bit (writing applications and making use of my uni's carreer service) and before I even realized it I had to start turning down offers because I'm in the process of talking to a better employer every day.
Everyone who has some sort of doubts (most notably impostor syndrome), look back at what you have learnt. Think about what was the most fun thing you did and write it all down. Force yourself to remember what it was like.
Maybe my perspective is a little distorted because I'm on meds right now, but the last 2 weeks were some of the greatest in recent years. And that says a lot considering my gf of 2 years and I decided to break up last week.
Edit: I'm seeing a lot of people that are in a dark spot are replying. Feel free to DM me if you need to talk/vent!",u/Encrux615,"Wednesday, June 24, 2020 at 8:07:02 PM GMT+5:30",4 yr. ago,"Hey, that's great for you! Congratulations and best of luck with your career! Sucks about the girlfriend though, but you're taking it with stride from the looks of it :)",How exactly did you network?,"this is awesome to hear ! I’m currently at uni and going through some of the same things you did . I’m not getting the greatest grades , I’ve been struggling with my mental health , and I still experience imposter syndrome . reading this definitely helps me see that things can get better . congrats on all your job offers !","What kind of job offers and interviews are you getting? Since this is posted in
r/learnprogramming
I assume it's something related?",Relatable feeling Bro. Been diagnosed with ADHD at 5. Uni grades suck. Learning Front End Development on my Own. Creating Beautiful websites looks a cool art to me.,"Thank you so much for this post. I dropped out of a prestigious program 3 years ago after a suicide attempt, still trying to pick up the pieces. You remind me that there is still hope. I wish you all the best for your career!",Use this feeling to stay awesome. It's all about attitude. You'll be even off your meds in no time. Stay motivated and fuck everything because you now know you can do it.,"The beginning of this title is literally me right now. Mental heath issues + massive lack of motivation. Have spent nearly 24 months trying to learn how to program/code and I have nothing to show for it. Super depressed atm, even after having a somewhat successful day yesterday. It’s a tough roller coaster.",I'm assuming you did something related to CS?,Congratulations buddy!
"Had my first programming interview, legs still shaking.","I can't even. The amount of times I said ""no, sorry idk what that means?"". Still got the job, you can do it guys. Keep grinding.
Edit: Wow! Thanks a lot for all your comments and the awards!!
Some FAQs
I am a male, 17 years old, HS senior. Completely self taught (utube, udemy, edx and a few books and articles). Have been learning for 3 years now.
I live in a big city so there are a lot of local software houses here.
This wasn't actually my 'first' interview, have been applying since covid, actively and did get a couple interview offers but I declined.
Interview was for a junior level backend developer. Php, laravel and sqlite and a little vue.
Logical assessment was beginner level algorithms from leetcode and stuff. Like binary search, ordering arrays etc. How would u design the Twitter Api. Questions about my previous web dev projects
Techincal questions were programming related, mainly php. Questions like what features does oop have? Advantages of oop, oop vs functional? Generic oop concepts ( apparently useless stuff judging from the comments) , Facades, frameworks, web scraping, web sockets etc.
There were questions related to version control, programming paradigms, test driven development and the likes which I completely flunked. Give that stuff a read before you take an interview. Also postman!
Again, Thank you everyone!",,"Wednesday, September 2, 2020 at 10:11:42 PM GMT+5:30",3 yr. ago,"The amount of times I said ""no, sorry idk what that means?"". Still got the job
Good answer!
You know why it's a good answer? Because it's honest. I'd much rather have someone honestly admit when they don't know something than try to bullshit me.","If you said, ""No, sorry I don't know what that means."" in an interview with me your odds of getting hired would raise substantially.
Knowing what you know and don't know is critical. Being honest about it is even more critical.
People who say, ""I don't know."" are an under appreciated resource.
The question that I would try to answer in the interview is, what do you do when you don't know something? How do you handle that? Do you say, ""I don't know."" and leave it there? Do you try to bullshit me? Do you tell me you don't know and then tell me about how you might start trying to find an answer? If I ask you for your guess, does your guess show a reasonable and systematic approach to problem solving?
Congratulations, BTW. Good for you. Always be honest. Check your ego at the door. Good work.","Congrats!
If you dont mind me suggesting, throughout your career there keep note of the major projects & good things you do. You can add them to your resume in point form and use it in the future for salary negotiations at your current place.",I’ve had that before. I don’t think they’re trying to stump you. They just want to honestly gauge where your skills are at. I’m guessing they were not upset or disappointed each time you said you didn’t know something.,"Wow, that actually made me feel a lot better about a lot of my inferiority complexes.  Thanks!",Smart guys know what they don't and admit it.,"Question for people who do interviews.
How do candidates that have 5+ years work experience in an unrelated field fair?
Does having been in some kind of professional-degree role help in the decision? Or at least make up for lack of technical knowledge?",Any whiteboard questions? How did you solve them? I did an interview a few months ago and I had no idea...,,1 interview and you got the job? Hallelujah my man
"After 8 months of self-learning, I landed my first job as a Software Developer!","Hello everyone,
I'm (26) beyond happy, and I wanted to share that after teaching myself Frontend Development for about 8 months I landed my first job in a start-up!
Prior to the self-teaching, I worked in casual / informal jobs. I saved enought money, dropped my previous job and dedicated myself to learning for at least 6 months.
It wasn't easy, there were a couple of times I doubted if I picked the correct path, I even was about to drop it half way. I got rejected a lot (I mean,
A LOT
) since companies were looking for devs with at least a few months of experience, not to mention the tech interviews in which (initially) I failed miserably, but I kept going forward and learned to rest instead of giving up (most of you have probably heard that sentence before).
To all of you who are still looking for your first job offer, those who are considering sealf-teaching yourself programming or those who are already learning:
be resilient, don't give up
.
That's a sentence I heard from a senior dev, and always kept it in mind the moments I were about to drop everything and give up.
I know you can do it
.
Edit
: Thank you so much for the kind words! Since some people are asking about the stack & resources I used, those are the following (will update if I miss one):
Edit2
: Wow! Thanks for all the comments! After I finish adding the resources I used I'll be sure to answer as much as I can!
Edit3
: I appreciate all the comments, kind words and DM's! Right now it's 3:00am in my time zone, I'll be sure to get back to you tomorrow! (since I'm falling sleep and my battery is running out).
Edit4
: You people are amazing! Thanks for all the awards! Since I didn't developed too much on how much I applied to jobs, how many hours I studied per day and what helped me get more noticed by companies / recruiters, I will write more about it at the end of this post. Hope it helps! :)
Resources I used
:
freeCodeCamp
~ HTML, CSS, JavaScript (I took the first 3 sections of the JS curriculum)
*
freeCodeCamp
is a great resource IMO, I watched some of their videos on YT (Data structures & algorithms, React, a bit of Bootstrap, etc).
The Odin Project
~ More HTML, CSS, JavaScript, a bit of NodeJS. I finished the Foundations section and from here started learning from varied resources.
Flexbox Froggy
&
Grid Garden
~ Both amazing tools to learn/practice CSS Flexbox and Grid. Knowing how to use Flex & Grid helped me a lot in my tech interviews!
Bootstrap 5
&
Tailwind CSS
~ I have heard mixed opinions about CSS frameworks; some people state they are not useful, some say they are fantastic, etc. In my experience, on tech interviews the developers stated that they expect a dev candidate to know both pure CSS
AND
at least X framework, since their clients were specifically working with Bootstrap/Tailwind. Feel free to check them out after practicing CSS. If you use a framework or not is up to you.
freeCodeCamp's ES6
~ It's essential to learn about the new syntax & features that ES6 bringed to JavaScript, specially if you want to learn a JS framework (like React) in the future. It may take you a lot of practice to get confortable with some concepts like arrow functions, promises and classes, but don't worry, take it step by step and be sure to practice since it helps a lot for you (it did for me) to retain what you learned. If you are more of a visual learner (like me) I recommend
Web Dev Simplified
YT channel for this kind of topics, since I consider him an amazing instructor.
Scrimba's Learn React course
~ One of the greatest (IMHO) courses to learn React as a beginner. If you pick this course and get started, I recommend you to (as soon as you feel comfortable) use the IDE of your preference (Visual Studio Code my personal pick) and start programming outside of the course's IDE. I recommend this since you can forget where you code is among the many chapters of the course.
Mastering React by Mosh
~ This is the only resource which isn't free, and being 100% honest I'm not sure if I can recommend it (I recommend Mosh
YT channel
tho!), since out there there are already great and free resources, but I was struggling a bit with React and saw a recommendation about Mosh's React course. I'm not saying it isn't worthy, just a bit outdated. I haven't finished it yet, but it is my general impression by far.
Stanford's Code in Place
~ Great (and free) resource if you want to give programming a try but you are not sure where to start. I didn't take
Harvard's CS50
course but I have heard wonders of it. I'm sure both options are great for beginners/people who want to see if programming is for them.
Learn with Leon's 100devs
~ If you want to be part of an amazing community and learn together, you can give Leon's FREE bootcamp a try. I started the first few months (but didn't finished it) and it was great, he is an amazing structor and the streams were really good. If you are confortable with that kind of format, feel free to give it a try! You can check
his YT channel
if you want to have a grasp of what his bootcamp is like!
FE Developer Roadmap
~ Last but not least! This amazing roadmap created by
kamranahmedse
(and the respective associates) is great for giving you a great grasp of what you need to learn for becoming a FrontEnd Developer. Now, don't feel intimidated by all the content included in it, take your time to learn those topics at your own pace and remember, you don't need to know every single one. I for sure don't and I'm sure a lot of developers don't know everything as well. Use this resource as a guide if you feel unsure to learn a certain topic that catched you attention, or want to pick the resources the creator offers/recommends.
Additional info about my journey
:
•
How many hours I studied per day
At least 4-5 hrs. At the end of the day when I was having dinner, usually I would watch a video on YT about a topic that catched my attention or to reinforce what I studied during the day.
Since everyone's schedule is different and everyone have different responsabilities, feel free to study the amount of time you feel comfortable with. It can be 1~2 hours a day, maybe 1 hour per day and 3~4 hours on the weekends, just be sure to stay
consistent
. That is key :)
•
Where I applied to jobs
LinkedIn, Glassdoor & Indeed. AngelList is not used that much here in my country.
•
How much I applied to those job posts
A lot. I usually applied every chance I saw a job post that catched my attention. I kept a record (on an Excel file) of all the companies I applied to, and landed this offer after 185 attempts.
Don't feel discouraged by this. It was my personal experience and I'm sure people can get job offers sooner and without applying that much. When I applied to the first 50-70 companies I only knew HTML5 & CSS, so maybe we can reduce that number from 185 to 110-120.
•
When I started to get more reception / positive attention from recruiters & companies
Back in March I already had a GitHub portfolio with some small projects in it, but it wasn't until maybe 1 month ago when I crafted a
website
portfolio that I started to get contacted more. IMO, a website portfolio is a HUGE plus, since you can showcase the projects you have in a more visual way, talk more about who you are, and capture a bit of
your personality
on it. As long as it looks professional and clean, you can craft your portfaolio
your own way
. If you don't know where to start, you can browse sites like
Dribbble
and get some ideas / inspiration to start. Don't forget to include your contact information so when you share it to recruiters / HR staff / companies, they can get to you!",u/DontMessWithTaxs,"Friday, July 8, 2022 at 6:06:46 AM GMT+5:30",2 yr. ago,"Congrats!
About 50 days in myself. Struggling with some higher concepts in JavaScript and currently questioning if I chose the wrong path.  Not going to let that stop me. The grind is what sharpens the blade, right?","That last quote was just the inspiration i needed to keep going, thank you OLD_WET_HOLE","I am in day 40 myself. Currently doing Eloquent javascript and CS50 and honestly the questions make me switch between God -Mode and Imposter mode
and it kinda turns me on","Thank you, this gave me some motivation to start again, I used to study daily for 6 hrs but now I am down to 45 mins to 1 hr, I doubt if I can do it, I am tackling graphs and unit testing and it’s really bothering me because I do not know if I am doing it right or not, but I believe I will be able to do it!
I am not thinking of switching my path but I also wanna take some time out and learn ethical hacking, I did it back in 6th grade and it was super fun! I also wanna learn figma, UI and UX design fundamentals to help me make beautiful websites
Congrats on landing your first job!",Honestly an hour or two a day for a longer term sounds way better than crunching 6hrs a day.,Congrats! About 7 months in myself. I'm trying to be like you when I grow up! I'm 33 lol. Thanks for sharing!,"Thanks! I would encourage you to not focus too much on the age. I follow a youtuber (which now is a senior developer) who started self-learning programming at the age of 31, he was a sweeper on a department store, and after a few years and a lot of hard work he is living now on New Zealand living the best life he could imagine.
You got this!",What resourses did you use to self-teach?,"What type of work did u do before? What type of schooling did u have?
Did u have any prior coding experience?","Yeah boiiiiiiiiiiii
Rainin bennies"
How I learned programming in the early 1970’s,"TL,DR:  I recently retired after 40+ years in the software development industry. I thought you guys and gals might like to hear how things were “back then”. I apologize if this is too far off topic for this subreddit. If it is, point me in the right direction, and I'll quietly go away.
Sorry for the wall of text. I put the TL,DR up front to save you from mental pain and suffering.
Let me set the stage. It’s my sophomore year of high school. I grew up and lived in a large metropolitan city in the western US. More specifically in an upper middle class neighborhood in an upscale school district. Computers were things of science fiction. They were large, room sized monstrosities requiring special accommodations, and cadres of specially trained operators to keep them running. They were made by the likes of IBM, Univac, and others. This was years before desktop microcomputers would become available. IBM PC’s, Microsoft, Apple, etc didn’t exist. Unix was still a closely held trade secret of Bell Labs, a subsidiary of the Bell Telephone system. Linux was decades away.
My school district owned an IBM 370 mainframe for doing scheduling, grading, payroll and other administrative tasks. They had just purchased for students and teaching purposes a new “mini-computer”. It was a Hewlett-Packard 2000C time-shared computer. It was capable of supporting 32 users dialed in over telephone lines via 110-300 baud modems. The operating system was a simple BASIC interpreter. The district installed one or more ASR 33 teletypes in each high school. My school had a small room off of the math department where 3 of these were housed.
My high school offered a one quarter class in programming in HP BASIC, a derivative of Dartmouth BASIC. The class was taught by the math department and focused on using the computer to solve math problems. Typical programs were less than 100 lines in length. On a whim, I signed up to take the class. The class was interesting, but what I really enjoyed was the open access to the computer room after hours. I spent many hours tinkering and playing, writing programs to do whatever struck my fancy. By the end of the one quarter programming class, I had far surpassed the teacher’s abilities, and he recruited me to teach the class the next quarter as “independent study”. This was when I wrote my first program on contract. It was a simple data analysis program to analyze and produce statistics pulled from surveys done by the local chamber of commerce.
By the next year, the district had made arrangements to allow classes in conjunction with the local community college. This was an early version of “concurrent enrollment”. I took a class in computer operations taught using the IBM 370 owned by the school district because the college did not yet own a computer. Here I wrote a few simple programs in COBOL, but mostly learned to hang mag tapes, mount disk packs, change the paper and the ribbon in the line printer, and to wire ""programming"" cards for the various peripherals such as the card reader, the card sorter, and the card punch.
Fast forward a few years. I had graduated from high school, and spent a couple of years travelling out of the US in a third world country. When I came back, things had changed in the computer world. Computer stores were popping up all over the place selling desktop microcomputers. These were the likes of the Altair 8800, IMSAI 8080, Northstar Horizon, and Radio Shack TRS-80. I enrolled in an electrical engineering / business / computer science program at the university and was learning FORTRAN 4, COBOL, and PDP-8 assembly. None of these would be important to my future career. Stay tuned…
It was during this time that I walked into a local computer shop, and sat down at one of their computers to entertain myself. Within a few minutes I had written a short program to scroll a sine wave up the CRT screen. It looked something like this
10 LET X=0
20 PRINT TAB(SIN(x)*40+40),”*”
30 LET X=X+.3
40 GOTO 20
50 END
The proprietor walked in at this point, saw what I had done, and hired me on the spot. You see, while microcomputers brought computing within the price range of the masses, almost no software existed to make them useful. Likewise, programmers were extremely scarce. Over the next couple years, I wrote for them a complete accounting package for small business, including accounts receivable, accounts payable, payroll, inventory, and general ledger modules. This was quite an accomplishment on a system sporting 32K bytes of RAM and 360K bytes of floppy disk space.
Unfortunately, this job didn’t pay terribly well. I earned less than $3 per hour (about $10 in today's dollars). So I started a second job doing data entry on the graveyard shift at a local food processing plant. I was pretty good and soon was doing all the paperwork in about 2 hours.This gave me a lot of spare time, so I began writing programs to automate various office tasks.
About this time, the C programming language was released to the public from Bell Labs. I picked up the first edition of the Kernighan and Richie “The C Programming Language”” book. It still has a place of honor on my bookshelf in my office. Soon, BYTE magazine published the entire source code for a Small-C compiler, written in C. I typed the whole thing in, and using one of the university computers got it to compile and run, bootstrapping my way to having it run under the Digital Research CP/M operating system on an Intel 8080 based microcomputer.
By the mid 1980’s, microcomputers were definitely a thing. IBM had produced the PC, Bill Gates and crew had become successful with Microsoft MS-BASIC interpreter and MS-DOS, Compaq had successfully defended the first IBM PC clone, and we were off to the races.
Over the following decades, I worked for a variety of companies. Doing software for accounting, banking, computer based training, flight simulation, telephone infrastructure, classified stuff I still can’t talk about, and most recently, cryptocurrency.
I’ve learned and used a variety of languages and scripting tools including BASIC, FORTRAN 4, COBOL, Assembly, C, C++, dBase II, dBase III, Pascal, Perl, Bash, Go, Python, HTML, Scala, and probably a few others I’ve forgotten about. My specialty, and what I consider my best language, is plain old C, especially embedded application code under Linux.
As I said above, I’ve recently called it quits and retired. I miss the camaraderie of coworkers, the thrill of solving difficult problems, and the satisfaction of seeing your code used far and wide around the world. I do not miss impossible schedules, corporate bureaucracy, shrinking benefit packages, and unknowing and uncaring employers.
Don’t get me wrong, I will keep coding. Probably not huge systems. My latest are little embedded projects for Arduino and Raspberry Pi controllers.
It’s been a wild ride, and I’d do it again. It’s kept food on the table, a roof over my head, enabled me to travel the world, and be a part of something bigger than me. What more could a guy ask?
Edit:  Thanks for all the kind comments! It makes me feel warm and fuzzy about the next generation of coders. I’ll come back and read more comments in the morning, my wife just poked her head into my office and gave me that look that says “Get your butt off of Reddit, and into bed or I’m locking the door and you’re sleeping on the couch.”  G’nite ladies and gents!",u/ElGringoMojado,"Wednesday, May 13, 2020 at 11:36:41 AM GMT+5:30",4 yr. ago,"Love hearing stories like this. This kinda reminds me of stories my dad tells me about how his experiences programming over the past 30+ years. Enjoy retirement, thanks for the post!",How did you Google errors before Google?,Any advice for people are just getting started in the industry?,"Great story. Brought back memories. I learned to code at age 16 (1978) on a PDP-11, initially using punch cards. To start the computer we would enter the code for the boot loader directly into ram in binary using the front panel keys :-).","Bye reddit and fu Spez
(Remember to delete or edit your content before leaving !!)",Thank you very much for your story. It made me smile and remember why I chose the carrier path in the first place. Due to the pandemic I was at a little low-point since I just graduated and now all the companies stopped hiring and the one I worked for kicked me out also due to the pandemic... But I’ll keep practicing and hopefully will also look back at my life when I am your age with a smile on my face.,Comment deleted by user,"I've found the person all the job descriptions are looking for!
used a variety of languages and scripting tools including BASIC, FORTRAN 4, COBOL, Assembly, C, C++, dBase II, dBase III, Pascal, Perl, Bash, Go, Python, HTML, Scala, and probably a few others I’ve forgotten about.
Seriously though, great read!",I love stories and that was an awesome story. Good luck with whatever you do!,
I have been rejected by over 100 jobs in my past 2 years as a developer from code bootcamp. My story. Never give up.,"I would like to preface and apologize if this is the wrong place to post. But I'd just like to share my experience since getting into code.
I was working at an engineering job right after college and basically hated what I did. Very corporate america, my boss had 3 bosses, I had 2 managers, felt like cattle in a cubicle farm. I started looking at remote jobs because I couldn't figure out why I needed to be in a cubicle to write excel sheets and create power points all day. When I looked up remote jobs I realized they were all basically software development. I wondered why I went to school for mechanical engineering anyway since I spent all of my time playing video games, building my own computer, everything IT except for code.
After that feeling of regret wore off; I looked up boot camps in my area. I knew that if I tried to learn myself or online I would get stuck, become frustrated and probably quit. I wasn't comfortable with being uncomfortable yet. Unfortunately, most of the code boot camps designed to actually
get you a job
were from 9am-5pm for three months straight. I didn't have the finances to just quit my job and I wasn't going to take out a loan to go either. So I went to this 'after hours' part time(specifically noted that it was not preparing you for jobs) boot camp a few days a week at night and on the weekend. They refused to list the job statistics for students after the program but after harassing them about it they gave me a 'less than 28% of students get a job after this program'. I decided maybe if I bust my ass enough I can be part of that number. It started off pretty easy, I had taken an HTML class in high school, no big deal. Then came CSS - oh this is a thing I connect to the page and change how it looks. Then came Javascript - oh this is neat...wait..what, but I don't understand..so this works but this doesn't? Why? Oh that's just that way it is. okay.jpg. Rinse repeat that process of continually being baffled until I eventually accepted a continuous state of 'I'm not sure how to do that, and I've never done that before, but... I'll figure it out.'
This type of attitude has served me even beyond the local scope of programming into the global scope of my life.
Toward the end of the bootcamp most students had dropped out. There were 4 left. Not many people my age(25 at the time) want to give up their Saturday morning to come into a classroom and learn to code. I wasn't the exception, especially when rocket league had just released and one 5 minute round warps space-time and 3 hours goes by. I managed to keep it under control and show up every class.
I started shotgunning out resumes to almost every job posting I could find with the word development in it. I'd like to take a moment and apologize to the 67 HR people that stated 'Do not apply unless you have x experience’' and 'please stop applying to other positions at this company'. I would rather take a chance then not, it's not like I lose anything when they say no. I figured maybe if I could get their ear for only a minute then I might be able to convince them. Eventually a brand new startup messaged me back and brought me in for an interview. It was for ruby on rails. Nope -  0 experience but I'll learn whatever you want me to learn. They gave me a code test, maybe as a sick joke to get me to go away. I took it and spent about 8 hours trudging through it until I finished. I brought it back and to both our surprise it looked good. Then they told me no, sorry, not enough experience. We shook hands and I went about my day. I decided to call them up and ask if I could work part-time. Let me be an intern, don't make me the main man on your technology but let me work on something easier.
I knew that they were a fresh startup on the block and that if they had interns it might let them look good. Gives that curb appeal of 'we are hiring the fresh minds in the tech space'. Anyway - they said 'We'll consider it, let me call you back'. They called me back and said 'Yeah can you work 20-25 hours a week? We'll pay you $18 an hour'. I was prepared to work for free so when I read that I was floored. Feeling like I was on top of the world I asked if I could also work from home a few days a week since I was going to keep my full-time engineering job. In retrospect I was probably pushing it. They agreed though, for whatever reason. I thought I had achieved the dream, and in a way I had. It was a startup environment, I could bring my dog, they had beer fridays at 1:00pm, a snack room, an xbox if you wanted to play during lunch. I thought I was hot shit. Yeah I'm a 'software developer' now throwing my title out like a left hook. Then I showed up for my first day at work to get my equipment and it hit me.
Now I actually have to produce for this company. None of this means anything if I can't code. I don't know ruby on rails, I've never used git in a professional environment. I merged my own pull request on the first day. That was bad. Luckily I didn't delete an entire repo like the other guy on here. Suddenly everyday felt like wait why did you hire me again?
I struggle bussed my way through 6 months and kept my full time job as an engineer.  I started looking at other full time jobs in software because every day I showed up to my engineering cubicle I lost a piece of my soul.
I found a full-time PHP junior software position and they brought me on. I maintained my intern job as well. I knew there were growing pains but it felt more like I was being torn from limb to limb. Under experienced and overconfident. I'm pretty sure Kendrick Lamar was directing his lyrics at me. Sit down, be humble. I now try to be a student in every aspect.
I worked there for about 5 more months and I was replaced by someone with more experience that was willing to take the same pay as me. The joys of being a junior developer.
I decided you know what, I've been doing this for a while - I'm going to try and get a fully remote job. I applied to a few places and actually received two job offers at the same time. For the first time I felt like it was starting to pay off. Two companies want me? I have a choice? What is life? I accepted a fully remote job doing react and PHP. Things started to come together. I started to think 'I have an idea about how to do that but it probably wont be optimized'. After a year the US election happened and I was working for a government contractor. Suddenly the budget was under review and there were no more contracts. No more work for us to do. The entire development team was let go. 15 people.
Enter my most recent job. For whatever reason it was more difficult to find another fully remote job this time. I was declined by 90 jobs. Endless interviews, after interview #4 for company #63 it can get hard to stay 110%. I had a portfolio, decent resume, passed code tests, followed up even willing to take less money. I'm not sure why it was more difficult this time around. As my funds ran out I decided I'll work locally. I eventually accepted an office job and work remote partially. It's not my favorite thing but it's good for me. It keeps me on my hustle and networking with people is everything. I enjoy being in the office and enjoy the people I work with; they are flexible when I want it. When I was unemployed and constantly getting told 'NO' - knowing that I am approaching homelessness was difficult to process. Especially because I had received two offers at the same time just a year prior. One piece of advice I think about is 'Keep your head up when times are tough, and your head down when times are good'.
Even now I don't think I am 'the best' developer. I'm confused and stumped pretty regularly. I used to wonder if 'code was for me'. Now - I embrace the struggle and can look back and see all I've learned. At code camp I was always the last one to finish the in class projects or moved on with it incomplete. I've dropped out of college 2 times before finally finishing. Academically I was never amazing.
I now work two jobs. One full time as a front-end developer and a part-time where I teach code to students but this isn't intended to be a promo for that so I wont name it. I just like helping people learn since I know what it's like.
If you're in one of my many situations never give up.
Thanks for reading.
TL;DR
Went to code bootcamp because hated corporate america job. Worked at a startup, remotely, and now partially. Has been a rough upward ride overall.
Edit
If anyone has any questions - feel free to send me a message here and I'm happy to help. Oh boy someone found it. If anyone is interested I have a small
youtube
channel where I talk about these topics and more. Prepare
forcringe.
I'm still learning, but my goal is to help and motivate others with transparent information.
Edit
Thanks for the gold kind stranger.
Edit
So I received a few questions about free resources and the bootcamp I teach at along with my thoughts on other bootcamps.
This isn't intended to be a promotional and I'm not sponsored to write this
, but whatever - check these out if you want.
It's called
OpenClassrooms
. Weekly Mentor meetings.
Price:
$300/month and has a job guarantee. I teach there so take that with a grain of salt. Do your research and find what works for you. If interested there's the discount code, OPENCLASSROOMS12 if you want to try it out. I don't know how many there are. First come first serve I guess.
I personally attended
DevMountain
in 2015 in Salt Lake City, Utah. It has a pretty great rating and overall I thought the curriculum was modern but there just wasn't enough time in the evening courses to fully prepare for jobs. It also has no job guarantee.
Price: $4500
LambdaSchool
Completely free until you get a job that pays more than $50,000/yr, with a part-time option
Thinkful
is also great. Weekly mentor meetings. They have a job guarantee.
Price:$8500
Bloc.io
- Basically just Thinkful that costs slightly more. Job guarantee.
Price:$8800
Free Resources I used to learn and still do:
Freecodecamp
- Huge awesome community.
Codecademy
- Pretty great for beginners. They're always updating it.
Codeschool
- Follow along tutorials.
Codecombat
- Make games and learn. Pretty interactive.
Udemy Courses. - Plenty of free content with project based learning.
Keep on hacking.",u/Tychos1,"Monday, November 13, 2017 at 10:47:13 PM GMT+5:30",6 yr. ago,My C++ university teacher learned to code at 40 yrs old. Before that he was a wood carpenter.  It is NEVER too late.,Comment deleted by user,"As someone who is just starting their journey into coding/programming, I love to read the stories on other people's careers and the path they took to start out. I think there is value in here for others who are either just starting out or who are out there pounding the pavement.","This was brilliant. 23 and starting to code, can definitely relate to feeling lost and hacking away at it",,"And, you know, maybe don't try and tell employers that you have no experience and you'd really like to work from home.
http://dilbert.com/strip/1994-09-08",No thank you sir for the post kindly appreciated,Although I don't know you in real life but I am proud of you.,"Endless interviews, after interview #4 for company #63 it can get hard to stay 110%.
This is what's killing me right now.","I started shotgunning out resumes to almost every job posting I could find with the word development in it. I'd like to take a moment and apologize to the 67 HR people that stated 'Do not apply unless you have x experience’' and 'please stop applying to other positions at this company'.
Those 67 examples can't count as rejections. You applied to something you weren't qualified for. All you did was make HRs job harder.
Shotgunning resumes makes it harder for everyone; including yourself."
25 Programming YouTube channels you should consider following!,"freeCodeCamp.org -
https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ
Telmo Sempaio -
https://www.youtube.com/user/Telmo87
​
Traversy Media -
https://www.youtube.com/user/TechGuyWeb​
Clever Programmer -
https://www.youtube.com/channel/UCqrILQNl5Ed9Dz6CGMyvMTQ
Academind -
https://www.youtube.com/channel/UCSJb...
​
Codestackr -
https://www.youtube.com/channel/UCDCH...
​
WebDevSimplified -
https://www.youtube.com/channel/UCFbN...
​
Programming With Mosh -
https://www.youtube.com/user/programm...​
DevEd -
https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q
Net Ninja -
https://www.youtube.com/channel/UCW5Y...
​
Sexy Design Course -
https://www.youtube.com/user/DesignCo...
​
Florin Pop -
https://www.youtube.com/channel/UCeU-...
​
IHateTomatoes -
https://www.youtube.com/user/ihatetom...
​
Stephen Grider -
https://www.youtube.com/channel/UCQCa...
​
Colt Steele -
https://www.youtube.com/channel/UCrqA...
​
Wes Baws -
https://www.youtube.com/user/wesbos
​
Ex Tech Lead -
https://www.youtube.com/channel/UC4xK...
​
MMTuts -
https://www.youtube.com/user/TheCharm...
​
Derek Banas -
https://www.youtube.com/user/derekbanas
​
Programming With Erik -
https://www.youtube.com/channel/UCshZ…
Coder Coder -
https://www.youtube.com/thecodercoder
Faraday Academy -
https://www.youtube.com/channel/UCxA99Yr6P_tZF9_BgtMGAWA
Mayuko -
https://www.youtube.com/c/hellomayuko
CodeBeauty -
https://www.youtube.com/c/CodeBeauty
Ania Kubow -
https://www.youtube.com/aniakubow
Honorable Mention:
JavaScript Mastery -
https://www.youtube.com/channel/UCmXmlB4-HJytD7wek0Uo97A
Edit: Suggestions i got from comments-
Coding Addict -
https://www.youtube.com/channel/UCMZFwxv5l-XtKi693qMJptA
The Cherno -
https://www.youtube.com/c/TheChernoProject/videos
mCoding -
https://www.youtube.com/channel/UCaiL2GDNpLYH6Wokkk1VNcg
Fireship -
https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA
Corey Schafer -
https://www.youtube.com/c/Coreyms/featured
Alex Damiani( our fellow redditor on this sub
u/pyyoutuber
) -
https://www.youtube.com/channel/UCTebDgj-GzOh3zo9Xf1vO4A/featured
javidx9 -
https://www.youtube.com/c/javidx9/featured
Kevin Powell -
https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw
Computer Science -
https://youtube.com/channel/UCbmb5IoBtHZTpYZCDBOC1CA
Bro Code -
https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ
ForrestKnight -
https://www.youtube.com/channel/UC2WHjPDvbE6O328n17ZGcfg
sentdex -
https://www.youtube.com/user/sentdex
Abdul Bari -
https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw
The Coding Train  -
https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw
Tech with Tim -
https://www.youtube.com/channel/UC4JX40jDee_tINbkjycV4Sg
CS Dojo -
https://www.youtube.com/c/CSDojo/featured
Ben Awad -
https://www.youtube.com/user/99baddawg
IAmTimCorey -
https://www.youtube.com/user/IAmTimCorey/featured
Neso Academy -
https://www.youtube.com/user/nesoacademy
Simplilearn -
https://www.youtube.com/channel/UCsvqVGtbbyHaMoevxPAq9Fg
Another list made by
u/theguy2108
-
https://www.notion.so/d87db336139a4ef5b989350334ce748d?v=1390026fe1944c5b832e95104dd07e52",u/ApolloNoxx,"Wednesday, April 21, 2021 at 5:23:39 PM GMT+5:30",3 yr. ago,"Might be a unpopular opinion here, but Derek Banas is not a good teacher. He knows only the bare minimum of a lot ot languages and frameworks, but just enough to make a video out of it. Look at his Scala Basics video. He completely misses the grasp of Functional Programming.
He even said that he loves learning and molding what he learned in a video, but he almost never continues to study deep enough in the subject to be a expert.
I much rather watch an expert with limited topics, like Tim Corey for the .NET environment, than Derek Banas who knows just a little bit of a lot.","like Tim Corey for the .NET environment, than Derek Banas who knows just a little bit of a lot.
This.
Tim Corey also shows how to think like a programmer, now i haven't mastered that one yet but it was eye opening to see how an experienced developer starts their designing and thinking phase of the project.",How is this a list without Corey Schafer?,"Exactly. We from
r/Python
are coming in with pitchforks raised.",Clever Programmer steals people's materials.  I wouldn't recommend him to anyone.,"Also add in, ""The Cherno.""",Hell yeah! cherno is awesome! he knows so much and his videos are super high quality,Why is Tech Lead even inside?,Does he even try to teach anything on his YouTube channel? His content always felt more like lifestyle vlogs than tech.,"Fireship
makes some great videos that explain anything from web technologies to databases and docker.
mCoding
creates videos about algorithms and Python."
"Being self taught, I just got hired as a junior web developer","Well finally my dream came true, I know it's cliche but hard-work really pays off, thanks to you  all those who supported me, your simple comments/posts meant a lot to me and helped me go through rough times. I can't wait to help guide others get their first job peace.
Edit:  WOOW didn't expect this to blow up, I wish I could answer every single one of you but I just couldn't keep up.Thank you all very much!
Edit2: Since many of you have asked, my next post will be about my journey, the resources I used to learn and how exactly I broke into this industry.",,"Monday, September 14, 2020 at 9:30:17 PM GMT+5:30",3 yr. ago,I wake up at 530 AM 5 days a week to learn programming so that I can someday get a job like that. Congratulations! You inspire me.,"What’s your portfolio like? How hard were the interview questions?
Great job, it’s sometimes abysmal learning how to code but posts like these keep me going","I remember after graduating, interviewing and doing apt test and not knowing fuck all.  It was clear how much self learning I had to do about the industry.  Fast forward a bit and in one of my interviews I said that I may not know everything, but I will figure it out.  I landed the job because I was willing to put in the effort and.make sacrifices to grow.  Being on the other end of the hiring table today, I look for the same.  Doesn't matter how intelligent you are -- we accept a threshold of intelligence to build business systems, web dev etc - what matters is how individuals approach problems and their growth opportunity.  Keep learning and congrats","Same here, i never studied cs but i did a lot of projects on my own. Today i got hired as mobile dev. It is the first cv i ever sent.",,"Congratulations bud!! I feel it is said a lot, but you are an inspiration. I am also getting into programming, slowly but surely and mostly by myself. Knowing that others out there are actually getting to the destination, is reassuring, and all the more inspirational. I wish you the best in your future endeavours.",,Could you post your journey?,Comment deleted by user,RIP your inbox
Spend 1 minute a day to improve your coding skills,"I have a youtube channel called
Python in 1 Minute
where I publish a short Python tutorial every day. My goal is to teach a common pattern or technique in under 60 seconds.
I try to be respectful of the viewers time and make the videos terse and clear with as little unnecessary fluff as possible. The content is mostly aimed at beginners, I hope it can help some of you to get into the habit of learning something new every day.
As I'm just starting out with this youtube thing, I'd love to hear your feedback regarding the format, content, anything... (topic suggestions are highly appreciated as well).
(Sorry for the crosspost, I've already posted this in
r/python
a few days ago, but as the feedback was overwhelmingly positive I guess some people over here would find it useful as well.)",u/jcsongor,"Friday, January 22, 2021 at 6:26:04 PM GMT+5:30",3 yr. ago,"You should make an email thing, I’d sign up for that. I get some newsletters from other sources I’m interested in",I like the idea. I will follow it.,"I had a Calculus professor that did something similar on YouTube called “10 Minute Math”. It never gained traction outside of his students, but it was extremely helpful. I’d love to see something like this applied to Python. I’m stuck in a loop of “Hey what’s up guys! Today we’re going to spend 15 minutes talking about my life and then I’ll show you how to create a variable after a word from our sponsor!”",Comment deleted by user,These are great! Nicely done.,"Bro , also you can do this for some intermediate stuff maybe lol","This is one of the better LPT. It's like saying exercise a minute a day, logic is there, but the laziness of people won't do it.
I will try to do it, but I know it will slowly forget/stop because I'm lazy.",Have you considered porting this content to tiktok? Since the length of your videos are 1 minute long I think you’d have a better time gaining traction on tiktok due to the for you page,Subbed!,Nice idea! Would you do other languages or possibly even tools as well? I like this as it’s a quick way to be able to reference some particular thing I’d want to do in python
I did it!! One year of self teaching and I just landed my first job as a software engineer!,"I am beyond happy! I somehow managed to land a job at the company I originally learned C# for! One year of study, I have no idea how many applications, and 6 interviews later I get to do what I love for a living! All I have to say is Wooooooo! And a big thank you to this sub, y'all are amazing!! I am off to drink this champagne guys!
update: My bad guys. I knew I would need to form a list of resources but I was way too giddy to get that done last night. So here we go,
Started studying while I was still employed at the airport, First course I did was the 300 hour web development 101 on codecademy. By the time I finished that course I was actually furloughed and decided to study full time and remain unemployed. I'm just going to list them and all of the books I read in no particular order. I will say that I chose C# to focus on as my OOP and that's reflected in the courses I chose.
UDEMY: The complete web developer course 2.0, C# for beginners- Coding from scratch, React - The complete guide (I still haven't finished this), RPG Core Combat Creator: Learn intermediate Unity C# coding, Learn C# by building applications, CRUD application using C# and SQLite, Build a real world app with asp.net core and angular
TIM COREY: The complete foundation in C# course (this one was a beast for me)
BOOKS:
Code: hidden language, C# Player's guide **, C# in depth (haven't finished this one), Clean Code **
YOUTUBE: Mostly Tim Corey, Mosh and anything I felt could make up for me not having a CS degree. Or any degree. And shout out to tech lead! His insanely dry humor helped keep my spirits up.
I studied for 6 - 10 hours a day for four days a week. I would occasionally take days off to get some yard work done or do something physical. I doubted myself a lot, I still doubt myself but I think in the interviews with this company they knew that I was very passionate and want to learn as much as I can. I really believe my attitude is what got me this job because my portfolio is nothing to write home about.
Github Link:
https://github.com/JordanHay?tab=repositories",u/nameisinigomontoya,"Saturday, April 24, 2021 at 7:07:54 AM GMT+5:30",3 yr. ago,"Hey that’s great to hear! Can you let us know what courses you did and how did you progress?
Thanks","I did the same thing as  OP but with Python and JavaScript. Was hired at a startup and wasn't given a technical interview. I did CS50 (60%), The Odin Project (less than half). I got a job tutoring school aged kids and I got a part-time unpaid internship while taking one CS class a semester (took intro to comp science II, DS&A and half of Architecture and Assembly language). Obviously did more than that but that was the core of my studies.",Congrats! How many hours were you putting in each day and what resources did you find useful?,,In a previous post of theirs they stated 40hrs a week,"Good for you fam!
I'm here to tell you, self taught developers are almost always the best developers I've interacted with.
Not to discount education, but self made developers chose to do it because they wanted to, and usually they do it as a hobby. Not only that, but they are more likely to stick it out when things get hard.
Don't stop learning your craft.
EDIT: One more thing, failure is ok... if you never break something big you aren't working at the highest level you can.",For sure man! My only concern now is being somewhat useless for a time :/ but that may be inevitable. Thanks for your support!,"That's so impressive! How long did you spend programming each day? Ive been trying to learn for a while but I feel like getting started is the hardest part, hopefully, I can become good at it just like you!",,I see you have replied to other comments but none that are asking about resources that helped you. Could you share any information about the resources you used to learn your craft in such a short time??
I made a list of FREE sites and apps to learn programming,"Hey everyone! I thought id share some of the sites i’ve been using to learn programming for FREE. Yes I really did download multiple free coding apps where there’s a will there’s a way no excuses :). Also pls note that some apps are only available on iOS
Sites and apps where u can learn coding for free.
Grasshopper
Code Avengers
Mimo
Geeksforgeeks
Khan Academy
Alison Online Courses
Programming Hero (kid-friendly)
Encode
Coursera
Tynker (kid-friendly)
Codeliber
W3schools
Exercism
MITOpenCourseWare
Free Code Camp
edX
The Odin Project
Code learning gamified and kid-friendly
Cyber Dojo
imagiLabs AB (kid-friendly)
CodeSpark Academy (kid-friendly)
Hopscotch Programming (kid-friendly)
Lightbot Code hour (kid-friendly)
Kodable (kid-friendly)
Flexbox Froggy
Learn coding on youtube
The Coding Train
And that’s it! Please comment below if i forgot any other sites and i’ll add them to the list asap! ———
UPDATE: Recently added as per your suggestions:
CS50 by Harvard University
Sololearn
Leetcode
U of Helsinki Mooc
College Compendium
Kaggle
TeachYourselfCS
Codingame
Hacker Rank
LearnXInYMinutes
App Academy
Code Camp
Code Wars
Youtube:
FreeCodeCamp
Fireship
CodingWithMosh
IAmTimCorrey
Grafikart.fr
AnthonyWritesCode
Corey Schafer
100 Devs
UPDATE:🤍 I’m so happy you all found this to be a helpful guide in your programming journey! Let’s do this!",u/illuminativeee,"Wednesday, February 23, 2022 at 2:42:27 AM GMT+5:30",2 yr. ago,,Thanks for Codingame! Really enjoying it at the moment,"University of Helsinki courses.
https://www.mooc.fi/en/","I’m taking this course now, it’s been like two weeks and it’s very good and entertaining, I like the fact that you don’t just copy and paste code, you need to write your own to pass the tests. I’ve learned so much and I recommend it to anyone who wants to learn Java.","teachyourselfcs.com
This is one of the best resources I have ever come across. Hope it helps :)","It’s not about the money.
It’s about the time.","We stay hungry.
We devour.",Man you guys are the shit. Love how much more welcoming the programming world is compared to legal weed. Shits like complete opposite and more friendly,"Definitely don't learn from GeeksforGeeks. It has a bad reputation among the programming community because anyone can edit the articles and courses on there, and for some reason attracts people who have never really programmed that much. Its terrible.",It’s because of SEO. Besides Stack Overflow it’s one of the first sites you see if you type a programming question in Google
"What online courses are 100%, entirely worth it?",I've heard even prestigious universities sometimes produce boring or shallow content... What online course has been entirely worth the time required for you to take it?,,"Sunday, May 27, 2018 at 3:56:08 AM GMT+5:30",6 yr. ago,"Berkeley CS 61B Data Structures, with Josh Hug.
One of the best teachers I've seen, esp for Data Structures. Super intelligent, and has an interesting personality too. Makes coding look easy. Watched his classes before I took Data Structures and it made my semester so easy. Completely free too:
https://sp18.datastructur.es/",Comment removed by moderator,"This
is something I recently started working on myself, the idea is that you will build a scaled down version of an entire computer, virtually, from NAND gates all the way up to the OS and the applications that run on it (Tetris being the application they aim to build though you can make anything), including an assembler and compiler to build those applications.
This might not be suited for people who are entirely going at learning programming alone, people who haven't been to school at all for CS or CE/CPE, those who have never heard of logic gates, don't know what assembly is or how a compiler might work, but as someone who just finished their degree, this is really interesting in that it aims to bring the whole thing together, tying all the CE/CPE concepts into computer architecture, and then building an OS, assembler, and compiler on top of all that.  It seems like it might be good to really integrate everything I've learned over the course of my degree.  It's also free.","https://www.udacity.com/course/design-of-computer-programs--cs212
is really good. It is taught by Peter Norvig, and pretty much any educational content by Norvig is well worth the time and efforts.","The trouble with these types of courses for me is that I end up quitting after the initial excitement of, ""Oh sweet, this course looks awesome! I'm going to do some cool stuff with ____ language"" Then life happens and I quit. Was wondering, for those who do tend to complete Udemy courses and whatnot, how do you keep in check? I've heard that MOOC completion rates are also pretty low. Hoping to get some insights on how to be one of the ""few"" that do finish and get something out of it.","watchandcode - JS
Angela Yu iOS - Swift/iOS Development
Android Development by Google - Android Development
CodeFights - Good if you already have programming knowledge but need to quickly pick up on syntax for a language
These are great for base knowledge, but nothing beats building your own project and struggling through it.","I heard MIT openCourseWare is a good resource. Spcifically,
Introduction to Computer Science and Programming",deeplearning.ai,Comment deleted by user,"I want to do all the courses listed here. But, I'm pretty sure I'll just bookmark and none of them will be ever opened again.
feels sad"
"Not trying to be Rude ok! but i think this sub needs to be More accepting of the people who asks questions, if I’m asking a question it means I don’t know what I’m talking about and i need guidance, I don’t need you to make me feel like programming isn’t for me.","I love this sub, but at the same time I’m afraid sometimes to ask questions and receive answers like “lol, you clearly know nothing about coding “ or “Go learn before asking “ or “Why would you ask that!!!” Not trying to be mean, there are a lots of amazing people out here who helped me a lot, and I’m very grateful for your help!! ... Just saying we have to be a little more understanding and patient with each other. Thanks and sorry if i offended anyone.
Edit: some people here pointed out that i was highly disrespectful of others, because I included some disrespectful comments of other people in my post, so In order to not offend anyone i deleted them. I also would like to note that i added them in the first place just as an example of the comments that you can encounter when asking questions in this sub. Thanks.",u/SoniaGorgeous,"Monday, April 15, 2019 at 4:07:14 PM GMT+5:30",5 yr. ago,,"I’m glad you received so much help!! People were helpful to me as well, but some were also slightly disrespectful, but mostly i see disrespectful people on other people’s posts not myself.","“lol, you clearly know nothing about coding “ or “Go learn before asking “ or “Why would you ask that!!!”
Honestly, I have yet to see such replies and as a moderator, I wouldn't tolerate them as they are against our
Rule #1: No unprofessional/derogatory speech
. Anybody who sees such replies should report them to us moderators as we cannot monitor each and every thread here.
When people reply with a seemingly offensive tone, or are brushing off a question then it's mostly because the original poster showed zero effort to remedy their problem or wanted to get their homework done. Questions that are answered in the (already fairly extensive) FAQ will also not be well received as not reading them is considered ""low effort"".
A honest question, where the poster put in effort to describe the question and show what they have tried and where they got stuck will always get good feedback and lots of help.","This one wasn’t removed as well. But was downvoted.
https://www.reddit.com/r/learnprogramming/comments/ax1tw6/can_someone_help_me_understand_this_block_of_code/ehqq8ro/?utm_source=share&utm_medium=ios_app
Yes and if you read the whole thing, the rude commentor was educated in why the comment was inappropriate and then the commentor returned to apologize for the rude remark. Maybe the moderators exercised their discretion to let it remain for that reason. It is a good example of exactly why you shouldn't remove every slightly offensive thing.",Comment deleted by user,"A word of advice, if you have any questions in life, you google it first. It pays to do a little research from your side before asking other people, because it can narrow down your questions a lot.","This is all hypothesis but what I have noticed. It is hard for me to get all my thoughts into words...so hope this isn't too jumbled:
What you describe is what I call ""casually disparaging"". Where someone replies to a comment with a mildly degrading/flippant/sarcastic
word choice
(not tone).
What I mean to say, is that the response is worded in such a way, that if you spoke to someone on the street the same way, you'd get anywhere from positive feedback back (maybe taking to a friend); weird look or ignored (ok tone, poor word choice); to punched in the face (bad tone; poor word choice).
Anyway...this phenomenon is pretty rampant on the Internet. And...it sucks.
I don't really know what to do about it except not do it. And if you do do it (I have), apologize publicly.
There are many many patterns that we get from tone of voice and body language in a face-2-face that you don't over text. To go along with those patterns are
empathetic
triggers in response. It's how we connect to other humans. Over text it is something that you have to be actively thinking about. Most aren't very metacognitive (thinking about their thinking), so you will see a large proportion of lack of empathy.
Again. I have no answers and I'm sorry anyone has to be subject to this. Both sides.","Feels a little like making mountains out of mole hills to me.
Even when you went and specifically looked for outright negative comments there are literal months between your examples, and it is not as if those comments had the support of the community. Nor were they the only response on the threads you linked.
It really seems like a non-issue to me. You're basically saying we need to have a discussion about acceptance and bullying over a few isolated cases of individuals being rude?
Few individuals being rude in isolated instances does not to me indicate a culture of rudeness or bullying.
If
every
post had comments like those I'd be more inclined to agree with you that we have a ""bullying"" issue. But that is not the case.","Edit:
As a notice, I'm opting to lock this post. Most of the existing discussions appear to have run their course, and the new comments that
are
being posted seem to mostly be repeating points that have already been made.
(Our normal policy is to leave posts unlocked, but this one seems likely to attract drive-by undesirable comments in the future, at least based on our previous experience moderating posts like these.)
I've had to give out this warning a few times just now, so I might as well sticky this PSA...
As per
rule 1
and our
policies regarding acceptable speech
, we expect
all
participants to communicate in a respectful, civil, and professional way. There are zero exceptions to this rule.
It is of course perfectly fine to strongly agree or disagree with other users. However, we expect you to express your stance in a civil, constructive, and professional way. If you are not sure how to do so, we ask that you do not comment at all. Inflammatory comments are unhelpful and are just more work for us mods to clean up.
Remember, there's another human on the other side of the screen. Bias towards assuming good faith.
And finally, I'd like to second what
u/desrtfx
said. This issue is somewhat nuanced: yes, ideally everybody should be patient and helpful, but also yes, repeated low-effort questions do burn answerers out. There's a fundamental tension here, and you can see it in any technical help forum above a certain size. Eliminating this tension is largely an unsolved problem; the best anybody's able to do is partially minimize it.
And on that note, please report posts that are in violation of our rules in both this thread and in general. We've been steadily clamping down on undesirable behavior (e.g. see the
rules overhaul
announcement), but we can't monitor every thread. We largely depend on user reports to let us know when we need to take action.","I think the most common ""question"" that is asked that doesn't get a detailed response (other than read the FAQ) is ""I'm completely new to programming and don't know where to start.  What should I do?""
I think people post this partly because they don't read the FAQ, and partly because they want a personal response, even if the personal response echoes the FAQ.  Unfortunately, that is a waste of time because the question gets asked so many times.  It's too bad, prior to posting, that a person isn't asked to watch a video that deals with the FAQ, but anyway.
Also, I think help can be provided if the person provides details.  A general ""I don't know why my program doesn't work, can anyone help"" has no detail, so requires the person to include some code, explain what is wrong (and why they think it's wrong) and show evidence that they tried to figure out where it went wrong."
The Missing Semester of Your CS Education (MIT course),"Over the years, we (
u/anishathalye
,
u/josejg
, and
u/jonhoo
) have helped teach several classes at MIT, and over and over we have seen that many students have limited knowledge of the tools available to them. Computers were built to automate manual tasks, yet students often perform repetitive tasks by hand or fail to take full advantage of powerful tools such as version control and text editors. Common examples include holding the down arrow key for 30 seconds to scroll to the bottom of a large file in Vim, or using the nuclear approach to fix a Git repository (
https://xkcd.com/1597/
).
At least at MIT, these topics are not taught as part of the university curriculum: students are never shown how to use these tools, or at least not how to use them efficiently, and thus waste time and effort on tasks that should be simple. The standard CS curriculum is missing critical topics about the computing ecosystem that could make students’ lives significantly easier.
To help mitigate this, we ran a short lecture series during MIT’s Independent Activities Period (IAP) that covered all the topics we consider crucial to be an effective computer scientist and programmer. We’ve published lecture notes and videos in the hopes that people outside MIT find these resources useful. The course website is
https://missing.csail.mit.edu
To offer a bit of historical perspective on the class: we taught this class for the first time last year, when we called it “Hacker Tools” (there was some great discussion about last year’s class here:
link
). We found the feedback from here and elsewhere incredibly helpful. Taking that into account, we changed the lecture topics a bit, spent more lecture time on some of the core topics, wrote better exercises, and recorded high-quality lecture videos using a fancy lecture capture system (and this hacky DSL for editing multi-track lecture videos, which we thought some of you would find amusing:
https://github.com/missing-semester/videos
).
We’d love to hear any insights or feedback you may have, so that we can run an even better class next year!
--Anish, Jose, and Jon",u/josejg,"Monday, February 3, 2020 at 10:55:23 PM GMT+5:30",4 yr. ago,"Topics covered:
1/13:
Course overview + the shell
1/14:
Shell Tools and Scripting
1/15:
Editors (Vim)
1/16:
Data Wrangling
1/21:
Command-line Environment
1/22:
Version Control (Git)
1/23:
Debugging and Profiling
1/27:
Metaprogramming
1/28:
Security and Cryptography
1/29:
Potpourri
1/30:
Q&A","Coursera has a super awesome free git course I took as part of a prerequisite to a programming boot camp.
I highly recommend it, I’m on mobile but I will see if I can link it.
Edited to add:
https://www.coursera.org/learn/version-control-with-git","https://missing.csail.mit.edu/lectures/
Returns 404
Which is linked to from:
https://missing.csail.mit.edu/2020/course-shell/
Class structure
The class consists of 11 1-hour lectures, each one centering on a
particular topic
.",Do not pass this by or bookmark it. Open the link and start now. All this information is vital and covers topics that are essential and that you will HAVE to learn on your own if anyway.,"Some off-the-cuff suggestions on the material itself:
Regarding the ""metaprogramming"" lecture -- maybe a better name is ""continuous deployment"" instead? Then you could also conceivably segue into talking about deploying and maintaining a constantly-running service and also discuss things like metrics, logging, and monitoring. Or maybe ""automating builds"" or ""automating process"" if you want to keep things more tightly scoped. Maybe ""automating toil"" if you want to focus more on the mentality? I don't think these phrases have the same panache as ""metaprogramming"", but at least you'll avoid overloading the word.
Regarding shell scripting -- I think it'd be nice to maybe include a brief blurb on Windows, since Windows scripting does come up every now and then (e.g. when provisioning VMs). Basically, just briefly mention Powershell is a thing/is better than batch, mostly so people know where to find sane tools when they need to do non-linux things.
Edit:
Third suggestion -- in the git section, maybe add an exercise where students manually create and resolve a merge conflict? Since merge conflicts tend to be one of the first hiccups you run into when you try collaborating with somebody using git.
Regarding the course itself, I think it would be worth exploring making the class mandatory, maybe as a 1-credit pass/fail sort of thing and an opt-out for students who believe they already know all the material.
We had a similar course to this one at my university, but it was only recommended, not a hard requirement for upper-level courses. This ended up adding drag/complicating the process of teaching mid to upper-level courses, since the instructors couldn't count on all the students necessarily knowing how to use basic things like git. Not sure if this problem/solution makes sense for your university though.","I’m a current cs student who has only so far taken “intro to cs” and am currently taking data structures, when would be a good time in my college career to start working my way through these resources? Basically, asking when I’ll have enough knowledge to get the full benefits of this program?
Also, even though I’m only in my second semester, I already notice a few gaps in what is taught at school and have to fill them in with some supplemental self learning (not that I mind). This makes a lot of us (me and other students) feel like we were supposed to know a ton of cs stuff before even entering into the major, which some of us don’t. So basically thanks a lot for organizing all of this info, it’s definitely going to help a lot of people.
Edit: thanks everyone!","Great resource, well done!",This looks great! I studied engineering rather than CS and am now in a dataops role and I constantly feel like there are little inefficiencies in my use of these tools.,"This is amazing, but I didnt see any exercises to practice lecture content. Are there any external sites I can use or that you, as the instructor, recommend?",We all love Vim but why dedicate a whole section on it? I think most devs are just aren't going to use it personally or professionally. At least not as their primary tool.
"With no degree or prior experience, I got a job in programming after 8 weeks of studying off of the back of soft skills and a personal project.","Using a throwaway.. I hesitated on making this post, but I figured I'd throw it out there. I'm sure I'll get 1,000 people with ""ACTUALLY..."" kind of comments, but whatever.. this place encouraged me in my start so hopefully this can help someone else.
I had never typed a line of code in my life when January 2022 rolled around. I wanted to change careers, looked into data analysis, then ended up stumbling on software programming and saw that it was possible to teach yourself.
I immediately started looking for someone I possibly knew who was doing it, got their number, and offered to buy them lunch for an hour of their time. Over lunch, the guy (who has been a programmer for 15 years) told me 3 things...
You can teach someone to be a programmer easier than you can teach someone ""not to be a dick or be hard to work with"" (his words, not mine)
Personal projects that you commit to and can show off are worth more than any certificate or bootcamp.
If you're not going to be experienced, you'd better be humble and willing to learn, and you display that by asking good questions.
I started building an app from the ground up with no coding experience. I did TOP for 2 weeks to get a a handle on HTML/CSS basics, then used a guide to help me start building my own app. I started the app by mapping out all of the layers I'd want it to have, then just started taking it one step at a time.
I got comfortable enough after about 5 or 6 weeks that I was reading junior developer job descriptions that didn't sound outside of what I could figure out, so I started applying. I wrote in my journal in February ""Applied for jobs today that I'm way under-qualified for, but oh well, the worst that can happen is that I get told no"".
I got a call from HR from a company, then a meeting with the hiring manager (who is an expert in the language I'm working in), did good on those, then was given a project. I was told the project should take 2 to 4 hours. It took me 14 hours. I didn't anticipate getting the job, but it was a good learning experience. I got on a follow-up call with the hiring manager, and he offered me a job because he thought I was great in the interviews, asked good questions, and showed ""great enthusiasm to learn"". There were several people with CS degrees who didn't get hired who also applied.
I've been working full-time for 2 weeks and just had a call with my boss yesterday where he told me he's giving me a promotion to fill-in for another employee who's leaving. I'm way under-qualified, but they're being very patient with me and letting me learn on the job and they're pleased with my progress. Every task they gave me to complete in my first 3 weeks I finished with plenty of time to spare.
Here's how I'd boil down what I did...
Ask good questions in the interviews. Don't just ask about pay or try and talk yourself up. Even with the HR person, ask them about themselves, how long they've been there, what they love to do, what they love about where they work, how they got started in programming (if applicable), what a great teammate looks like to them, what big projects are they working on, what's something they've learned in the last 3 months at work, what do they want to get better at, etc, etc. etc. I don't know how else to say it other than take a genuine interest in them and be a normal person. You're not being interrogated, relax and just talk to them.
Be honest about where you are. No one is going to be willing to teach you if you're not honest about needing help. It's true that people hire juniors for potential. Hiring managers sit through a ton of interviews, they will see through the fronting and pretending. Be humble and teachable. You have to be honest about what you're not good at or you're going to have a hard time getting better. It's okay to not be amazing yet. A sign that someone is going to be a good learner is that they ask good questions and aren't afraid of being wrong or not knowing something. Have a good attitude about not knowing.
Have a personal project, it's the best way to learn for me and I imagine many of you. Nothing will test you more than having to be the product manager of your own app. Use databases, build out user infrastructure, make it look nice, etc.. nothing will make it stick more in your brain than just pouring over issues that are unique to you and your app.
This is just my experience. Feel free to ask me questions, or don't. Hopefully this helps someone identify where they need to get better.
edit: One more tip that I can't believe I forgot, maybe the most important one..
I asked the hiring manager ""What's been your experience hiring for this role? What's been the thing that separates candidates or been the most common thing that's been frustrating?"" He said that it's very hard to hire someone who doesn't have a good answer to the question ""why do you want to be a programmer?"" other than to say ""well, it just seems like a cool job"" or ""the money's good"". Those reasons are obvious, but if someone's going to put their neck on the line to hire you and vouch for you, it's important that you have good reasons for wanting that job. Reasons that are unique to you and what you bring to the table.
For example, mine was ""I want a job where everyday I know I'm going to be challenged and learning for the rest of my life. A job that will never be about doing the same thing, but will push me and allow me to learn."" He liked that answer",u/NoSomewhere2165,"Wednesday, April 20, 2022 at 12:32:44 AM GMT+5:30",2 yr. ago,"So first off, congratulations on your hard work! That’s extremely impressive of a feat to pull off. Especially when there’s a lot of people with years of education and time spent doing internships, projects, etc having a hard time getting work.
A word to the wise though, stay humble. I wouldn’t go around offering advice about becoming a programmer when you’re the exception to the norm. People that have stronger technical skills and awful soft skills tend to get really defensive early on in their career. Especially those struggling to get their first job. Seeing someone with zero education and experience do in a few weeks what’s taken them 5 or more years and/or still haven’t gotten a job can be disparaging and invoke negative feelings/actions.
For questions though, I have two:
I’m curious what your promotion was within two weeks. Are you a senior dev now, or maybe a level II on scale of 1-5 or something?
What’s your pay like? If you can provide a rounded figure (not exact) I’m sure others might be curious too. I’m mostly wondering if they took a risk on you because they could low ball due to your lack of formal education and experience.
— edit —
Just read your post’s edit, and I’ve gotta hand it to you, with that attitude you’ll go very far in this field. That kind of answer has lead to me getting 60% salary bumps by switching to better positions that helped foster a desire to learn and build. Keep it up and you’ll go very far!",Comment deleted by user,Comment deleted by user,Yeah this post is borderline learnprogramming circlejerk level. Remember those 200k stay at home work after 2 months of effort joke post? Here is the lite version of it.,"Nah son, what was your prev job?",,"Some people just have the knack/drive for it. But OP's story is in no way shape or form the norm.  Most people are still figuring out the basics 8 weeks in, let alone building out a full-featured app. I know I was.
OP did also mention they were switching careers.. So maybe he had ample experience from another industry that gave them a leg up over other candidates. (Just going by their edit they seem like a well-adjusted individual. And that's an important quality)","Great tips and I'm really proud but if I can be honest this is actually disheartening lmao
I've been learning forever and basically never applying cause I don't feel qualified in my area no matter what I do.
(Nothing on you though - stay winnin champ)","A feeling can be very subjective thing. Instead of thinking that you don't feel qualified try to measure your skills and knowledge. Set some complex project as your target and work towards it. If you can complete it then increase the complexity. Don't use tutorials but work by your own (well, it is okay to look for small code snippets but not take for example ""Make your own Facebook - tutorial from start to end"" and implement it fully).
You can show your github projects (hide the stuff you did by using tutorials) and ask for feedback and criticism from here. I'm sure many of the people here can give you constructive feedback and tell if you are on hirable level or not.",I feel like I wasted college getting two degrees in social science (psych and cj) and  I've been wanting to learn how to program or get into the IT field I'm just not sure where to start.
"Made it as a full time game programmer, 100% self-taught!","So this is my little success story! I remember back when I started learning programming I was constantly doubting myself as well as the path of self learning, and reading those posts helped me a huge ton, so I figured I could post one in case it motivates anyone!
So I am now 32. I've been in the sound design field my whole career (from 21 to 29), and had a change of heart at 29 when I realized I had no financial / job security in this field. Decided to quit, got a QA job in a indie game company, and started learning programming in my free time. Bought some online courses on Udemy & Zenva, and went heads deep into tutorial hell. Worked on this almost every evening and weekend, even had a mobile app to practice C# basics while commuting to work, and had my boss' approval to continue my courses during work lunch hour.
The first year was hell. Don't get me wrong, it was exciting and I found out programming is actually a whole lot of fun, but I'd also wake up every morning wondering if I'd ever manage to get a programming job without having a degree, and if I'm even smart enough to get good enough to be employable. There was a LOT of self-doubting, but I pushed through anyway. I'd put everything I learned into personal projects (I even finished creating a full game that's available and fairly popular on itch.io) and eventually got out of tutorial hell after almost 2 years lol.
Then things drastically picked up when the company I work at decided to make a game jam for employees only. Production paused for a week, everyone formed into teams of 5-6, and we made games from scratch based on a specific theme during that week. I took that opportunity to ask my boss if I could be a programmer in my team for this game jam, so I could show off what I've learned a bit.
My team's game was a complete success, everyone loved it, and I was able to code everything myself, despite the project being fairly difficult (some mechanics were way harder than anything I've had seen in any tutorial / course). This was apparently enough for the lead programmer to see what my skill levels were, and a week later my boss asked me if I wanted some programming tasks here & there to get used to the work, and told me he had full intentions of making me a full time programmer when they will have a spot available. That was a few months ago, and that spot just opened up last month, which they gave to me right away!
We hired a new lead QA to replace me (I got bumped up to Lead pretty quickly), I did their training, and my transition has now been completed! I am now a full time game programmer, 100% selft-taught, and had absolutely 0 coding knowledge beforehand. This is a dream come true! Imposter Syndrome is of course kicking in quite a bit, but I know things will go smoothly seeing as they know my exact skill level and still decided to give me the position anyway.
So here you go! Hope it motivates anyone, and don't hesitate to ask any question!",u/BasuKun,"Tuesday, December 13, 2022 at 3:13:21 AM GMT+5:30",1 yr. ago,How did you get the job in QA? Did you have relevant experience? Sounds like it was a good path for getting close to programming jobs while growing your skills,"Yep, the cost to enter a sound design degree was pretty hefty (20k), so I worked as QA for 2-3 years beforehand so I could afford it. My entry into the sound design field after graduating was also a Sound QA position, so I definitely had some prior experience which made it fairly simple to get a new QA job. :)",Comment deleted by user,"Thank you!
Probably a cliche answer as well, but working on side projects (i.e. putting what I've learned into practice) was the biggest thing that I felt made me learn quicker. I would also go the extra mile, where everytime I'd finish a module (ex: coding Pong in Unity, or Mario in Unity etc), I would try and add an additional mechanic by myself into the module, to see if I've truly learned what I was coding.
For example, the Pong's module was a simple Player vs Player game, so once this module was done, I tried implementing a Player vs AI game mode, so I had to code a simple AI from scratch.
The Brick Breaker module had a very simple ball bouncing logic where it would always bounce at a 90 degrees angle, so once this was done, I tried changing this logic so it would bounce at any angle depending on where it hits on your paddle, and how the paddle was moving at the moment of impact.",,"Damn dude! You'll have been a lot faster than me if you get a job within 8 months! It took me almost 3 years. :)
Good luck, hope you get it!","Nicely done. I think the way you went about it is good to. I wouldn’t want to accept a new job as a programmer without prior experience. It would be sink or swim from day one. Your way you could ease your way into it.
I don’t understand what tutorial hell is. If you find yourself in tutorial he’ll, stop watching tutorials and start doing.","Thank you! I'm really glad this turned out this way as well.
I don’t understand what tutorial hell is. If you find yourself in tutorial he’ll, stop watching tutorials and start doing.
I guess it's a weird way to explain my situation, since I was already doing side projects while watching tutorials. The issue was that I was too ""addicted"" to tutorials and felt like I was missing a clear goal if I didn't keep watching courses and stuff. This lasted way longer than it probably should.","happy for you. im learning html and css, and will start C next year","Cool project to think about linking both of those skills together, try and build a web server and locally serve your website :)"
"[MIT] The Missing Semester of Your CS Education - Proficiency with tools YouTube series covering cli, shell, git, profiling, debugging, vim, data wrangling, security & more","Classes teach you all about advanced CS topics,  but they rarely teach you proficiency with programming tools. The video series will help you master the command-line, use a powerful text editor, use fancy features of version control systems, and much more!
Class homepage
All video recordings of the lectures are available
on YouTube
.
Course overview + the shell
Shell Tools and Scripting
Editors (Vim)
Data Wrangling
Command-line Environment
Version Control (Git)
Debugging and Profiling
Metaprogramming
Security and Cryptography
Potpourri
Q&A",u/SwapApp,"Friday, May 14, 2021 at 8:04:17 PM GMT+5:30",3 yr. ago,"Thanks.
I'm currently going through cs50. I will check this out after","If one of the things you plan to look at is git then absolutely watch the CS50 web programming course's lecture on git. It's an hour long and explained it far better than any video I've seen
Also nice username",,"At my job (manager of developer teams) we use the following non-primary tools extensively:
notepad++ (for all the POSIX compliant RegEx you could possibly want, and for when Excel pukes on your 2m line file).
BeyondCompare (for comparing snippets of your giant ass stored procs to see WTF is happening in this temp table). Also great at merges
Docker for spinning up your localhost version of your ADF deployed monstrosity
git shell for having access to a linux-ish shell so you can kinda test your deploy script fu locally.
Non-Primary meaning not your IDE, your deploy container, etc.  Learn RegEx ya'll.  So handy.",Do not try to breeze through these. Spend at least a week on each lecture.,I don’t have a CS degree but how the fuck does a comuputer science degree not cover version control and debugging. Those things seem pretty fundamental to software engineering which is what a massive amount of CS degrees go on to do...,"cs is more theory/fundamentals swe is more practical, for better or worse",Halfway through my degree and have yet to hear the phrase “version control” come from a professors mouth. Bonkers,"I was going to reply by saying there's a split between academic computer science and software engineering. But now that I think about it, version control is really important for doing problem sets. I took my last college CS class before github and I would have loved being able to save the state of my code before trying something dangerous. We used to rely on increasingly arcane filenames like
TBirchProblemSet3_v2_3rdattempt_hopeitworksthistime.CPP
.","Because your learning the science, not the craft. Teaching version control would be like engineering students being required to go do something like welding or building a wiring harness."
Does anyone else feel guilty for not spending all their free time learning to program?,Especially when I see someone with a nice job. I always tell myself it could be me if only I put more time and effort into learning to program instead of making excuses for myself. Anyone else?,u/LyvesNaouny,"Tuesday, July 20, 2021 at 1:37:23 PM GMT+5:30",3 yr. ago,"DO NOT DO THIS TO YOURSELF
YOU WILL BURN OUT","I did this all year 2020 and 2021. Can confirm. Did burn out. I'm just playing videogames and looking for work now. I have ideas for new projects but I really don't want to start because they feel like a chore instead of something fun. Pace yourself and do something non-programming in between like reading a novel, videogames, art, cooking, etc.","Yes, but I need some free time for my own mental health. I cant work an 8 hour shift then code for 3-4 hours and sleep and start it all again 5 days a week. You need some time to live.","It depends on how it looks like when you study programming. A healthy study schedule acknowledges the fact that there is not much more to gain after 6-8 hours of intense studying and proper learning.
Nobody needs to use ""all their free time"". If you are unemployed, studying 15+ hours a day just is sign for not studying properly and if you have a job, you have to accomodate for that by leaving room for mental and physical recovery.
How does your study schedule look like currently? Remember there is an infinite space between ""too lazy to do something"" and ""spending all your free time""","Not really. I think for any beginner learning a new thing, one or two hours a day is enough. A lot of experts in learning science also say that four hours a day is a nice hard limit after which learning has diminishing returns.
I feel guilty if I don’t program at all during a day but as long as I hit my goal that day, be it one hour or four hours, I let myself enjoy my other hobbies.",FOMO.,In what direction? Studying/advancement fomo or fun/life fomo?,"I'd feel guilty if I spent ALL my free time learning how to program after the first year. After that, keeping up that routine is like a carpenter spending all his or her time learning all about carpentry tools.
Just don't man, find a different hobby.",,"I used to, but now I feel all that ""code 20 hours a day"" is bullshit. Maybe I got old, maybe my brain works differently, maybe I'm just not that good at my job. But if I sit down for a whole day writing and thinking about code the last thing I want to do with my evening....is sit and write code all night. Been there, tried that, all I got was burn out and a deep hatred for software development.
I need that time to purse other interests and keep my body and mind healthy. I cook, I train, I run DnD, I socialize. And yes sometimes, I learn something new about coding.  I'm not just a developer, I'm a person. I refuse to let anyone make me feel shame for not overworking myself for someone else's yacht."
"I got HIRED! Self taught, no college CS degree.","Man this is all surreal!! From being an Electrician to getting my first tech job as a Software Engineer without having prior professional experience or internships. Uff still in shock.. Let's back up for a second..
Back in December 2020 took an introduction course with HTML, CSS and Python. I was still working a bit back then so I was only coding when I get home and not too tired. And of course I was still testing the waters as it was all gibberish lol But I fell in love with it, made me giggle like a baby whenever I do something visually with a line of code. Got my nanodegree, then took CS50x and CS50w which opened my eyes more and gave me a full understanding on what's going on under the hood(I recommend those to start to all beginners who just started learning). Don't get me wrong, it's been frustrating to stay consistent, motivated learning by myself. Also, my environment didn't help as there was always family drama, fights and loud atmosphere that held me a few times to concentrate so I've been somewhat inconsistent. But I always picked myself up, still refused to give myself excuses to stop learning. I was telling myself, people out there came from the ""dirt"" and made something from nothing, who am I to complain, I'm sure there's someone out there that had it worse than me and still succeeded. Plus, reading success stories on this sub really kept me going, asking ""stupid"" questions instead of googling(underrrated skill) and people still were nice to me and took their time to answer, connecting with people who made it and listening/reading about their experience and path gave me a boost and guidance.
Last 6 months I've been focusing on front-end learning React, my first time learning in bootcamp I found here with a nice group of people from all over the world, first time collaborating on a project. So when I applied for that backend job, I really didn't think I'd get a reply but a week later I got that call! I was shocked because I haven't touched python/django in months and they were still interested and they said they're intrigued by my unique path and my motivation to learn. Technical interview didn't really go well (my second interview ever uff)
A few things to keep in mind:
-Don't ever compare your path to other people's paths, each person has their unique journey just focus and keep looking straight not sideways.
-Learn the fundamentals of whatever language you wanna master and make projects with it, I only started getting better with practice.
-There's no special course to get you a job.
-Networking, hitting up other web developers and talk to them, setting up video calls and learn from their experience(introvert here and still did that so don't be afraid).
-Apply to jobs even if you think that you don't qualify, that's their job to decide.
*** Update:
-My youtube for my cs50 assignments:
https://www.youtube.com/channel/UCEA2cmmXXvB6Cx13k3LN8OQ
Bootcamp: A free bootcamp created by a React developer from this sub, I'm still in it and it's almost over but he's having another one for advanced level to redux and other things but this time for a fee because, one it's worth it and its taking a lot of his time and effort managing it and managing 100+ learners u/ __god_bless_you_",u/kingmathers9,"Tuesday, July 26, 2022 at 8:02:36 PM GMT+5:30",1 yr. ago,Yeah just wanted to reiterate the last point. I landed my first job by applying for a role that was way over my head in terms of experience. Did well enough throughout the interviews that they offered me a more entry level position that was opening for hiring in the next week,"And the reality is that once you start your career you will be thrust into work that is over your head. All the time.
In one way or another all devs are self taught. I went to school (not CS) twenty years ago. A devs career is filled with teaching yourself things.","This is exactly the same thing that happened to me. Applied for a more senior position, did initial interview, got told no but wait since in a week they might open more positions. I thought this was another polite way of just pushing me off.
Turns out they did call me back and after 6 interviews I landed the job in one of the top software engineering companies in the world. No degree.",Exactly,"What did the technical question ask of you? And why was your perception of it negative? Congratulations on getting hired, I’m proud of you (:","Most questions are in this video
https://www.youtube.com/watch?v=9ai0b1LRMQM
I learned a lot from Dennis about Django",We are very proud of you! Keep us updated! I’m on the same path too but for mobile.,Well done! Do you have a portfolio we could have a look at ?,"Sure, projects section isn't even updated though
https://khaledbenyahya.com/",Good job! May if i ask how old you are?
"Hello world. I started programming at age 30, which was about 8 years ago. Today I had my last exam for my computer science degree. I've been programming at work for about 3 years now. Never give up my good peoples!","As the title says, just keep at it and you'll get there. You'll have lots of highs and lows along the way, that is all a part of the journey! Happy to answer questions if any one has any. Happy coding!
EDIT: I got asked a number of repeating questions so I figure I'll post the answers here.
My history
I tried studying IT and programming after school at 17, I dropped out and partied.
I was a laborer for around 10 years. Before I was 30 I decided to change careers because my body was breaking down and I couldn't work as a laborer for another 30-40 years.
I started studying history and politics while I was a laborer. I stopped for surgery.
After surgery I moved into a new laboring role that used computers to program coordinates of a cutter. I really enjoyed working with technology and that inspired me to change my study stream. I didn't change it yet as I hadn't gone back to university.
I applied for any entry level IT jobs that I could, I was really lucky and won an entry level job as a business analyst in a software engineering team. They sent me off to do a diploma of IT, I was introduced to Java, Cobol (lol), and SQL. I did no programming at work besides some basic SQL. It took me a little over a year to finish my diploma. Once I finished I decided to do a degree in CS. I took a year off study before enrolling, because I had more surgery. In this year I tried studying Java again because I had no idea what I was doing. I studied for about 5 months until I realised my maths was terrible and stopped and focused on maths.
Around 4 years after joining and no programming at work, I went to a data analytics team, relearnt SQL, and worked in an enterprise data warehouse doing basic data analytics. My knowledge of the business got me that job, not my technical skills. At this stage I was doing my non-IT minor subjects. I fucked up and did 4 more subjects then I had to, I wasted a year of study. Woops. I was scared of doing Java at university, because I still had no idea what was going on. During my non-IT minor subjects and my fuck up, I was studying Java myself at the same time. By the time I did Java 101 at university I had basically finished my first textbook from my diploma. I felt reasonably comfortable with the basics. The textbook was
Objects First With BlueJ
for Java 1.7
Java 101 was when I finally felt comfortable programming. The textbook I got there was
Introduction to Java - Comprehensive Edition - 10th Edition
for Java 1.8. At this time I was able to start writing Java at work, writing Java programs and running them in a database.
A couple of Java database programs later and I got a job as a database administrator. I starting learning and writing Bash and Python scripts to automate my job, doing some data processing / cleaning / loading, and web scraping.
From there I went into my current role, a programmer in a data science team working on Apache Spark with Java, Python, and Scala.
I am trying to learn functional programming with Scala. I feel like I am back to beginning again. I have no idea what I am doing or how to think about it :D It is so different from imperative C style programming.
After Java 101 I did the next level Java class at uni, did web programming, Android programming, and some scripting.
I now program mainly in Java, Python, SQL, and trying to add Scala.
TLDR - I was studying part time while working full time.
Resources that really helped me
Java
Objects First With BlueJ
Introduction to Java - Comprehensive Edition
Think Java - How To Think Like A Computer Scientist
Core Java 1 & 2
Python
Automate The Boring Stuff
Maths
Khan Academy
Maths Is Fun
WolframAlpha
Bash / Linux
The Linux Command Line
Regular Expressions
Regular Expressions Tutorial
Studying In General
10 Steps To Earning Awesome Grades (While Studying Less)
Anki Cards",u/blindcant,"Monday, February 25, 2019 at 3:49:09 PM GMT+5:30",5 yr. ago,"Its people like you that give me hope, thank you !",Congratulations :). I'm starting again now at 28. I studied for a year about 6 years ago but unfortunately lacked the focus to get anywhere. I'm feeling good now about improving and slowly chipping away at the discipline.,Comment deleted by user,Comment deleted by user,Comment deleted by user,Thinking of doing a degree too (I'm 35). Do you have a family? How much time did you have to spend per week on your degree?  How long did it actually take to get the degree?,"I had no computer experience at all 3 years ago.  I have since gotten my cybersecurity degree and now, at the age of 35, I will start my MS in Computer Science.   I'm still wet behind the ears in pretty much everything but this kind of post is encouraging to us who still feel like we have a long ass way to go!  Congrats to you and thank you as well","I also went back to school at 31 and got my degree.  Have been working as a developer for about 5 years now.  It's my dream job and I'm loving (almost) every minute of it.
(The minutes I don't love are when the STUPID CODE WONT DO WHAT I TELL IT TO DO)
I'm fine.","Congrats! I’m 31 and have been programming for about 2 years now. My question is, do you think to land a good job (and be good at it) a CS degree is necessary? Not necessarily because of the degree itself, but the ins and outs a degree like that will teach you. I learned Java and was fortunate to get a job at a startup. It’s been going good, but I still struggle with all of the little things that go into programming. After all, Java and other languages are just tools to get the job done. Question 2, any suggestions on the best way to learn those little things that might come with a CS degree without enrolling? Thanks for posting!","Congratulations man, proud of you! Currently 16 and I hope I can make a similar post in a few years :)"
Most of you need to SLOW DOWN,"Long time lurker here and someone who self studied their way into becoming a software engineer.
The single most common mistake I see on this board is that you guys often go WAY too fast. How do I know? Because after grinding tutorials and YouTube videos you are still unable to build things! Tutorial hell is literally the result of going too fast. I’ve been there.
So take a deep breath, cut your pace in half, and spend the time you need to spend to properly learn the material. It’s okay to watch tutorials and do them, but make sure you’re actually learning from them. That means pausing the video and googling things you don’t know, and then using the tutorial as reference to make something original!
Today I read a tutorial on how to implement a spinner for loading screens in Angular web apps. I had to Google:
How to perform dependency injection
How to spin up a service and make it available globally
How to use observables
How to “listen” for changes in a service
What rxjs, next, asObservable(), and subscribe() do
How observables differ from promises
This took me about 6 hours. Six hours for a 20 minute tutorial. I solved it, and now I understand Angular a little more than last week.
You guys got this. You just need to slow down, I guarantee it.",u/SamePossession5,"Sunday, July 10, 2022 at 8:10:36 PM GMT+5:30",2 yr. ago,Comment deleted by user,,People are delusional if they think they are industry ready after 3-6 months,"I’m a junior Dev myself. Went though a C# bootcamp from November to February. After that I was fortunate enough to land a job where I was then paid to basically take an internal training program (almost like another bootcamp) for 3 months at my company.
I was recently promoted to a junior Dev, and I KNOW there is still SO much to learn. In fact, the more I learn, the more I realize that I know very little in terms of programming.
What’s funny is I just spoke as a guest presenter to a group of people who recently graduated the same bootcamp I went through.
For whatever reason, most of them seem to have it stuck in their heads that they deserve to walk out of a 3 month program making $90k or more working from home. Sure, that might happen to a small select few students, but the vast majority are not going to start anywhere close to that.
There is just SO much to learn and there’s no way a 3 month bootcamp is going to give you all the tools to succeed in such a short amount of time. I’m not at all knocking the bootcamp, it was great. I’m knocking the entitlement that people seem to have coming out of it.","IMO for many people becoming a lower paid react/whatever dev is not that bad outcome. Where i live, most of so called ""entry jobs"" give at least an average pay (which for many people outside capital and couple other biggest cities is really good), but most of them pay 1,5-2 times the average. Now, when there are more possibilities to work remotelly it's even better. Landing a job for a company that's based in us or uk could give shitloads of money, even if it pays the smallest dev pay they have where they're based.
That's a pretty big incentive to get any dev job as soon as possible for a lot of people.","Couldn't agree more, I put a topic up a little bit before this for this exact reason, no takers yet but I'll see, the idea is feed a project to build out but not be a tutorial only the desired outcomes. Exactly as you mention it can take hours to achieve something that may on the surface appear small but actually comes with a bunch of challenges and learnings.
There's a lot of posts on here about how many languages to learn or the quickest path into complex data science etc. etc. I don't think this is the fault of those trying to learn, I think perspectives are being generally skewed by a lot of grandiose ideas being pushed out online. You are 100% correct, folk need to slow down and eat the elephant one bite at a time.",Anki has been the single resource that is getting me out of tutorial hell.  Thank god I found it.,"Tutorial hell is literally the result of going too fast.
While I largely agree with your overall sentiment, I disagree with this. Tutorial hell is the result of focusing on tutorials instead of spending time doing practical problem solving, thereby getting the false feeling that you’re learning when you are in fact never developing any meaningful skills.
Going slow alone will not fix this.
But I do agree that slowing down the panic and focusing on actually really learning stuff properly in a practical sense so you can do it for yourself is critical.","Tutorial hell is the result of focusing on tutorials instead of spending time doing practical problem solving, thereby getting the false feeling that you’re learning when you are in fact never developing any meaningful skills.
Very much this. Interviewed a college grad a while back. In the phone screen he was asked to research part of the Java ecosystem he didn't know about and present it. He researched Spring/Spring Boot. His presentation was fine, but he couldn't answer simple questions about what beans were, or what dependency injection is. He had a little demo app and we asked how development went. It took him a couple days to figure out why it wasn't working. The problem was one tutorial didn't tell him to check off a box in a GUI tool for generating a Spring Boot project, so he found another tutorial.........he was rejected, obviously.",
I created a chrome plugin that automatically mutes youtube commercials,"This is a chrome plugin that automatically mutes youtube commercials. After the commercial finished, the volume goes back up.
Thanks to this, casters can still be reworded by youtube, but you don't have to listen to crappy commercials.
https://chrome.google.com/webstore/detail/youmuter/hbhjkldledabllijjmnmfhhiejephibe
and you can checkout the source code here:
https://github.com/adamgajzlerowicz/muter",u/nelf86,"Friday, October 13, 2017 at 6:37:37 PM GMT+5:30",6 yr. ago,It's definitely useful for if you use it for music in the background,"You should also post to
r/ASMR
. This is their biggest problem with youtube. They will love it!",Can you do this for Twitch? Would be appreciated,But i still have to wait 5 sec to skip... Adblock got me,"Great way to support creators without hearing constant Nissan ads, love it!",,Comment deleted by user,"Hey, you're the real MVP","This is good stuff man. It works!!!!
Can you please take out sometime and explain what exactly you did? How do you figure out if a commercial is playing?","I haven't really tested it but there seems to be some bugs from reading your code:
Since you set muted because of commercial to true regardless if you actually muted or not, you cannot rely on it to know whether to unmute later on. It looks like after the first commercial, you can no longer mute the video because your script will always want to unmute.
Similarly, since you don't restore that value after you unmute a video after a commercial, you are now unable to distinguish whether the user has muted the video.
Nice work though!"
I put together a list of ~650 university CS courses you can take!,"https://collegecompendium.org
I’ve spent the last week compiling around ~675 publicly available CS courses from around 20ish colleges. Hopefully you can get some use out of it.
Hopefully you can get some use out of it. :)",u/colxwhale123,"Friday, June 18, 2021 at 5:24:14 PM GMT+5:30",3 yr. ago,"Very cool website.
One ""bug"" I found though. I went to submit a course (vt cs3214 computer systems) and it either didn't submit it, or there is no feedback on the submit button.",I will check this - thank you for bringing this to my attention! :),"Excellent work! I love the idea. Have you ever considered trying to automate adding courses or open sourcing it? I’d love to help contribute to something like this for science courses, for example :D",It is open source! The GitHub is now linked from the homepage,"So when it asks you to log in to, say, Cornell Canvas, do you have to create an account with them?",Why pay for college when you can take their classes for free? :P,The piece of paper that makes people think you’re qualified at a corpo job,I don't understand the need for this. There are no video lectures available for the courses you mentioned. What good would it do to know the courses they are teaching.,Right. I expected these to be courses with all the material available online for free. But a lot of these links just lead to the course description in the university course catalog. Not very useful.,"Some of the courses have linked video lectures, others do not. If that’s important criteria, we could potentially display that as a badge of some sort on those courses"
"After 8 months of consistent self-learning and two rounds of interviews for a junior position, this morning I received my first rejection letter.","And you know what? What's done is done. Learning from it and moving on.
To anyone out there also grinding, don't give up. Make sure to take care of yourself too, both mentally and physically.
Cheers 🍻",u/Vaylx,"Monday, November 1, 2021 at 2:10:54 PM GMT+5:30",2 yr. ago,"Way to go. Great attitude! I got more than 15 rejections before my first job and each one teaches you something different for you to improve upon.
Keep pushing and comeback to let us know when you land your first job.","It took me 2 years and literally dozens of applications to get my first IT call center job, 4 years and a lot of work later I'm the systems administrator at a financial institution.
Edit: some people have had some questions. I started with a CompTIA A+ cert and 1 semester of a CS degree I dropped out of. Did retail electronics repair before getting my first job. I will say I got very lucky that my first IT job was a contract position with my state gov, but I capitalized on that to get hired directly by the gov and moving up a bit before leaving (3 years, got to deskside) and doing well enough with that resume to move up to sysadmin. I'm happy to answer any questions for people getting started, and want to shout-out
r/itcareerquestions","My first full time position out of bootcamp was junior developer position in the summer of 2020, switched jobs 3 times since then and I’m making over 100k as a software engineer. Keep going, you got this!",,"""To anyone out there also grinding, don't give up. Make sure to take care of yourself too, both mentally and physically.""
Was feeling super low and down. Your words made me feel stronger. Sending much ascii affection to you.
Thank you dear random Internet friend. Never never never give up. You got this.","“I have not failed 10,000 times – I’ve successfully found 10,000 ways that will not work.” What’s striking about Edison was that he didn’t see giving up as an option, but instead saw failure as an opportunity to learn and do better.",Excellent attitude and best of luck with your job hunt :),"The first job is the hardest. It is important that you just keep looking for a place that isn't horrible that says yes. You are likely going to get an unfathomable amount of rejection and ghosting. Just part of the game. Do not let it discourage you, this is normal and it happens to most people.",23 rejections...bruh !,23 rejections? Those are rookie numbers.
A super harsh guide to learning computer science basics and ultimately programming ...,"Hey all, Here is probably my final take on this. I have been like many of us here, trying, failing, switching resources, starting over, giving up and so on... But after so many tries, these are, in my opinions the best the internet has to offer if you are ready to take the learning serious and not just wanting to be a code monkey. All of this is free, yes free, no need to buy a course from a random dude on the internet. For the books, well I'm sure you know, anything can be found on the internet if you dig enough. Just focus one these, no need for more projects, these have more than enough and they are really really challenging. If you manage to finish, you'll be in top 10% of the self-taught people. The textbook part is optional, but you should do it anyway, it will for sure improve your problem solving skills. Don't cheat, trying to find solutions online or such, take your time, it's doable, albeit harder cause you are alone. Finally good luck, well no it's not about luck, more about discipline ...
Start here:
CS61A - Structure and Interpretation of Computer Programs
(introductory cs course at berkeley, hard af but you will learn a lot if you keep at it)
CS61B - Data Structures
(data structure course at bekeley. Programs interact with data, you will learn how with this course. The MOST MOST MOST important course on this guide)
CS61C - Great Ideas in Computer Architecture
(Teaches the inner working of a computer so that you can write optimized programs)
Then specialize for whatever you like, I suggest these:
Full Stack Open
(web development)
15-388 A - Practical Data Science
(Lectures)
(data science)
CS193p - Developing Applications for iOS using SwiftUI
(mobile dev)
Textbooks:
Basic Mathematics - Serge Lang
(teaches basic mathematics as the title says, but is proof based)
Discrete Mathematics with Applications - Susanna Epp
(basically the math of computer science)
Edit 1: There is a lot of questions/suggestions about CS50 so let me adress that. It's not a bad course, and if you have one and only course to take to learn basic cs and programming, it's the best at that. But if you have time the 3 Berkeley introduction course is CS50 on steroids, and every course on the spe part is more in depth. What you want when learning is to build good foundations so that you can learn more adavanced stuff later on.
Edit 2: CS61C now has a valid link thanks to
u/vZanga",u/Lesabotsy,"Monday, July 26, 2021 at 12:43:53 PM GMT+5:30",3 yr. ago,It seems that CS 61B also uses Java like the Princenton course. Do you have experience with the Princenton's algorithm course?,"Yes, really similar but I chose it because it's a direct follow up from the same institution, it's more practical and have better projects. Basically you're job ready after.","I’ll agree with you in this. I’ve taken 61A, 61B  and 61C from Berkeley. 61A is better than any intro programming course you can find online. Extremely challenging and rewarding if you go in fresh and take it seriously. 61B has some insane projects but you will be ready to write some code at 90% of companies after that course. 61C is a grind for sure. I’d recommend maybe completing nand to Tetris before you take this course if you have no systems experience.
Don’t waste your time watching these 19 year old on YouTube trying to teach algorithms and recursion. These courses are the real deal.",Comment deleted by user,"Pseudostudy is the perfect term for doing things that feel like you're studying, but definitely aren't.
How many hours must I have wasted lining up tabs and bookmarks of courses that looked like they'd be worth it, only to never get round to doing them?","If you're looking for the CS61C archive -- just check here.
https://inst.eecs.berkeley.edu/~cs61c/archives.html
Fall 2019 has the webcasts that are available to the public on YouTube.","I'm not at all familiar with java, but have some background in python and c, would you still recommend this?","Yes, language only matter for a small percent, that is after you're done you can directly be productive in the popular languages. What you will mostly learn is problem solving technics that are applicable to any language.","This is giving me Java nightmares from college again. This is why I did an astrophysics PhD. Because we used Python.
I know people talk about language not mattering but it does matter in the amount of useless syntax you have to learn. I’m also learning a foreign language at the same time and holding down a research job and raising kids.
I really want something deeper like this, but that’s nit using fucking Java. I guess I’m just going to do cs50",Your intuition is 100% correct. So many of the programming concepts can be taught without horrible enterprise-y syntax bogging down students. Java as a language for teaching programming is among the biggest crimes academic institutions have committed against students - all in the name of being a pipeline for employers.
